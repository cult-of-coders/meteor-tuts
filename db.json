{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/meteor/source/fonts/percolate.eot","path":"fonts/percolate.eot","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.ttf","path":"fonts/percolate.ttf","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.woff","path":"fonts/percolate.woff","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/favicon.png","path":"images/favicon.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/icon-white.svg","path":"images/icon-white.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","path":"images/logo-coralspace-left.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/main.js","path":"script/main.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","path":"script/smooth-scroll.min.js","modified":0,"renderable":1},{"_id":"themes/meteor/source/style/style.less","path":"style/style.less","modified":0,"renderable":1},{"_id":"themes/meteor/source/fonts/percolate.svg","path":"fonts/percolate.svg","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/OSXsmall.png","path":"images/OSXsmall.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/tuxSmall.png","path":"images/tuxSmall.png","modified":0,"renderable":1},{"_id":"themes/meteor/source/images/windowsSmall.png","path":"images/windowsSmall.png","modified":0,"renderable":1}],"Cache":[{"_id":"themes/meteor/.git","hash":"049265de896a0397e3c70e6313762e3c26f93523","modified":1474889374000},{"_id":"themes/meteor/_config.yaml","hash":"2bbc5bebc9a3102442c4d4b89d4ae0c829fd4e62","modified":1474889374000},{"_id":"source/index.md","hash":"13d4e4f70cdffa8b46a7d4e5a9de787ba851cbae","modified":1570190407767},{"_id":"source/commandline.md","hash":"0b329d957b5386c4280d372fcb876d29015ba01d","modified":1474889325000},{"_id":"themes/meteor/layout/layout.ejs","hash":"9c495eaef6bd651b5112cd99e2d98c1dc4fcf394","modified":1478707506886},{"_id":"themes/meteor/layout/page.ejs","hash":"4cb647f08cbe030da2483d36c57e3c19480f24c6","modified":1570698281713},{"_id":"source/api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/packages/accounts-ui.md","hash":"d39b2c6c7c31c45fa3f385d07f28ea9b1cb4431d","modified":1474889325000},{"_id":"source/packages/appcache.md","hash":"88d1f57aeb3c3b7ee3c54bf9a820d05ae644acaa","modified":1474889325000},{"_id":"source/packages/coffeescript.md","hash":"a00aceb918ea7d16331531960168af7795ed90ed","modified":1474889325000},{"_id":"source/packages/audit-argument-checks.md","hash":"14e35b60b49aff6bc6fd398f12e799e834289407","modified":1474889325000},{"_id":"source/packages/jquery.md","hash":"10866aa89a5a93b288342c00539e52922b6b6cc0","modified":1474889325000},{"_id":"source/packages/less.md","hash":"b4d4a20a5a96ffe17b7c5e4a72a1c79960730a2c","modified":1474889325000},{"_id":"source/packages/ecmascript.md","hash":"a000de71dc604eb453363540f8743b56feca7444","modified":1474889325000},{"_id":"source/packages/markdown.md","hash":"029caba5c4b521899f513d6eab2117ee4bbf1071","modified":1474889325000},{"_id":"source/packages/oauth-encryption.md","hash":"96d52e09c837cbb137752de21b749507f25d2820","modified":1474889325000},{"_id":"source/packages/modules.md","hash":"3c169bea0e926cdd28e2d2b040bae07de1d2ae53","modified":1474889325000},{"_id":"source/packages/random.md","hash":"b689a94ec85207d1fa7950a23294298bb0843680","modified":1474889325000},{"_id":"source/packages/spacebars.md","hash":"13454fe7dc69f4f741775fae978307151d8a8c2e","modified":1474889325000},{"_id":"source/packages/underscore.md","hash":"6d3cc369754de4d2b341032cd28bb8523aaebe92","modified":1474889325000},{"_id":"source/packages/webapp.md","hash":"8071b9ee8705fb99a8f236e2de3bf9ac2350d503","modified":1474889325000},{"_id":"themes/meteor/source/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1474889374000},{"_id":"themes/meteor/source/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1474889374000},{"_id":"themes/meteor/source/images/favicon.png","hash":"c019ad5135fb00e9d5a8a000a7162f4876cf583b","modified":1474889374000},{"_id":"themes/meteor/source/images/icon-white.svg","hash":"037afdf5842532cdc696bd93541be8a273ddf9dc","modified":1474889374000},{"_id":"themes/meteor/source/images/logo-coralspace-left.svg","hash":"ce3fa809cc5498c23597f68fc7f94d72f0deb453","modified":1474889374000},{"_id":"themes/meteor/source/script/main.js","hash":"aa6f1d81ab38e3d8e0dbdef9a574d2330f8ff5a4","modified":1474889374000},{"_id":"themes/meteor/source/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1474889374000},{"_id":"themes/meteor/source/style/style.less","hash":"6517fbcd0c75aeb1bd4fc6f0c9a834fcef9a77e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-help.ejs","hash":"03fcaff5811b72920c87fa9154ffc4853b30b8de","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-guide.ejs","hash":"f490bb8fd8e5abd0e71c97c92a335a0802e329e1","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-compass.ejs","hash":"8072852c211ea881b8facccbe00d975b2507d990","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-logs.ejs","hash":"47638a8a92ab5e5a7a143e1588ca9baaec371f9d","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/panel.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-support.ejs","hash":"4ac49bda616e8046bd4175fbb6e891dfcab658c0","modified":1474889374000},{"_id":"themes/meteor/layout/partials/illustration-github.ejs","hash":"ad171cc4d41acf187831c415cb1928d5ef7a1142","modified":1474889374000},{"_id":"themes/meteor/layout/partials/sidebar.ejs","hash":"2a8d739e3b6d6c1f497ae8ffdd3f9dbe0efe38d6","modified":1570697530652},{"_id":"themes/meteor/source/fonts/percolate.svg","hash":"b7c6df677a47fd66316ce90839550bfad6fd462f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Checkbox.less","hash":"9971b489264f4b37fb901cd8417accba7becf270","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Input.less","hash":"5be8dadb507ff338ae7cea539cae535b7779334c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Textarea.less","hash":"4c6089bb5f41dde32d1828d6d27a0899f8e3c8cf","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Select.less","hash":"9065734a36e52c8ce2830d403da3852eebe3590c","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/Radio.less","hash":"ecc255428e2883b49d074648a290de07b7a9d4d5","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/animation.less","hash":"2c01fa20c282b133dda12a852fb61baba0c0af82","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/base.less","hash":"0fce53b3187d99296dedd0fcd90887a4b336ad83","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/button.less","hash":"d76568349602485c2ec7d0d3380091c4a5e8e2ca","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/form.less","hash":"dcb4320c34011659a1e2974a7ae5b28b444cc519","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/docsearch.less","hash":"26a087b4b6748822b7323584ba8dc375c7462641","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/formatting.less","hash":"7d9dbfc393136e7a28fff7076f74bf5b7f3670cd","modified":1478702733534},{"_id":"themes/meteor/source/style/_global/icon.less","hash":"b6f93082065f57b48185c6fcbffafe5dfc98c86f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/mobile.less","hash":"d4f28dae69f89ce6e9646774ce6d07d6f677c683","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/link.less","hash":"a80547ffbacd58422e7095aadbbd73ba0c650e31","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/nav.less","hash":"e3eb2ec6e2245f6b4d40589c104618f9ed69f37f","modified":1474889374000},{"_id":"themes/meteor/source/style/_global/syntax.less","hash":"ff408a13d195a50b3310cdbf5ca31961393e7983","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/layout.less","hash":"655fcc41ad239d5a219aabc4c79c0ac970b6c8bd","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/panel.less","hash":"9438a41518ecdaa01d64ae65317ff6e27b03720d","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/nav.less","hash":"a558ca89e296a7e94d3a29e998aa119c877c065e","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/content.less","hash":"c90d7765335d1ee1eca5726ada84d7cb35a61745","modified":1474889374000},{"_id":"themes/meteor/source/style/_theme/sidebar.less","hash":"5fe1fb4c64bcf10d8bfe0caf63d2f969ed206a6c","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/clearfix.import.less","hash":"8dd7f85394fc6e232cad232ea54e605a06be002e","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/color.import.less","hash":"5c88b7bc663df13316e3748f8516f4324f603bd2","modified":1477889942561},{"_id":"themes/meteor/source/style/_util/easing.import.less","hash":"69523005d6afbd184cfa91d629cf1a931ebf8fd1","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/helper.import.less","hash":"7baf147d5c4bac8c5ef4b2690af3b185b4df56d2","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/link.import.less","hash":"a6856c0b5017b7bb688d7a2cf2d5f3bd682df6fe","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/normalize.import.less","hash":"02fe53286d071637534d5aa2c57c76c168c0d521","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/index.import.less","hash":"2a38f287116d66f9848229b59d03464b4f9b18b9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/scrollbar.import.less","hash":"1a45d8862fafd8d62f4e2562278a88ed3008ac32","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/lesshat.import.less","hash":"491b7bc1426fb35bf17c28418aadab66b480b5e0","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/text.import.less","hash":"3c1b4559dd5cf7b6b37a42ab8b7ebd9e40e2eee9","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/ui.import.less","hash":"b577e1c8092b87f10baef86c0f9d30125b2cdf94","modified":1474889374000},{"_id":"themes/meteor/source/style/_util/typography.import.less","hash":"c8deee0f5ad8b529eeb097d90ef7a3f2f91441f6","modified":1474889374000},{"_id":"source/guide/exposure.md","hash":"6893c7b267318a295ab6b0e9217321b57570cff9","modified":1477242714256},{"_id":"source/guide/links.md","hash":"25c0c110477f71369760a06b5e4e0ced17f884e7","modified":1477238465174},{"_id":"source/guide/query.md","hash":"2778f710129d12fe1fb312bc0a3e4105d5a8e770","modified":1477242714252},{"_id":"source/api/collectionLinks.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/old_api/accounts-multi.md","hash":"f86155b4d0ff6c8d9c3c5ad883c53eb6625c2b29","modified":1474889325000},{"_id":"source/old_api/accounts.md","hash":"2e04b2e0b51c4037d77aad2bbf6a5f82d3d922ec","modified":1474889325000},{"_id":"source/old_api/assets.md","hash":"23d669772ecc4ec8f1bd5d517bcd8a965fa78dbd","modified":1474889325000},{"_id":"source/old_api/blaze.md","hash":"d75884756afddfd2bc791c3e3384df73e71f70a9","modified":1474889325000},{"_id":"source/old_api/check.md","hash":"170d63a00796364506ee4397241062d2e276d454","modified":1474889325000},{"_id":"source/old_api/collections.md","hash":"1d715fc4a18cc8430248757fa37b14ce57b3730c","modified":1474889325000},{"_id":"source/old_api/connections.md","hash":"dd194f4c3b60bf51779e477580db9325a6dcaafb","modified":1474889325000},{"_id":"source/old_api/core.md","hash":"07aba32faf25ed16fc6442fa59ebaea2ececb16d","modified":1474889325000},{"_id":"source/old_api/ejson.md","hash":"626c38a1341ea12a3f957615e5200092b91963bf","modified":1474889325000},{"_id":"source/old_api/email.md","hash":"97a80f9b11f3c9d6bc7265201527d29bed77083f","modified":1474889325000},{"_id":"source/old_api/http.md","hash":"eb2a09d9f2d65120d688b47e42e1e06b4e153364","modified":1474889325000},{"_id":"source/old_api/methods.md","hash":"2a9c64efb7135baf43a9e88bc4fd06aa6040482d","modified":1474889325000},{"_id":"source/old_api/mobile-config.md","hash":"cc49bf8a8c411d91ca7f584e8761e7e3baeee5c9","modified":1474889325000},{"_id":"source/old_api/packagejs.md","hash":"2da4cb7c02733ed934172dd0ff6d66aafef79610","modified":1474889325000},{"_id":"source/old_api/passwords.md","hash":"d223dbc16d787843fdb10ef421d6f411b5bb1d79","modified":1474889325000},{"_id":"source/old_api/pubsub.md","hash":"ebc3e8107cb22e75191bff600dfd36e43f12eab5","modified":1474889325000},{"_id":"source/old_api/reactive-var.md","hash":"5eaff15aed6dfcfb87c12b0593a60e760d63e801","modified":1474889325000},{"_id":"source/old_api/session.md","hash":"de19fade87018a3a20a26d570feb8112d41daabe","modified":1474889325000},{"_id":"source/old_api/templates.md","hash":"149a1d828bd90b3b0e038d8a41b2ea5491751cb4","modified":1474889325000},{"_id":"source/old_api/timers.md","hash":"9ce32673bd46b7c61662ce708289a46237e6d4d4","modified":1474889325000},{"_id":"source/old_api/tracker.md","hash":"62b255f29d1201c116acc196ce6f76fb38abee25","modified":1474889325000},{"_id":"source/api/collection.md","hash":"56d88ef0790046a8072cff0aace7eab16df4057b","modified":1474904935000},{"_id":"source/links/intro.md","hash":"22563ced472e63aac548720e73c40ab9afdc822b","modified":1474944651000},{"_id":"source/links/addLinks.md","hash":"fb9ff624d61dd6f7c3a801dc9efaafb726e768cf","modified":1474945427000},{"_id":"themes/meteor/source/images/logo.png","hash":"77000ddb64c4ce7c6052165396c095bf56db02df","modified":1477889765000},{"_id":"source/api/reference.md","hash":"c9d62f4f296cda47e8d7fe9c867589cb8db8504d","modified":1476081598852},{"_id":"source/packages/boilerplate.md","hash":"b79d5a279c49629ffec2fae5830d8832e0474061","modified":1476277449040},{"_id":"source/packages/live.md","hash":"1a1e31abcc882e2c4ab4f88051b93828f398da46","modified":1476244662000},{"_id":"source/guide/namedQuery.md","hash":"fb9b64e1178aa6634dd1e1b0fa27367c95a7db64","modified":1476888260769},{"_id":"public/packages/boilerplate.html","hash":"665174f7e1b4feff6855a21d0d55bb44ab33a07a","modified":1476888401514},{"_id":"public/packages/live.html","hash":"0a2e82ff9a2cd1a265b719c224b5d356e8ef51f7","modified":1476888401515},{"_id":"public/index.html","hash":"2a4b01a3bbfe3a7492e8a5191100489974508e31","modified":1570192613539},{"_id":"public/guide/links.html","hash":"c5f969dbf38c8e880c0f298a26d5de4af725a25c","modified":1477242743358},{"_id":"public/guide/query.html","hash":"44cc7663225cd95a1074e35998c6e3f072f7b7a8","modified":1477242743358},{"_id":"public/api/reference.html","hash":"5804cc3431b97d6f22e75bdcaf78a97a7f1ce98c","modified":1476085992422},{"_id":"public/guide/exposure.html","hash":"8b234e6ae9c612847fd356e09c78d9a8a4d44bb8","modified":1477242743358},{"_id":"public/guide/namedQuery.html","hash":"18e7c7262deab6642396e1162075d13afaa43464","modified":1476888401516},{"_id":"source/api/exposure.md","hash":"b5ec5e9db871bb693b9e25ab6cf5d59ad0702b54","modified":1476888279565},{"_id":"source/api/namedQuery.md","hash":"eda9a78bc73477331f156a28948402034f259e07","modified":1476245109000},{"_id":"source/api/links.md","hash":"4933e81d277eb4f400180ee17100d0c1dfd8e5d5","modified":1476245463000},{"_id":"source/api/query.md","hash":"70ad66dd1db063ce9788d30386c00b8618adcb8f","modified":1477238135558},{"_id":"public/api/exposure.html","hash":"7bb3d6eb402621c8175d21560f69fbbfb0b870bf","modified":1476888401516},{"_id":"public/api/namedQuery.html","hash":"307f9da138f1b2e7f72b5bee136e74017b0c3da7","modified":1476888401516},{"_id":"public/api/links.html","hash":"603498b87891bb87385fdd492fee5b189d8d865b","modified":1476888401516},{"_id":"public/api/query.html","hash":"1e98a577a8bc9afb73a3ee2c15e4b359557890d2","modified":1477242743359},{"_id":"source/gettingStarted.md","hash":"7199eaf4f890d3f93a33aa637eb36176d62d7743","modified":1477475995711},{"_id":"source/chapters/1/intro.md","hash":"c59fb4bed39d25b2b1478179994d63921e4c25f2","modified":1570697530648},{"_id":"source/chapters/1/collections.md","hash":"047d79ebae684f9304746587d569e90f6dc0e761","modified":1570190407757},{"_id":"source/chapters/1/methods.md","hash":"11db47129eeda370d9afacfa74bcaa49af3f6ce6","modified":1570190407759},{"_id":"source/chapters/1/pubsub.md","hash":"cf56584b2bc44923b8132199d667875573f56a2a","modified":1570190407759},{"_id":"source/chapters/1/reactivity.md","hash":"52ba34f85e2782568bc760b67303f255c007d08e","modified":1570190407760},{"_id":"source/chapters/1/users.md","hash":"d19779346e35124c76eba98327de154e17d88aa0","modified":1570190407760},{"_id":"source/chapters/1/security.md","hash":"f55e4b3bf69242fdfebfc03a94404a4883f60c08","modified":1570190407760},{"_id":"source/chapters/1/meteorSnacks.md","hash":"a79bdb5d941f78e389069200801cc4537c43bd89","modified":1570190407758},{"_id":"public/chapters/1/reactivity.html","hash":"edc0657fbefcd41f818cb93673c9876fd7fec392","modified":1570192613540},{"_id":"public/chapters/1/intro.html","hash":"a54caa912f04e597bff4e04266ff962755736803","modified":1570192613539},{"_id":"public/chapters/1/collections.html","hash":"52af125c2447921ab4c6128dba4ef34b82e1bdfc","modified":1570192613539},{"_id":"public/chapters/1/methods.html","hash":"c1b01695cd032f0d2dc197e6193aca1048168a94","modified":1570192613539},{"_id":"public/chapters/1/pubsub.html","hash":"6e4f7decd8d1c118ac4b388eedc7dec9497b9183","modified":1570192613540},{"_id":"public/chapters/1/users.html","hash":"c3e9d6336c0da2ae640efec8e81c3b25de9f6294","modified":1570192613540},{"_id":"public/chapters/1/security.html","hash":"647ab8564aac23bc466a47b67554b6a62fabd7fb","modified":1570192613540},{"_id":"public/chapters/1/meteorSnacks.html","hash":"bb74334b608857b1e1a6a681540e479aac1b8cee","modified":1570192613540},{"_id":"source/chapters/2/blaze.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1478600232572},{"_id":"source/chapters/2/react.md","hash":"c9946991b722c8e858ce1cad425bc72b39ad005c","modified":1496388591575},{"_id":"source/chapters/2/intro.md","hash":"df60b44e735d91619dd4f714f6a2182895c87607","modified":1570190407761},{"_id":"source/chapters/1/conclusion.md","hash":"9eccbb93600975cd1757971b05f2ab06f1852e44","modified":1570190407758},{"_id":"public/chapters/2/blaze.html","hash":"5fe67948b8d91195c5cb4d2fd8a04960a3d10377","modified":1478606307193},{"_id":"public/chapters/1/conclusion.html","hash":"c7e9bc6401731a62085217560b720951b14357f9","modified":1570192613539},{"_id":"public/chapters/2/react.html","hash":"167712d20603d7241ea5115c98dd3cd071777e9e","modified":1570192613540},{"_id":"public/chapters/2/intro.html","hash":"4db09f9ea8ebdb703657f349c8c3591c0c4e4abe","modified":1570192613540},{"_id":"source/chapters/2/conclusion.md","hash":"79f51574ff02cf98e8cb66e92d4534fc0df22d26","modified":1570190407761},{"_id":"themes/meteor/source/images/OSXsmall.png","hash":"b4bee61cda163ca0df6c258c690e222f3fbebb78","modified":1508484836976},{"_id":"themes/meteor/source/images/tuxSmall.png","hash":"05a369c1b8db9cc8b2d1e35ee3ec814cceaddc21","modified":1508484836976},{"_id":"themes/meteor/source/images/windowsSmall.png","hash":"2c2e638acae06d0c25c0575d1f697a0f8a21a1a0","modified":1508484836976},{"_id":"source/chapters/3/devtools.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1508760585205},{"_id":"source/chapters/3/fixtures.md","hash":"dc1e1ef0513c62a4d043265f5bf60ba0e69f746f","modified":1508926625389},{"_id":"source/chapters/3/reusable-modules.md","hash":"2d7cfc86989315c5172e18bfe55021dd772cd65c","modified":1508917989387},{"_id":"source/chapters/3/structure.md","hash":"7a756a3191eb69e172c2a98255a868769524bcae","modified":1508929763021},{"_id":"source/chapters/3/uploads.md","hash":"86e6dd86cec2befeba48524c49a130a693ffa42b","modified":1508922004378},{"_id":"source/chapters/3/emails.md","hash":"116fdedf481cb6a2eaf57736c2478e6991426533","modified":1508930053435},{"_id":"source/chapters/3/events.md","hash":"c3924617f1be95cf1bbaef2e9ef723631e1a7f3c","modified":1508924426387},{"_id":"source/chapters/3/intro.md","hash":"558b9b15def871cb7eabff401ee070236c712823","modified":1570190481632},{"_id":"source/chapters/3/linting.md","hash":"b010998080c9ba38988ebeb87b003c9fd046b770","modified":1570190407763},{"_id":"source/chapters/3/methods.md","hash":"93c61a21710157ddbd03595b32d450607e7598e3","modified":1570190407763},{"_id":"source/chapters/3/microservices.md","hash":"fc8eaff412be2f92979ef6fee1007f60140d9f4d","modified":1509557209987},{"_id":"source/chapters/3/services.md","hash":"a65fb78269111eb652f080c31a84bdf44c8aca31","modified":1570190407765},{"_id":"source/chapters/3/persistence-layer.md","hash":"f226aff25a28d6fe3ff8627555cb7f7210b1db3d","modified":1570697530652},{"_id":"source/chapters/3/testing.md","hash":"27c788532fd6c2bf057bb450449408461641003e","modified":1508949103623},{"_id":"source/chapters/3/publications.md","hash":"16e3603bc97b064ffa3eae3e046ff2dbc377fa7c","modified":1508924952955},{"_id":"source/chapters/3/conclusion.md","hash":"2185303663bd2c14f74b5256b139caab39f30805","modified":1508938554170},{"_id":"public/chapters/2/conclusion.html","hash":"867dd029c4537aebca0dea9426ec0592fb792040","modified":1570192613539},{"_id":"public/chapters/3/uploads.html","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1570192024484},{"_id":"public/chapters/3/conclusion.html","hash":"3ff5adb3797ea458e2b3d5ce89a6778e2c695842","modified":1570192613542},{"_id":"public/chapters/3/intro.html","hash":"d3823c2e57e8b4081d1e7f418a0e8779812adceb","modified":1570192613540},{"_id":"public/chapters/3/events.html","hash":"4be362818c6203a2306e007e04112c795ef38df5","modified":1570192613540},{"_id":"public/chapters/3/structure.html","hash":"3388ca8adafbfde2941dfac29e7773a840493641","modified":1570192613540},{"_id":"public/chapters/3/testing.html","hash":"ab4f1e975398d5036d6b3e20ee2edf853a4ae225","modified":1570192613541},{"_id":"public/chapters/3/services.html","hash":"432bfb00c63a4c38cc26d90c952b2ca353370a26","modified":1570192613541},{"_id":"public/chapters/3/microservices.html","hash":"06b217a5cdbcb0696f67e8c326c082e7d7f29087","modified":1570192613541},{"_id":"public/chapters/3/emails.html","hash":"96247f0c17d169e028b4e67ba628a01282983934","modified":1570192613541},{"_id":"public/chapters/3/methods.html","hash":"3c72bd46ae08fe86b68f9a79dcb437d34bc9081d","modified":1570192613541},{"_id":"public/chapters/3/linting.html","hash":"2317969db3446dad0e0a4aac8680ce303d6c7e21","modified":1570192613541},{"_id":"public/chapters/3/reusable-modules.html","hash":"bbbbd032e9e624623874fd75024e13c412208069","modified":1570192613541},{"_id":"public/chapters/3/persistence-layer.html","hash":"95c494c35f701721a45811672f883ba359939247","modified":1570192613541},{"_id":"public/chapters/3/fixtures.html","hash":"415cf31891187bc1cdbef4efa0d2c114d1d247a4","modified":1570192613541},{"_id":"public/chapters/3/publications.html","hash":"6bd33dd91ecbd9ef7018b989c3a85297cc570d88","modified":1570192613541},{"_id":"public/fonts/percolate.eot","hash":"9f46f6ed3453808cb206b5b8c7c399f8c7c50b4b","modified":1508930984596},{"_id":"public/fonts/percolate.woff","hash":"f475ff4ac3d777c8d56bc7040d6f8576b86398a5","modified":1508930984596},{"_id":"public/fonts/percolate.ttf","hash":"ae93904a100e0c875bb382cb88709de4cd8b6a37","modified":1508930984596},{"_id":"public/images/logo-coralspace-left.svg","hash":"ce3fa809cc5498c23597f68fc7f94d72f0deb453","modified":1508930984596},{"_id":"public/images/favicon.png","hash":"c019ad5135fb00e9d5a8a000a7162f4876cf583b","modified":1508930984596},{"_id":"public/images/icon-white.svg","hash":"037afdf5842532cdc696bd93541be8a273ddf9dc","modified":1508930984597},{"_id":"public/images/OSXsmall.png","hash":"b4bee61cda163ca0df6c258c690e222f3fbebb78","modified":1508930984597},{"_id":"public/images/logo.png","hash":"77000ddb64c4ce7c6052165396c095bf56db02df","modified":1508930984597},{"_id":"public/images/tuxSmall.png","hash":"05a369c1b8db9cc8b2d1e35ee3ec814cceaddc21","modified":1508930984598},{"_id":"public/images/windowsSmall.png","hash":"2c2e638acae06d0c25c0575d1f697a0f8a21a1a0","modified":1508930984598},{"_id":"public/script/main.js","hash":"aa6f1d81ab38e3d8e0dbdef9a574d2330f8ff5a4","modified":1508930984615},{"_id":"public/script/smooth-scroll.min.js","hash":"c80cccc6c68f32b348b3d8459eb89686871b2e38","modified":1508930984615},{"_id":"public/fonts/percolate.svg","hash":"b7c6df677a47fd66316ce90839550bfad6fd462f","modified":1508930984615},{"_id":"public/style/style.css","hash":"8e03b766cac454473fb5f5779a73e34e40669667","modified":1508930984905},{"_id":"source/chapters/2/css.md","hash":"ddaef8a1fb5dd5075073be4b3360ceb5130c439d","modified":1570190407761},{"_id":"source/chapters/3/typing.md","hash":"1b9a71127163bb69f15c0accb23d57d77f744558","modified":1570698215310},{"_id":"public/sitemap.xml","hash":"a811df094b65bee72d18c9885a0c92b56b6da4b1","modified":1570192199816},{"_id":"public/chapters/2/css.html","hash":"d98e4b0d3b877594453d299614fe95ab8954dc62","modified":1570192613542},{"_id":"public/chapters/3/typing.html","hash":"d93ce3bfa9991e83c77a243e2fa463d7c02dc89f","modified":1570192613542}],"Category":[],"Data":[],"Page":[{"title":"Hello","description":"Getting started with Meteor","disqusPage":"Chapter 1: Intro","_content":"\n## Installing the framework\n\nTo install the framework, please follow the steps from the meteor official website: [meteor.com](https://www.meteor.com/install)\n\n## Tools\nThe tool that works best for us, and the one which we recommend you to use is WebStorm from Jetbrains.\nYou can download Webstorm from [here](https://www.jetbrains.com/webstorm/download).\n\nTo learn more about Webstorm and how to better use it, [go here](https://www.jetbrains.com/webstorm/documentation/).\n\nA free alternative to Webstorm would be VSCode. This is an extensible, feature-rich code editor that is\nrelatively easy to learn.  \nYou can download it from [here](https://code.visualstudio.com/).\n\n## Creating a project\n\nAfter you have installed Meteor, you can easily create a new project by running the following command in \nyour terminal:\n\n```\nmeteor create myProjectName\n```\n\n## Start Meteor\n\nNow you have to start up the project you've just created by running the following commands:\n\n```\ncd myProjectName\nmeteor run\n```\n\nThat's it! You've just created your first project in Meteor!\nNow, to view your work, type *http://localhost:3000* in your browser's address bar and hit Enter.\nYes ! It's **THAT** easy!\n\n## Application folder structure\n\nThis is the basic folder structure that an application, such as the one you've just created, should be made up of:\n\n\n\n```bash\nclient\n    main.js # this file contains: /imports/startup/client\ndb # This is where our persistence layer is. Including external APIs\nimports\n    ui # contains anything User-Interface related\n    startup\n        client\n            index.js # loads everything that is needed for the client to function (ex: routes, css, anything concerning the client)\n        server\n            index.js # loads everything that is needed for the server to function\n    api # contains the rest\nserver\n    main.js # this file contains: import /imports/startup/server\n```\nAs a reminder, you could always use the github repository. For that, go [here](https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/1-clean-installation)\n\nEverything in \"/client\" and \"/server\" is automatically loaded, as it is explained [here.](https://guide.meteor.com/structure.html#load-order)\n\nIn general we will need more control over our application, and in order to gain that control\nwe will refrain from using auto-loading in our projects.\n\nThis compiles all the modules we specified into our project with the \"import\" keyword, when we type **\"meteor run\"** \ninto the command line, but does not load all of them.  \n\nBecause of this, everything in \"/imports\" must be explicitly imported so Meteor can \"gain knowledge\" about it.\nThis also gives us the ability to build modular applications.\n[Read more about this here.](https://danmartensen.svbtle.com/build-better-apps-with-es6-modules)\n\n\n## Importing from NPM\n\nFor now, we won't get into a lot of details, but the basic idea is that with Meteor you have access to the\n full NPM ecosystem, allowing you to import modules from http://www.npmjs.com.\n\n\"moment\" is a library you will use when working with dates and times in your projects.\n\nNow, open a new terminal (leave the one with server open) and in the root directory of the project we are working on, write\n\n```\nmeteor npm install --save moment\n```\n\nWe use \"--save\" here because it will save it in our packages.json, meaning that if we work in collaboration with\n other developers, when they download the project to start working on it, they will have the same package \n installed, with the specified version thus making their life much easier. \n\nTo use \"moment\" in your project, at a basic level, use this code snippet:\n\n```\n// file: (for example) /imports/startup/server/index.js\nimport moment from 'moment';\n\nconst date = moment(new Date()).format('YYYY-MM-DD')\nconsole.log(date)\n```\n\nIf added to the server side you will see the current date printed on your terminal, otherwise, if added client side you will see it on the browser's console.\n\n## Atmosphere\n\nAtmosphere is a package manager which is specific to Meteor only, just like npm is for NodeJs. \nIt helps you manage your project's dependencies easily.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\n\nYou can learn more about it on the project's [webpage](https://atmospherejs.com).\n\nAdding a package is as simple as typing this into the console:\n```\nmeteor add accounts-base accounts-password\n\n```\n\nThat's it. You now have added an user management package in in your application. And it's ready for you to use it!\nThere are a lot of cool and useful packages out there that we'll explore during these tutorials.\n\n## Importing from Atmosphere\nYou can also use the modular approach with Meteor packages!\n\nTo import an atmosphere package we prefix it with `meteor/`\n\n```js\nimport { Accounts } from 'meteor/accounts-base'\n\n```\n\nDon't worry too much about this, we are going to explore them later in this tutorial.\n\n## Importing from local files\n\nAs you saw in the example for creating the project's folder structure, we have the ability to import from \nlocal files by using an \"absolute path\":\n```\nimport myService from '/imports/startup/server/myService';\n```\n\nYou can also use a relative path:\n```\nimport {sum} from './helpers';\n```\nIn order to see how this exactly works in an example, you can go on the github repository, [here](https://github.com/cult-of-coders/meteor-tuts-tutorial)\nPretty easy right ?\n\nWould you like to find more about importing and exporting ? You can read more here:\n- [http://exploringjs.com/es6/ch_modules.html](http://exploringjs.com/es6/ch_modules.html)\n- [https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087](https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087)\n\n\n## Need Help ?\n\nIf you get stuck and need help, you can ask other Meteor evangelists out there:\n- https://forums.meteor.com\n- Go to the #meteor channel on FreeNode Server: [https://webchat.freenode.net/](https://webchat.freenode.net/)\n- Contact Cult of Coders for consultancy, [here](https://www.cultofcoders.com/contact)\n\nMake sure you Google your questions first, to find out if somebody had the same problem as well \n(and most likely has found an answer to that problem), before asking the community!\n\n\n","source":"chapters/1/intro.md","raw":"---\ntitle: 'Hello'\ndescription: Getting started with Meteor\ndisqusPage: 'Chapter 1: Intro'\n---\n\n## Installing the framework\n\nTo install the framework, please follow the steps from the meteor official website: [meteor.com](https://www.meteor.com/install)\n\n## Tools\nThe tool that works best for us, and the one which we recommend you to use is WebStorm from Jetbrains.\nYou can download Webstorm from [here](https://www.jetbrains.com/webstorm/download).\n\nTo learn more about Webstorm and how to better use it, [go here](https://www.jetbrains.com/webstorm/documentation/).\n\nA free alternative to Webstorm would be VSCode. This is an extensible, feature-rich code editor that is\nrelatively easy to learn.  \nYou can download it from [here](https://code.visualstudio.com/).\n\n## Creating a project\n\nAfter you have installed Meteor, you can easily create a new project by running the following command in \nyour terminal:\n\n```\nmeteor create myProjectName\n```\n\n## Start Meteor\n\nNow you have to start up the project you've just created by running the following commands:\n\n```\ncd myProjectName\nmeteor run\n```\n\nThat's it! You've just created your first project in Meteor!\nNow, to view your work, type *http://localhost:3000* in your browser's address bar and hit Enter.\nYes ! It's **THAT** easy!\n\n## Application folder structure\n\nThis is the basic folder structure that an application, such as the one you've just created, should be made up of:\n\n\n\n```bash\nclient\n    main.js # this file contains: /imports/startup/client\ndb # This is where our persistence layer is. Including external APIs\nimports\n    ui # contains anything User-Interface related\n    startup\n        client\n            index.js # loads everything that is needed for the client to function (ex: routes, css, anything concerning the client)\n        server\n            index.js # loads everything that is needed for the server to function\n    api # contains the rest\nserver\n    main.js # this file contains: import /imports/startup/server\n```\nAs a reminder, you could always use the github repository. For that, go [here](https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/1-clean-installation)\n\nEverything in \"/client\" and \"/server\" is automatically loaded, as it is explained [here.](https://guide.meteor.com/structure.html#load-order)\n\nIn general we will need more control over our application, and in order to gain that control\nwe will refrain from using auto-loading in our projects.\n\nThis compiles all the modules we specified into our project with the \"import\" keyword, when we type **\"meteor run\"** \ninto the command line, but does not load all of them.  \n\nBecause of this, everything in \"/imports\" must be explicitly imported so Meteor can \"gain knowledge\" about it.\nThis also gives us the ability to build modular applications.\n[Read more about this here.](https://danmartensen.svbtle.com/build-better-apps-with-es6-modules)\n\n\n## Importing from NPM\n\nFor now, we won't get into a lot of details, but the basic idea is that with Meteor you have access to the\n full NPM ecosystem, allowing you to import modules from http://www.npmjs.com.\n\n\"moment\" is a library you will use when working with dates and times in your projects.\n\nNow, open a new terminal (leave the one with server open) and in the root directory of the project we are working on, write\n\n```\nmeteor npm install --save moment\n```\n\nWe use \"--save\" here because it will save it in our packages.json, meaning that if we work in collaboration with\n other developers, when they download the project to start working on it, they will have the same package \n installed, with the specified version thus making their life much easier. \n\nTo use \"moment\" in your project, at a basic level, use this code snippet:\n\n```\n// file: (for example) /imports/startup/server/index.js\nimport moment from 'moment';\n\nconst date = moment(new Date()).format('YYYY-MM-DD')\nconsole.log(date)\n```\n\nIf added to the server side you will see the current date printed on your terminal, otherwise, if added client side you will see it on the browser's console.\n\n## Atmosphere\n\nAtmosphere is a package manager which is specific to Meteor only, just like npm is for NodeJs. \nIt helps you manage your project's dependencies easily.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.\n\nYou can learn more about it on the project's [webpage](https://atmospherejs.com).\n\nAdding a package is as simple as typing this into the console:\n```\nmeteor add accounts-base accounts-password\n\n```\n\nThat's it. You now have added an user management package in in your application. And it's ready for you to use it!\nThere are a lot of cool and useful packages out there that we'll explore during these tutorials.\n\n## Importing from Atmosphere\nYou can also use the modular approach with Meteor packages!\n\nTo import an atmosphere package we prefix it with `meteor/`\n\n```js\nimport { Accounts } from 'meteor/accounts-base'\n\n```\n\nDon't worry too much about this, we are going to explore them later in this tutorial.\n\n## Importing from local files\n\nAs you saw in the example for creating the project's folder structure, we have the ability to import from \nlocal files by using an \"absolute path\":\n```\nimport myService from '/imports/startup/server/myService';\n```\n\nYou can also use a relative path:\n```\nimport {sum} from './helpers';\n```\nIn order to see how this exactly works in an example, you can go on the github repository, [here](https://github.com/cult-of-coders/meteor-tuts-tutorial)\nPretty easy right ?\n\nWould you like to find more about importing and exporting ? You can read more here:\n- [http://exploringjs.com/es6/ch_modules.html](http://exploringjs.com/es6/ch_modules.html)\n- [https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087](https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087)\n\n\n## Need Help ?\n\nIf you get stuck and need help, you can ask other Meteor evangelists out there:\n- https://forums.meteor.com\n- Go to the #meteor channel on FreeNode Server: [https://webchat.freenode.net/](https://webchat.freenode.net/)\n- Contact Cult of Coders for consultancy, [here](https://www.cultofcoders.com/contact)\n\nMake sure you Google your questions first, to find out if somebody had the same problem as well \n(and most likely has found an answer to that problem), before asking the community!\n\n\n","date":"2019-10-10T08:52:10.648Z","updated":"2019-10-10T08:52:10.648Z","path":"chapters/1/intro.html","_id":"ciuqri0q20001ufjxcqpoqtlv","comments":1,"layout":"page","content":"<h2 id=\"Installing-the-framework\"><a href=\"#Installing-the-framework\" class=\"headerlink\" title=\"Installing the framework\"></a>Installing the framework</h2><p>To install the framework, please follow the steps from the meteor official website: <a href=\"https://www.meteor.com/install\" target=\"_blank\" rel=\"noopener\">meteor.com</a></p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>The tool that works best for us, and the one which we recommend you to use is WebStorm from Jetbrains.\nYou can download Webstorm from <a href=\"https://www.jetbrains.com/webstorm/download\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>To learn more about Webstorm and how to better use it, <a href=\"https://www.jetbrains.com/webstorm/documentation/\" target=\"_blank\" rel=\"noopener\">go here</a>.</p>\n<p>A free alternative to Webstorm would be VSCode. This is an extensible, feature-rich code editor that is\nrelatively easy to learn.<br>You can download it from <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h2 id=\"Creating-a-project\"><a href=\"#Creating-a-project\" class=\"headerlink\" title=\"Creating a project\"></a>Creating a project</h2><p>After you have installed Meteor, you can easily create a new project by running the following command in \nyour terminal:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">meteor create myProjectName</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Start-Meteor\"><a href=\"#Start-Meteor\" class=\"headerlink\" title=\"Start Meteor\"></a>Start Meteor</h2><p>Now you have to start up the project you’ve just created by running the following commands:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myProjectName</span><br><span class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></span><br></pre></td></tr></table></figure>\n<p>That’s it! You’ve just created your first project in Meteor!\nNow, to view your work, type <em><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></em> in your browser’s address bar and hit Enter.\nYes ! It’s <strong>THAT</strong> easy!</p>\n<h2 id=\"Application-folder-structure\"><a href=\"#Application-folder-structure\" class=\"headerlink\" title=\"Application folder structure\"></a>Application folder structure</h2><p>This is the basic folder structure that an application, such as the one you’ve just created, should be made up of:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client</span><br><span class=\"line\">    main.js <span class=\"comment\"># this file contains: /imports/startup/client</span></span><br><span class=\"line\">db <span class=\"comment\"># This is where our persistence layer is. Including external APIs</span></span><br><span class=\"line\">imports</span><br><span class=\"line\">    ui <span class=\"comment\"># contains anything User-Interface related</span></span><br><span class=\"line\">    startup</span><br><span class=\"line\">        client</span><br><span class=\"line\">            index.js <span class=\"comment\"># loads everything that is needed for the client to function (ex: routes, css, anything concerning the client)</span></span><br><span class=\"line\">        server</span><br><span class=\"line\">            index.js <span class=\"comment\"># loads everything that is needed for the server to function</span></span><br><span class=\"line\">    api <span class=\"comment\"># contains the rest</span></span><br><span class=\"line\">server</span><br><span class=\"line\">    main.js <span class=\"comment\"># this file contains: import /imports/startup/server</span></span><br></pre></td></tr></table></figure>\n<p>As a reminder, you could always use the github repository. For that, go <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/1-clean-installation\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>Everything in “/client” and “/server” is automatically loaded, as it is explained <a href=\"https://guide.meteor.com/structure.html#load-order\" target=\"_blank\" rel=\"noopener\">here.</a></p>\n<p>In general we will need more control over our application, and in order to gain that control\nwe will refrain from using auto-loading in our projects.</p>\n<p>This compiles all the modules we specified into our project with the “import” keyword, when we type <strong>“meteor run”</strong> \ninto the command line, but does not load all of them.  </p>\n<p>Because of this, everything in “/imports” must be explicitly imported so Meteor can “gain knowledge” about it.\nThis also gives us the ability to build modular applications.\n<a href=\"https://danmartensen.svbtle.com/build-better-apps-with-es6-modules\" target=\"_blank\" rel=\"noopener\">Read more about this here.</a></p>\n<h2 id=\"Importing-from-NPM\"><a href=\"#Importing-from-NPM\" class=\"headerlink\" title=\"Importing from NPM\"></a>Importing from NPM</h2><p>For now, we won’t get into a lot of details, but the basic idea is that with Meteor you have access to the\n full NPM ecosystem, allowing you to import modules from <a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">http://www.npmjs.com</a>.</p>\n<p>“moment” is a library you will use when working with dates and times in your projects.</p>\n<p>Now, open a new terminal (leave the one with server open) and in the root directory of the project we are working on, write</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm install --<span class=\"keyword\">save</span> <span class=\"built_in\">moment</span></span><br></pre></td></tr></table></figure>\n<p>We use “–save” here because it will save it in our packages.json, meaning that if we work in collaboration with\n other developers, when they download the project to start working on it, they will have the same package \n installed, with the specified version thus making their life much easier. </p>\n<p>To use “moment” in your project, at a basic level, use this code snippet:</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: (for example) /imports/startup/server/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moment from <span class=\"string\">'moment'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">date</span> = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).format(<span class=\"string\">'YYYY-MM-DD'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">date</span>)</span><br></pre></td></tr></table></figure>\n<p>If added to the server side you will see the current date printed on your terminal, otherwise, if added client side you will see it on the browser’s console.</p>\n<h2 id=\"Atmosphere\"><a href=\"#Atmosphere\" class=\"headerlink\" title=\"Atmosphere\"></a>Atmosphere</h2><p>Atmosphere is a package manager which is specific to Meteor only, just like npm is for NodeJs. \nIt helps you manage your project’s dependencies easily.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.</p>\n<p>You can learn more about it on the project’s <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"noopener\">webpage</a>.</p>\n<p>Adding a package is as simple as typing this into the console:\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</span><br></pre></td></tr></table></figure></p>\n<p>That’s it. You now have added an user management package in in your application. And it’s ready for you to use it!\nThere are a lot of cool and useful packages out there that we’ll explore during these tutorials.</p>\n<h2 id=\"Importing-from-Atmosphere\"><a href=\"#Importing-from-Atmosphere\" class=\"headerlink\" title=\"Importing from Atmosphere\"></a>Importing from Atmosphere</h2><p>You can also use the modular approach with Meteor packages!</p>\n<p>To import an atmosphere package we prefix it with <code>meteor/</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Accounts &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/accounts-base'</span></span><br></pre></td></tr></table></figure>\n<p>Don’t worry too much about this, we are going to explore them later in this tutorial.</p>\n<h2 id=\"Importing-from-local-files\"><a href=\"#Importing-from-local-files\" class=\"headerlink\" title=\"Importing from local files\"></a>Importing from local files</h2><p>As you saw in the example for creating the project’s folder structure, we have the ability to import from \nlocal files by using an “absolute path”:\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/startup/server/myService'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>You can also use a relative path:\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;sum&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./helpers'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>In order to see how this exactly works in an example, you can go on the github repository, <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial\" target=\"_blank\" rel=\"noopener\">here</a>\nPretty easy right ?</p>\n<p>Would you like to find more about importing and exporting ? You can read more here:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087</a></li>\n</ul>\n<h2 id=\"Need-Help\"><a href=\"#Need-Help\" class=\"headerlink\" title=\"Need Help ?\"></a>Need Help ?</h2><p>If you get stuck and need help, you can ask other Meteor evangelists out there:</p>\n<ul>\n<li><a href=\"https://forums.meteor.com\" target=\"_blank\" rel=\"noopener\">https://forums.meteor.com</a></li>\n<li>Go to the #meteor channel on FreeNode Server: <a href=\"https://webchat.freenode.net/\" target=\"_blank\" rel=\"noopener\">https://webchat.freenode.net/</a></li>\n<li>Contact Cult of Coders for consultancy, <a href=\"https://www.cultofcoders.com/contact\" target=\"_blank\" rel=\"noopener\">here</a></li>\n</ul>\n<p>Make sure you Google your questions first, to find out if somebody had the same problem as well \n(and most likely has found an answer to that problem), before asking the community!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Installing-the-framework\"><a href=\"#Installing-the-framework\" class=\"headerlink\" title=\"Installing the framework\"></a>Installing the framework</h2><p>To install the framework, please follow the steps from the meteor official website: <a href=\"https://www.meteor.com/install\" target=\"_blank\" rel=\"noopener\">meteor.com</a></p>\n<h2 id=\"Tools\"><a href=\"#Tools\" class=\"headerlink\" title=\"Tools\"></a>Tools</h2><p>The tool that works best for us, and the one which we recommend you to use is WebStorm from Jetbrains.\nYou can download Webstorm from <a href=\"https://www.jetbrains.com/webstorm/download\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>To learn more about Webstorm and how to better use it, <a href=\"https://www.jetbrains.com/webstorm/documentation/\" target=\"_blank\" rel=\"noopener\">go here</a>.</p>\n<p>A free alternative to Webstorm would be VSCode. This is an extensible, feature-rich code editor that is\nrelatively easy to learn.<br>You can download it from <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h2 id=\"Creating-a-project\"><a href=\"#Creating-a-project\" class=\"headerlink\" title=\"Creating a project\"></a>Creating a project</h2><p>After you have installed Meteor, you can easily create a new project by running the following command in \nyour terminal:</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">meteor create myProjectName</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Start-Meteor\"><a href=\"#Start-Meteor\" class=\"headerlink\" title=\"Start Meteor\"></a>Start Meteor</h2><p>Now you have to start up the project you’ve just created by running the following commands:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myProjectName</span><br><span class=\"line\">meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></span><br></pre></td></tr></table></figure>\n<p>That’s it! You’ve just created your first project in Meteor!\nNow, to view your work, type <em><a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></em> in your browser’s address bar and hit Enter.\nYes ! It’s <strong>THAT</strong> easy!</p>\n<h2 id=\"Application-folder-structure\"><a href=\"#Application-folder-structure\" class=\"headerlink\" title=\"Application folder structure\"></a>Application folder structure</h2><p>This is the basic folder structure that an application, such as the one you’ve just created, should be made up of:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client</span><br><span class=\"line\">    main.js <span class=\"comment\"># this file contains: /imports/startup/client</span></span><br><span class=\"line\">db <span class=\"comment\"># This is where our persistence layer is. Including external APIs</span></span><br><span class=\"line\">imports</span><br><span class=\"line\">    ui <span class=\"comment\"># contains anything User-Interface related</span></span><br><span class=\"line\">    startup</span><br><span class=\"line\">        client</span><br><span class=\"line\">            index.js <span class=\"comment\"># loads everything that is needed for the client to function (ex: routes, css, anything concerning the client)</span></span><br><span class=\"line\">        server</span><br><span class=\"line\">            index.js <span class=\"comment\"># loads everything that is needed for the server to function</span></span><br><span class=\"line\">    api <span class=\"comment\"># contains the rest</span></span><br><span class=\"line\">server</span><br><span class=\"line\">    main.js <span class=\"comment\"># this file contains: import /imports/startup/server</span></span><br></pre></td></tr></table></figure>\n<p>As a reminder, you could always use the github repository. For that, go <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/1-clean-installation\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>Everything in “/client” and “/server” is automatically loaded, as it is explained <a href=\"https://guide.meteor.com/structure.html#load-order\" target=\"_blank\" rel=\"noopener\">here.</a></p>\n<p>In general we will need more control over our application, and in order to gain that control\nwe will refrain from using auto-loading in our projects.</p>\n<p>This compiles all the modules we specified into our project with the “import” keyword, when we type <strong>“meteor run”</strong> \ninto the command line, but does not load all of them.  </p>\n<p>Because of this, everything in “/imports” must be explicitly imported so Meteor can “gain knowledge” about it.\nThis also gives us the ability to build modular applications.\n<a href=\"https://danmartensen.svbtle.com/build-better-apps-with-es6-modules\" target=\"_blank\" rel=\"noopener\">Read more about this here.</a></p>\n<h2 id=\"Importing-from-NPM\"><a href=\"#Importing-from-NPM\" class=\"headerlink\" title=\"Importing from NPM\"></a>Importing from NPM</h2><p>For now, we won’t get into a lot of details, but the basic idea is that with Meteor you have access to the\n full NPM ecosystem, allowing you to import modules from <a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">http://www.npmjs.com</a>.</p>\n<p>“moment” is a library you will use when working with dates and times in your projects.</p>\n<p>Now, open a new terminal (leave the one with server open) and in the root directory of the project we are working on, write</p>\n<figure class=\"highlight gauss\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm install --<span class=\"keyword\">save</span> <span class=\"built_in\">moment</span></span><br></pre></td></tr></table></figure>\n<p>We use “–save” here because it will save it in our packages.json, meaning that if we work in collaboration with\n other developers, when they download the project to start working on it, they will have the same package \n installed, with the specified version thus making their life much easier. </p>\n<p>To use “moment” in your project, at a basic level, use this code snippet:</p>\n<figure class=\"highlight qml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: (for example) /imports/startup/server/index.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> moment from <span class=\"string\">'moment'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"built_in\">date</span> = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).format(<span class=\"string\">'YYYY-MM-DD'</span>)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">date</span>)</span><br></pre></td></tr></table></figure>\n<p>If added to the server side you will see the current date printed on your terminal, otherwise, if added client side you will see it on the browser’s console.</p>\n<h2 id=\"Atmosphere\"><a href=\"#Atmosphere\" class=\"headerlink\" title=\"Atmosphere\"></a>Atmosphere</h2><p>Atmosphere is a package manager which is specific to Meteor only, just like npm is for NodeJs. \nIt helps you manage your project’s dependencies easily.\nYou can find great resources to help you with Collections, Server-Side Routes, Mailing, etc.</p>\n<p>You can learn more about it on the project’s <a href=\"https://atmospherejs.com\" target=\"_blank\" rel=\"noopener\">webpage</a>.</p>\n<p>Adding a package is as simple as typing this into the console:\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</span><br></pre></td></tr></table></figure></p>\n<p>That’s it. You now have added an user management package in in your application. And it’s ready for you to use it!\nThere are a lot of cool and useful packages out there that we’ll explore during these tutorials.</p>\n<h2 id=\"Importing-from-Atmosphere\"><a href=\"#Importing-from-Atmosphere\" class=\"headerlink\" title=\"Importing from Atmosphere\"></a>Importing from Atmosphere</h2><p>You can also use the modular approach with Meteor packages!</p>\n<p>To import an atmosphere package we prefix it with <code>meteor/</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; Accounts &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/accounts-base'</span></span><br></pre></td></tr></table></figure>\n<p>Don’t worry too much about this, we are going to explore them later in this tutorial.</p>\n<h2 id=\"Importing-from-local-files\"><a href=\"#Importing-from-local-files\" class=\"headerlink\" title=\"Importing from local files\"></a>Importing from local files</h2><p>As you saw in the example for creating the project’s folder structure, we have the ability to import from \nlocal files by using an “absolute path”:\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/startup/server/myService'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>You can also use a relative path:\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;sum&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./helpers'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>In order to see how this exactly works in an example, you can go on the github repository, <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial\" target=\"_blank\" rel=\"noopener\">here</a>\nPretty easy right ?</p>\n<p>Would you like to find more about importing and exporting ? You can read more here:</p>\n<ul>\n<li><a href=\"http://exploringjs.com/es6/ch_modules.html\" target=\"_blank\" rel=\"noopener\">http://exploringjs.com/es6/ch_modules.html</a></li>\n<li><a href=\"https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/25494365/es6-module-export-options/34842087#34842087</a></li>\n</ul>\n<h2 id=\"Need-Help\"><a href=\"#Need-Help\" class=\"headerlink\" title=\"Need Help ?\"></a>Need Help ?</h2><p>If you get stuck and need help, you can ask other Meteor evangelists out there:</p>\n<ul>\n<li><a href=\"https://forums.meteor.com\" target=\"_blank\" rel=\"noopener\">https://forums.meteor.com</a></li>\n<li>Go to the #meteor channel on FreeNode Server: <a href=\"https://webchat.freenode.net/\" target=\"_blank\" rel=\"noopener\">https://webchat.freenode.net/</a></li>\n<li>Contact Cult of Coders for consultancy, <a href=\"https://www.cultofcoders.com/contact\" target=\"_blank\" rel=\"noopener\">here</a></li>\n</ul>\n<p>Make sure you Google your questions first, to find out if somebody had the same problem as well \n(and most likely has found an answer to that problem), before asking the community!</p>\n"},{"title":"Collections","description":"How we store our data in Meteor.","disqusPage":"Chapter 1: Collections","_content":"\n## Let's talk data!\n\nMeteor uses MongoDB as its default database. You can use any database you want, because you have access to\n*http://www.npmjs.com*, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a specific database, like MongoDB, MySQL, SqLite and so on). \n\n## How to create a collection?\n\n```js\n// imports/db/posts/collection.js\nimport { Mongo } from 'meteor/mongo';\n\nconst Posts = new Mongo.Collection('posts');\n\nexport default Posts;\n```\n\n## Inserting data\n\nWe already learned how to create and use a method so we are going to insert in the database a Post\n```js\n// file: /imports/api/posts/methods.js\n// do not forget to import it in the '/imports/startup/server/index.js';\nimport {Meteor} from 'meteor/meteor'\nimport Posts from '/imports/db/posts'; // or, as it's on github, for simplicity, import {Posts} from '/db';\n\nMeteor.methods({\n    'post.create'(post) {\n        Posts.insert(post);\n    }\n});\n\n```\nTo test this, you can go in the browser's console and try something like this:\n```js\nconst data = {title: 'test', description: 'some description'};\nMeteor.call('post.create', data); // this will call the 'post.create' method and will add a post in the database\n```\nWe can add in the database whatever we want, from strings to array of objects. The sky is the limit!\n\n## Mongo tools - check what's in the database\nYou could go in a new terminal, go in the root directory of your project and then `meteor mongo` or use an application like [robomongo](https://robomongo.org/) so you can visualize the data from your database\n\nIf we choose to use the terminal and run the command written above, we could check all the posts from the database by typing: `db.posts.find({})`, this will search for all the posts from the database and retrieve an array of objects of there are any.\n\n## Find all posts\n```js\n// file: /imports/api/posts/methods.js\n    'post.list' () {\n        return Posts.find().fetch();\n    }\n```\n\nTo be able to query MongoDB efficiently, you need to know some things about selectors (meaning what are you going to select from your collection).\nRead [this](https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators) to get acquainted with them.\n\nThe second argument for `find()` is useful for sorting, limiting the amount of received documents, to get only specific fields and many others. Read [this](https://docs.meteor.com/api/collections.html#Mongo-Collection-find) for more details\n\n## Updating a post\n```js\n    'post.edit' (_id, post) {\n        Posts.update(_id, {\n            $set: {\n                title: post.title,\n                description: post.description\n            }\n        });\n    }\n```\n\nThe first argument represents the data that you \"want to update\", and the second tells the system \"how you update it\".\nThe idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go [here](https://docs.mongodb.com/manual/reference/operator/update/).\n## Remove a post with a specific _id\n```js\n    'post.remove' (_id){\n        Posts.remove(_id);\n    }\n```\n\n## Fetch a post with a specific _id\n```js\n    'post.get' (_id) {\n        return Posts.findOne(_id);\n    }\n```\n\n## Work more to learn more\n\nNow let's practice what we've learned in this section with a few simple exercises:\n\nWe'll consider a post  in the following format:\n```js\n\nconst post = {\ntitle: 'something', // string\ndescription: 'meteor-tuts', // string\nisApproved: true, // boolean\nviews: 10,\nlinkedPostIds: ['aaa', 'bbb', 'ccc', 'ddd'],\ncreatedAt: new Date // Date\n}\n```\n#### 1. Posts with a specific title\nMake a method which returns all the posts with title: 'test'\n```js\nMeteor.call('post.get_by_title', callback)\n```\n\n#### 2. Posts with views\nMake a method which returns all the posts that have between 100 and 200 views and that returns only the title (as fields)\n```js\nMeteor.call('post.get_by_views', {title: 'test', views: 300}, callback)\n```\n\n#### 3. Removing posts\nMake a method that removes all the posts with title: 'test' or description: 'test'\n```js\nMeteor.call('post.remove_by_test', callback)\n```\n\n#### 4. Updating posts\nMake a method that increments the number of views by 1 for each post that is approved\n```js\nMeteor.call('post.increment_views', callback)\n```\n\n#### 5. Remove old posts\nMake a method which removes all the posts from last month (from the first day of month, to the last day of that month)\n```js\nMeteor.call('post.remove_from_last_month', callback)\n```\n\n\n\n","source":"chapters/1/collections.md","raw":"---\ntitle: Collections\ndescription: How we store our data in Meteor.\ndisqusPage: 'Chapter 1: Collections'\n---\n\n## Let's talk data!\n\nMeteor uses MongoDB as its default database. You can use any database you want, because you have access to\n*http://www.npmjs.com*, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a specific database, like MongoDB, MySQL, SqLite and so on). \n\n## How to create a collection?\n\n```js\n// imports/db/posts/collection.js\nimport { Mongo } from 'meteor/mongo';\n\nconst Posts = new Mongo.Collection('posts');\n\nexport default Posts;\n```\n\n## Inserting data\n\nWe already learned how to create and use a method so we are going to insert in the database a Post\n```js\n// file: /imports/api/posts/methods.js\n// do not forget to import it in the '/imports/startup/server/index.js';\nimport {Meteor} from 'meteor/meteor'\nimport Posts from '/imports/db/posts'; // or, as it's on github, for simplicity, import {Posts} from '/db';\n\nMeteor.methods({\n    'post.create'(post) {\n        Posts.insert(post);\n    }\n});\n\n```\nTo test this, you can go in the browser's console and try something like this:\n```js\nconst data = {title: 'test', description: 'some description'};\nMeteor.call('post.create', data); // this will call the 'post.create' method and will add a post in the database\n```\nWe can add in the database whatever we want, from strings to array of objects. The sky is the limit!\n\n## Mongo tools - check what's in the database\nYou could go in a new terminal, go in the root directory of your project and then `meteor mongo` or use an application like [robomongo](https://robomongo.org/) so you can visualize the data from your database\n\nIf we choose to use the terminal and run the command written above, we could check all the posts from the database by typing: `db.posts.find({})`, this will search for all the posts from the database and retrieve an array of objects of there are any.\n\n## Find all posts\n```js\n// file: /imports/api/posts/methods.js\n    'post.list' () {\n        return Posts.find().fetch();\n    }\n```\n\nTo be able to query MongoDB efficiently, you need to know some things about selectors (meaning what are you going to select from your collection).\nRead [this](https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators) to get acquainted with them.\n\nThe second argument for `find()` is useful for sorting, limiting the amount of received documents, to get only specific fields and many others. Read [this](https://docs.meteor.com/api/collections.html#Mongo-Collection-find) for more details\n\n## Updating a post\n```js\n    'post.edit' (_id, post) {\n        Posts.update(_id, {\n            $set: {\n                title: post.title,\n                description: post.description\n            }\n        });\n    }\n```\n\nThe first argument represents the data that you \"want to update\", and the second tells the system \"how you update it\".\nThe idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go [here](https://docs.mongodb.com/manual/reference/operator/update/).\n## Remove a post with a specific _id\n```js\n    'post.remove' (_id){\n        Posts.remove(_id);\n    }\n```\n\n## Fetch a post with a specific _id\n```js\n    'post.get' (_id) {\n        return Posts.findOne(_id);\n    }\n```\n\n## Work more to learn more\n\nNow let's practice what we've learned in this section with a few simple exercises:\n\nWe'll consider a post  in the following format:\n```js\n\nconst post = {\ntitle: 'something', // string\ndescription: 'meteor-tuts', // string\nisApproved: true, // boolean\nviews: 10,\nlinkedPostIds: ['aaa', 'bbb', 'ccc', 'ddd'],\ncreatedAt: new Date // Date\n}\n```\n#### 1. Posts with a specific title\nMake a method which returns all the posts with title: 'test'\n```js\nMeteor.call('post.get_by_title', callback)\n```\n\n#### 2. Posts with views\nMake a method which returns all the posts that have between 100 and 200 views and that returns only the title (as fields)\n```js\nMeteor.call('post.get_by_views', {title: 'test', views: 300}, callback)\n```\n\n#### 3. Removing posts\nMake a method that removes all the posts with title: 'test' or description: 'test'\n```js\nMeteor.call('post.remove_by_test', callback)\n```\n\n#### 4. Updating posts\nMake a method that increments the number of views by 1 for each post that is approved\n```js\nMeteor.call('post.increment_views', callback)\n```\n\n#### 5. Remove old posts\nMake a method which removes all the posts from last month (from the first day of month, to the last day of that month)\n```js\nMeteor.call('post.remove_from_last_month', callback)\n```\n\n\n\n","date":"2019-10-04T12:00:07.757Z","updated":"2019-10-04T12:00:07.757Z","path":"chapters/1/collections.html","_id":"ciure80fa0001qtjxsc1d0ona","comments":1,"layout":"page","content":"<h2 id=\"Let’s-talk-data\"><a href=\"#Let’s-talk-data\" class=\"headerlink\" title=\"Let’s talk data!\"></a>Let’s talk data!</h2><p>Meteor uses MongoDB as its default database. You can use any database you want, because you have access to\n<em><a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">http://www.npmjs.com</a></em>, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a specific database, like MongoDB, MySQL, SqLite and so on). </p>\n<h2 id=\"How-to-create-a-collection\"><a href=\"#How-to-create-a-collection\" class=\"headerlink\" title=\"How to create a collection?\"></a>How to create a collection?</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imports/db/posts/collection.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</div></pre></td></tr></table></figure>\n<h2 id=\"Inserting-data\"><a href=\"#Inserting-data\" class=\"headerlink\" title=\"Inserting data\"></a>Inserting data</h2><p>We already learned how to create and use a method so we are going to insert in the database a Post\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/methods.js</span></div><div class=\"line\"><span class=\"comment\">// do not forget to import it in the '/imports/startup/server/index.js';</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/posts'</span>; <span class=\"comment\">// or, as it's on github, for simplicity, import &#123;Posts&#125; from '/db';</span></div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'post.create'</span>(post) &#123;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>To test this, you can go in the browser’s console and try something like this:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">title</span>: <span class=\"string\">'test'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'some description'</span>&#125;;</div><div class=\"line\">Meteor.call(<span class=\"string\">'post.create'</span>, data); <span class=\"comment\">// this will call the 'post.create' method and will add a post in the database</span></div></pre></td></tr></table></figure></p>\n<p>We can add in the database whatever we want, from strings to array of objects. The sky is the limit!</p>\n<h2 id=\"Mongo-tools-check-what’s-in-the-database\"><a href=\"#Mongo-tools-check-what’s-in-the-database\" class=\"headerlink\" title=\"Mongo tools - check what’s in the database\"></a>Mongo tools - check what’s in the database</h2><p>You could go in a new terminal, go in the root directory of your project and then <code>meteor mongo</code> or use an application like <a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">robomongo</a> so you can visualize the data from your database</p>\n<p>If we choose to use the terminal and run the command written above, we could check all the posts from the database by typing: <code>db.posts.find({})</code>, this will search for all the posts from the database and retrieve an array of objects of there are any.</p>\n<h2 id=\"Find-all-posts\"><a href=\"#Find-all-posts\" class=\"headerlink\" title=\"Find all posts\"></a>Find all posts</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/methods.js</span></div><div class=\"line\">    <span class=\"string\">'post.list'</span> () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>To be able to query MongoDB efficiently, you need to know some things about selectors (meaning what are you going to select from your collection).\nRead <a href=\"https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\" target=\"_blank\" rel=\"noopener\">this</a> to get acquainted with them.</p>\n<p>The second argument for <code>find()</code> is useful for sorting, limiting the amount of received documents, to get only specific fields and many others. Read <a href=\"https://docs.meteor.com/api/collections.html#Mongo-Collection-find\" target=\"_blank\" rel=\"noopener\">this</a> for more details</p>\n<h2 id=\"Updating-a-post\"><a href=\"#Updating-a-post\" class=\"headerlink\" title=\"Updating a post\"></a>Updating a post</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'post.edit'</span> (_id, post) &#123;</div><div class=\"line\">    Posts.update(_id, &#123;</div><div class=\"line\">        $set: &#123;</div><div class=\"line\">            title: post.title,</div><div class=\"line\">            description: post.description</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The first argument represents the data that you “want to update”, and the second tells the system “how you update it”.\nThe idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go <a href=\"https://docs.mongodb.com/manual/reference/operator/update/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h2 id=\"Remove-a-post-with-a-specific-id\"><a href=\"#Remove-a-post-with-a-specific-id\" class=\"headerlink\" title=\"Remove a post with a specific _id\"></a>Remove a post with a specific _id</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'post.remove'</span> (_id)&#123;</div><div class=\"line\">    Posts.remove(_id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Fetch-a-post-with-a-specific-id\"><a href=\"#Fetch-a-post-with-a-specific-id\" class=\"headerlink\" title=\"Fetch a post with a specific _id\"></a>Fetch a post with a specific _id</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'post.get'</span> (_id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.findOne(_id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Work-more-to-learn-more\"><a href=\"#Work-more-to-learn-more\" class=\"headerlink\" title=\"Work more to learn more\"></a>Work more to learn more</h2><p>Now let’s practice what we’ve learned in this section with a few simple exercises:</p>\n<p>We’ll consider a post  in the following format:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> post = &#123;</div><div class=\"line\">title: <span class=\"string\">'something'</span>, <span class=\"comment\">// string</span></div><div class=\"line\">description: <span class=\"string\">'meteor-tuts'</span>, <span class=\"comment\">// string</span></div><div class=\"line\">isApproved: <span class=\"literal\">true</span>, <span class=\"comment\">// boolean</span></div><div class=\"line\">views: <span class=\"number\">10</span>,</div><div class=\"line\">linkedPostIds: [<span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>, <span class=\"string\">'ccc'</span>, <span class=\"string\">'ddd'</span>],</div><div class=\"line\">createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span> <span class=\"comment\">// Date</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-Posts-with-a-specific-title\"><a href=\"#1-Posts-with-a-specific-title\" class=\"headerlink\" title=\"1. Posts with a specific title\"></a>1. Posts with a specific title</h4><p>Make a method which returns all the posts with title: ‘test’\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.get_by_title'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Posts-with-views\"><a href=\"#2-Posts-with-views\" class=\"headerlink\" title=\"2. Posts with views\"></a>2. Posts with views</h4><p>Make a method which returns all the posts that have between 100 and 200 views and that returns only the title (as fields)\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.get_by_views'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'test'</span>, <span class=\"attr\">views</span>: <span class=\"number\">300</span>&#125;, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-Removing-posts\"><a href=\"#3-Removing-posts\" class=\"headerlink\" title=\"3. Removing posts\"></a>3. Removing posts</h4><p>Make a method that removes all the posts with title: ‘test’ or description: ‘test’\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.remove_by_test'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-Updating-posts\"><a href=\"#4-Updating-posts\" class=\"headerlink\" title=\"4. Updating posts\"></a>4. Updating posts</h4><p>Make a method that increments the number of views by 1 for each post that is approved\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.increment_views'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"5-Remove-old-posts\"><a href=\"#5-Remove-old-posts\" class=\"headerlink\" title=\"5. Remove old posts\"></a>5. Remove old posts</h4><p>Make a method which removes all the posts from last month (from the first day of month, to the last day of that month)\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.remove_from_last_month'</span>, callback)</div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Let’s-talk-data\"><a href=\"#Let’s-talk-data\" class=\"headerlink\" title=\"Let’s talk data!\"></a>Let’s talk data!</h2><p>Meteor uses MongoDB as its default database. You can use any database you want, because you have access to\n<em><a href=\"http://www.npmjs.com\" target=\"_blank\" rel=\"noopener\">http://www.npmjs.com</a></em>, therefore you have access to almost all the existing database drivers out there \n(a database driver is a program which implements a protocol for connecting to a specific database, like MongoDB, MySQL, SqLite and so on). </p>\n<h2 id=\"How-to-create-a-collection\"><a href=\"#How-to-create-a-collection\" class=\"headerlink\" title=\"How to create a collection?\"></a>How to create a collection?</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// imports/db/posts/collection.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Mongo &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</div></pre></td></tr></table></figure>\n<h2 id=\"Inserting-data\"><a href=\"#Inserting-data\" class=\"headerlink\" title=\"Inserting data\"></a>Inserting data</h2><p>We already learned how to create and use a method so we are going to insert in the database a Post\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/methods.js</span></div><div class=\"line\"><span class=\"comment\">// do not forget to import it in the '/imports/startup/server/index.js';</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span></div><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/posts'</span>; <span class=\"comment\">// or, as it's on github, for simplicity, import &#123;Posts&#125; from '/db';</span></div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'post.create'</span>(post) &#123;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure></p>\n<p>To test this, you can go in the browser’s console and try something like this:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">title</span>: <span class=\"string\">'test'</span>, <span class=\"attr\">description</span>: <span class=\"string\">'some description'</span>&#125;;</div><div class=\"line\">Meteor.call(<span class=\"string\">'post.create'</span>, data); <span class=\"comment\">// this will call the 'post.create' method and will add a post in the database</span></div></pre></td></tr></table></figure></p>\n<p>We can add in the database whatever we want, from strings to array of objects. The sky is the limit!</p>\n<h2 id=\"Mongo-tools-check-what’s-in-the-database\"><a href=\"#Mongo-tools-check-what’s-in-the-database\" class=\"headerlink\" title=\"Mongo tools - check what’s in the database\"></a>Mongo tools - check what’s in the database</h2><p>You could go in a new terminal, go in the root directory of your project and then <code>meteor mongo</code> or use an application like <a href=\"https://robomongo.org/\" target=\"_blank\" rel=\"noopener\">robomongo</a> so you can visualize the data from your database</p>\n<p>If we choose to use the terminal and run the command written above, we could check all the posts from the database by typing: <code>db.posts.find({})</code>, this will search for all the posts from the database and retrieve an array of objects of there are any.</p>\n<h2 id=\"Find-all-posts\"><a href=\"#Find-all-posts\" class=\"headerlink\" title=\"Find all posts\"></a>Find all posts</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/methods.js</span></div><div class=\"line\">    <span class=\"string\">'post.list'</span> () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure>\n<p>To be able to query MongoDB efficiently, you need to know some things about selectors (meaning what are you going to select from your collection).\nRead <a href=\"https://docs.mongodb.com/manual/reference/operator/query/#query-and-projection-operators\" target=\"_blank\" rel=\"noopener\">this</a> to get acquainted with them.</p>\n<p>The second argument for <code>find()</code> is useful for sorting, limiting the amount of received documents, to get only specific fields and many others. Read <a href=\"https://docs.meteor.com/api/collections.html#Mongo-Collection-find\" target=\"_blank\" rel=\"noopener\">this</a> for more details</p>\n<h2 id=\"Updating-a-post\"><a href=\"#Updating-a-post\" class=\"headerlink\" title=\"Updating a post\"></a>Updating a post</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'post.edit'</span> (_id, post) &#123;</div><div class=\"line\">    Posts.update(_id, &#123;</div><div class=\"line\">        $set: &#123;</div><div class=\"line\">            title: post.title,</div><div class=\"line\">            description: post.description</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>The first argument represents the data that you “want to update”, and the second tells the system “how you update it”.\nThe idea is you can do a lot of things, and the options are endless.\nSo if you want to read more about updating in MongoDB, go <a href=\"https://docs.mongodb.com/manual/reference/operator/update/\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<h2 id=\"Remove-a-post-with-a-specific-id\"><a href=\"#Remove-a-post-with-a-specific-id\" class=\"headerlink\" title=\"Remove a post with a specific _id\"></a>Remove a post with a specific _id</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'post.remove'</span> (_id)&#123;</div><div class=\"line\">    Posts.remove(_id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Fetch-a-post-with-a-specific-id\"><a href=\"#Fetch-a-post-with-a-specific-id\" class=\"headerlink\" title=\"Fetch a post with a specific _id\"></a>Fetch a post with a specific _id</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">'post.get'</span> (_id) &#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.findOne(_id);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Work-more-to-learn-more\"><a href=\"#Work-more-to-learn-more\" class=\"headerlink\" title=\"Work more to learn more\"></a>Work more to learn more</h2><p>Now let’s practice what we’ve learned in this section with a few simple exercises:</p>\n<p>We’ll consider a post  in the following format:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> post = &#123;</div><div class=\"line\">title: <span class=\"string\">'something'</span>, <span class=\"comment\">// string</span></div><div class=\"line\">description: <span class=\"string\">'meteor-tuts'</span>, <span class=\"comment\">// string</span></div><div class=\"line\">isApproved: <span class=\"literal\">true</span>, <span class=\"comment\">// boolean</span></div><div class=\"line\">views: <span class=\"number\">10</span>,</div><div class=\"line\">linkedPostIds: [<span class=\"string\">'aaa'</span>, <span class=\"string\">'bbb'</span>, <span class=\"string\">'ccc'</span>, <span class=\"string\">'ddd'</span>],</div><div class=\"line\">createdAt: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span> <span class=\"comment\">// Date</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h4 id=\"1-Posts-with-a-specific-title\"><a href=\"#1-Posts-with-a-specific-title\" class=\"headerlink\" title=\"1. Posts with a specific title\"></a>1. Posts with a specific title</h4><p>Make a method which returns all the posts with title: ‘test’\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.get_by_title'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"2-Posts-with-views\"><a href=\"#2-Posts-with-views\" class=\"headerlink\" title=\"2. Posts with views\"></a>2. Posts with views</h4><p>Make a method which returns all the posts that have between 100 and 200 views and that returns only the title (as fields)\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.get_by_views'</span>, &#123;<span class=\"attr\">title</span>: <span class=\"string\">'test'</span>, <span class=\"attr\">views</span>: <span class=\"number\">300</span>&#125;, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"3-Removing-posts\"><a href=\"#3-Removing-posts\" class=\"headerlink\" title=\"3. Removing posts\"></a>3. Removing posts</h4><p>Make a method that removes all the posts with title: ‘test’ or description: ‘test’\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.remove_by_test'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"4-Updating-posts\"><a href=\"#4-Updating-posts\" class=\"headerlink\" title=\"4. Updating posts\"></a>4. Updating posts</h4><p>Make a method that increments the number of views by 1 for each post that is approved\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.increment_views'</span>, callback)</div></pre></td></tr></table></figure></p>\n<h4 id=\"5-Remove-old-posts\"><a href=\"#5-Remove-old-posts\" class=\"headerlink\" title=\"5. Remove old posts\"></a>5. Remove old posts</h4><p>Make a method which removes all the posts from last month (from the first day of month, to the last day of that month)\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'post.remove_from_last_month'</span>, callback)</div></pre></td></tr></table></figure></p>\n"},{"title":"Methods","description":"The RPC of Meteor.","disqusPage":"Chapter 1: Methods","_content":"\n## RPC's - a way to express yourself\n\nWell, you are probably already asking yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. \n\nFirst of all, RPC stands for \"Remote Procedure Call\", which basically means that you invoke \"something\" with some arguments ( only if you want to use arguments, of course).\nand you expect a response, just like you would do when in a conversation.\n\nIn Meteor, the usual and most recommended way of doing this, is by communicating through a websocket with the server.\n\nSo what actions we can do with RPC's ?\n- Fetching data\n- Inserting Data\n- Updating/Deleting Data\n- Making API calls\n- Anything you can possibly think of\n\n## Let's create a method(or RPC)\n\n```\n// file /imports/api/methods.js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n    'find.random_number' (min, max) {\n        if (!min) min = 0;\n        if (!max) max = 100;\n        const generatedNumber = Math.random() * (max - min) + min;\n        return Math.floor(generatedNumber);\n    },\n})\n\n```\n\n# Important\nDo not forget to  `` import '/imports/api/methods.js' `` in the server's startup file: ` /imports/startup/server/index.js ` otherwise meteor won't know of the existence of this file\n\n## Now...how to use it ?\n\nMethods can be called from the server-side or from the client-side. Let's try it in the browser's console:\n\n```js\nMeteor.call('find.random_number', 25, 50, (err, result ) => {\n   console.log(err); // in case an exception is thrown, then this will contain information about the error\n   console.log(result); // this will contain a random number between 25 and 50\n})\n```\n\nTo fully understand the reason why we added 2 arguments `err` and `result`, go ahead and read the explanation [here](http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/)\n\n## Errors in methods\n\nLet's cause an error and see what happens:\nType this code in the */imports/api/methods.js* file:3\n```js\n// file /imports/api/methods.js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n   'method.checkString'(myString) {\n           if (myString === 'exception') {\n               throw new Meteor.Error(500, 'An error has occurred', 'You are not allowed to enter this string');\n           }\n\n           return true;\n       }\n       // Arguments for throw new Meteor.Error:\n           // The first argument (error): is something very general, can be a number like 500, 404,\n           // The second argument (reason): is a description of the error\n           // The third argument (details): is for providing more details about the error.\n})\n```\n\nNow, make a method call in your browser's console to `method.checkString` and catch the exception:\n\n```js\nMeteor.call('method.checkString', 'exception', (err, result) => {\n    console.log(err);\n})\n```","source":"chapters/1/methods.md","raw":"---\ntitle: Methods\ndescription: The RPC of Meteor.\ndisqusPage: 'Chapter 1: Methods'\n---\n\n## RPC's - a way to express yourself\n\nWell, you are probably already asking yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. \n\nFirst of all, RPC stands for \"Remote Procedure Call\", which basically means that you invoke \"something\" with some arguments ( only if you want to use arguments, of course).\nand you expect a response, just like you would do when in a conversation.\n\nIn Meteor, the usual and most recommended way of doing this, is by communicating through a websocket with the server.\n\nSo what actions we can do with RPC's ?\n- Fetching data\n- Inserting Data\n- Updating/Deleting Data\n- Making API calls\n- Anything you can possibly think of\n\n## Let's create a method(or RPC)\n\n```\n// file /imports/api/methods.js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n    'find.random_number' (min, max) {\n        if (!min) min = 0;\n        if (!max) max = 100;\n        const generatedNumber = Math.random() * (max - min) + min;\n        return Math.floor(generatedNumber);\n    },\n})\n\n```\n\n# Important\nDo not forget to  `` import '/imports/api/methods.js' `` in the server's startup file: ` /imports/startup/server/index.js ` otherwise meteor won't know of the existence of this file\n\n## Now...how to use it ?\n\nMethods can be called from the server-side or from the client-side. Let's try it in the browser's console:\n\n```js\nMeteor.call('find.random_number', 25, 50, (err, result ) => {\n   console.log(err); // in case an exception is thrown, then this will contain information about the error\n   console.log(result); // this will contain a random number between 25 and 50\n})\n```\n\nTo fully understand the reason why we added 2 arguments `err` and `result`, go ahead and read the explanation [here](http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/)\n\n## Errors in methods\n\nLet's cause an error and see what happens:\nType this code in the */imports/api/methods.js* file:3\n```js\n// file /imports/api/methods.js\nimport { Meteor } from 'meteor/meteor';\n\nMeteor.methods({\n   'method.checkString'(myString) {\n           if (myString === 'exception') {\n               throw new Meteor.Error(500, 'An error has occurred', 'You are not allowed to enter this string');\n           }\n\n           return true;\n       }\n       // Arguments for throw new Meteor.Error:\n           // The first argument (error): is something very general, can be a number like 500, 404,\n           // The second argument (reason): is a description of the error\n           // The third argument (details): is for providing more details about the error.\n})\n```\n\nNow, make a method call in your browser's console to `method.checkString` and catch the exception:\n\n```js\nMeteor.call('method.checkString', 'exception', (err, result) => {\n    console.log(err);\n})\n```","date":"2019-10-04T12:00:07.759Z","updated":"2019-10-04T12:00:07.759Z","path":"chapters/1/methods.html","_id":"ciurfdnnz0002qtjx635uz520","comments":1,"layout":"page","content":"<h2 id=\"RPC’s-a-way-to-express-yourself\"><a href=\"#RPC’s-a-way-to-express-yourself\" class=\"headerlink\" title=\"RPC’s - a way to express yourself\"></a>RPC’s - a way to express yourself</h2><p>Well, you are probably already asking yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. </p>\n<p>First of all, RPC stands for “Remote Procedure Call”, which basically means that you invoke “something” with some arguments ( only if you want to use arguments, of course).\nand you expect a response, just like you would do when in a conversation.</p>\n<p>In Meteor, the usual and most recommended way of doing this, is by communicating through a websocket with the server.</p>\n<p>So what actions we can do with RPC’s ?</p>\n<ul>\n<li>Fetching data</li>\n<li>Inserting Data</li>\n<li>Updating/Deleting Data</li>\n<li>Making API calls</li>\n<li>Anything you can possibly think of</li>\n</ul>\n<h2 id=\"Let’s-create-a-method-or-RPC\"><a href=\"#Let’s-create-a-method-or-RPC\" class=\"headerlink\" title=\"Let’s create a method(or RPC)\"></a>Let’s create a method(or RPC)</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file /imports/api/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; from <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'find.random_number'</span> (<span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">min</span>) <span class=\"built_in\">min</span> = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">max</span>) <span class=\"built_in\">max</span> = <span class=\"number\">100</span>;</div><div class=\"line\">        <span class=\"keyword\">const</span> generatedNumber = Math.<span class=\"built_in\">random</span>() * (<span class=\"built_in\">max</span> - <span class=\"built_in\">min</span>) + <span class=\"built_in\">min</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> Math.<span class=\"built_in\">floor</span>(generatedNumber);</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"Important\"><a href=\"#Important\" class=\"headerlink\" title=\"Important\"></a>Important</h1><p>Do not forget to  <code>import &#39;/imports/api/methods.js&#39;</code> in the server’s startup file: <code>/imports/startup/server/index.js</code> otherwise meteor won’t know of the existence of this file</p>\n<h2 id=\"Now…how-to-use-it\"><a href=\"#Now…how-to-use-it\" class=\"headerlink\" title=\"Now…how to use it ?\"></a>Now…how to use it ?</h2><p>Methods can be called from the server-side or from the client-side. Let’s try it in the browser’s console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'find.random_number'</span>, <span class=\"number\">25</span>, <span class=\"number\">50</span>, (err, result ) =&gt; &#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// in case an exception is thrown, then this will contain information about the error</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// this will contain a random number between 25 and 50</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To fully understand the reason why we added 2 arguments <code>err</code> and <code>result</code>, go ahead and read the explanation <a href=\"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Errors-in-methods\"><a href=\"#Errors-in-methods\" class=\"headerlink\" title=\"Errors in methods\"></a>Errors in methods</h2><p>Let’s cause an error and see what happens:\nType this code in the <em>/imports/api/methods.js</em> file:3\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file /imports/api/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">   <span class=\"string\">'method.checkString'</span>(myString) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (myString === <span class=\"string\">'exception'</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"number\">500</span>, <span class=\"string\">'An error has occurred'</span>, <span class=\"string\">'You are not allowed to enter this string'</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// Arguments for throw new Meteor.Error:</span></div><div class=\"line\">           <span class=\"comment\">// The first argument (error): is something very general, can be a number like 500, 404,</span></div><div class=\"line\">           <span class=\"comment\">// The second argument (reason): is a description of the error</span></div><div class=\"line\">           <span class=\"comment\">// The third argument (details): is for providing more details about the error.</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now, make a method call in your browser’s console to <code>method.checkString</code> and catch the exception:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'method.checkString'</span>, <span class=\"string\">'exception'</span>, (err, result) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"RPC’s-a-way-to-express-yourself\"><a href=\"#RPC’s-a-way-to-express-yourself\" class=\"headerlink\" title=\"RPC’s - a way to express yourself\"></a>RPC’s - a way to express yourself</h2><p>Well, you are probably already asking yourself what is an RPC. Even if you have already googled the term, allow us to explain to you what an RPC is. </p>\n<p>First of all, RPC stands for “Remote Procedure Call”, which basically means that you invoke “something” with some arguments ( only if you want to use arguments, of course).\nand you expect a response, just like you would do when in a conversation.</p>\n<p>In Meteor, the usual and most recommended way of doing this, is by communicating through a websocket with the server.</p>\n<p>So what actions we can do with RPC’s ?</p>\n<ul>\n<li>Fetching data</li>\n<li>Inserting Data</li>\n<li>Updating/Deleting Data</li>\n<li>Making API calls</li>\n<li>Anything you can possibly think of</li>\n</ul>\n<h2 id=\"Let’s-create-a-method-or-RPC\"><a href=\"#Let’s-create-a-method-or-RPC\" class=\"headerlink\" title=\"Let’s create a method(or RPC)\"></a>Let’s create a method(or RPC)</h2><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file /imports/api/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; from <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'find.random_number'</span> (<span class=\"built_in\">min</span>, <span class=\"built_in\">max</span>) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">min</span>) <span class=\"built_in\">min</span> = <span class=\"number\">0</span>;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"built_in\">max</span>) <span class=\"built_in\">max</span> = <span class=\"number\">100</span>;</div><div class=\"line\">        <span class=\"keyword\">const</span> generatedNumber = Math.<span class=\"built_in\">random</span>() * (<span class=\"built_in\">max</span> - <span class=\"built_in\">min</span>) + <span class=\"built_in\">min</span>;</div><div class=\"line\">        <span class=\"keyword\">return</span> Math.<span class=\"built_in\">floor</span>(generatedNumber);</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h1 id=\"Important\"><a href=\"#Important\" class=\"headerlink\" title=\"Important\"></a>Important</h1><p>Do not forget to  <code>import &#39;/imports/api/methods.js&#39;</code> in the server’s startup file: <code>/imports/startup/server/index.js</code> otherwise meteor won’t know of the existence of this file</p>\n<h2 id=\"Now…how-to-use-it\"><a href=\"#Now…how-to-use-it\" class=\"headerlink\" title=\"Now…how to use it ?\"></a>Now…how to use it ?</h2><p>Methods can be called from the server-side or from the client-side. Let’s try it in the browser’s console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'find.random_number'</span>, <span class=\"number\">25</span>, <span class=\"number\">50</span>, (err, result ) =&gt; &#123;</div><div class=\"line\">   <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// in case an exception is thrown, then this will contain information about the error</span></div><div class=\"line\">   <span class=\"built_in\">console</span>.log(result); <span class=\"comment\">// this will contain a random number between 25 and 50</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>To fully understand the reason why we added 2 arguments <code>err</code> and <code>result</code>, go ahead and read the explanation <a href=\"http://fredkschott.com/post/2014/03/understanding-error-first-callbacks-in-node-js/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Errors-in-methods\"><a href=\"#Errors-in-methods\" class=\"headerlink\" title=\"Errors in methods\"></a>Errors in methods</h2><p>Let’s cause an error and see what happens:\nType this code in the <em>/imports/api/methods.js</em> file:3\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file /imports/api/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">   <span class=\"string\">'method.checkString'</span>(myString) &#123;</div><div class=\"line\">           <span class=\"keyword\">if</span> (myString === <span class=\"string\">'exception'</span>) &#123;</div><div class=\"line\">               <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"number\">500</span>, <span class=\"string\">'An error has occurred'</span>, <span class=\"string\">'You are not allowed to enter this string'</span>);</div><div class=\"line\">           &#125;</div><div class=\"line\"></div><div class=\"line\">           <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</div><div class=\"line\">       &#125;</div><div class=\"line\">       <span class=\"comment\">// Arguments for throw new Meteor.Error:</span></div><div class=\"line\">           <span class=\"comment\">// The first argument (error): is something very general, can be a number like 500, 404,</span></div><div class=\"line\">           <span class=\"comment\">// The second argument (reason): is a description of the error</span></div><div class=\"line\">           <span class=\"comment\">// The third argument (details): is for providing more details about the error.</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now, make a method call in your browser’s console to <code>method.checkString</code> and catch the exception:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'method.checkString'</span>, <span class=\"string\">'exception'</span>, (err, result) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>"},{"title":"Welcome","description":"Getting acquainted with Meteor","disqusPage":"Welcome","_content":"\n<h1>Hello and Welcome!</h1>\n\nFirst of all, welcome aboard and congratulations on your choice of embarking on this journey. But before we start, let me tell you a little story:</br>\nAs years passed by and humanity evolved, apps have literally changed the way in which the world works, giving us the chance to simplify and optimize many aspects of our lives.\nHaving things simplified gave us more time, time which we, as humans started to use smartly by finding a way so simplify the process of building apps.\nAs a result of those efforts MeteorJS was born.\n\n**Important!**\nTo further help your understanding we have set a [github repository](https://github.com/cult-of-coders/meteor-tuts-tutorial) where you can find a branch for each of the sections\nyou will complete on this tutorial.\n\n\n\n<h1>What is Meteor?</h1>\n\nMeteor is an open-source JavaScript-based framework which allows the developing of complex web and mobile apps at a fast pace.\nThe framework’s design is based on simplicity and efficiency, thus making it a good fit for both beginner and advanced developers.\n\n\n\n<h1>What is Cult of Coders?</h1>\n\nWe are a Romanian company solely focused on web and mobile development. Analyzing our clients needs we understood that what\nthey are looking for in a product is a perfect combination of the newest technologies and fastness, stability and scalability.\n In order to apply to all those needs and become more professional we chose to work exclusively with Meteor and React.\n \n \n<h1>What is Meteor-Tuts?</h1>\n\nBeing in love with what we do we contributed to a series of open-source projects which you can see [HERE](http://www.github.com/cult-of-coders).</br>\nMeteor-Tuts is one of the projects closest to our hearts designed as a useful tool for any programmer that wants to step up his/her game.\nNavigating through this complex but rather easy to understand tutorial you will be accompanied by video tutorials for each chapter and sub-chapter.\nAlso, to give you an even better overview, we will provide you with a github repository link where you can find the full project \nalthough we recommend you to take it step by step in order to achieve a better understanding and mastery of the MeteorJS framework.\n\n\n<h1>Before you begin</h1>\n\nThis tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.\n\nHowever, if you do need to learn Javascript, you can use these resources:\n- We recommend this [website](https://www.freecodecamp.org/), because it will help you get some experience, after you're\n done with the Javascript, HTML and CSS tutorials.\n- One of the most eloquent [Javascript tutorials](http://eloquentjavascript.net/) on the web.\n- A [tutorial](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) from the \nMozilla Foundation ( yes, they do maintain the Firefox browser :)).\n\nIf you are familiar with Javascript, but not with the ES6 syntax, you can use these resources to learn it:\n- To just learn the syntax, this is the [place](http://exploringjs.com/es6/index.html) to go to. \n- After you've learned the syntax of ES6, to get some practice, go [here](http://es6katas.org/). \n\nThese resources are ordered in the order we thought wold serve you best to go over them. If you think you have found a \nbetter way to learn Javascript ES6, then, by all means, please use the resource which fits you better. \n\nEven though our primarily focus is Meteor, we are going to use React so that you can visualize how everything works, which is the view layer we recommend for Meteor. Ideally, would be to study first React even though our primary focus on this tutorial is Meteor. To study React, we recommend you: \n- [https://camjackson.net/post/9-things-every-reactjs-beginner-should-know](https://camjackson.net/post/9-things-every-reactjs-beginner-should-know).\n- [https://blog.risingstack.com/the-react-way-getting-started-tutorial/](https://blog.risingstack.com/the-react-way-getting-started-tutorial/).\n- [https://egghead.io/courses/react-fundamentals](https://egghead.io/courses/react-fundamentals).\n- [http://jaketrent.com/post/smart-dumb-components-react/](http://jaketrent.com/post/smart-dumb-components-react/).\n\n<h1>Meteor - what are we going to learn?</h1>\n\n**Introduction:** \n- We are going to create a post feed application in which users will be able to make a post and users will see the changes reactive (live). Each post will have comments and will allow the owner to edit or remove the post.</br>\n\n**Curriculum:**\n- Create a meteor project\n- Structuring a meteor application\n- Collections (list, insert, update and  remove)\n- Methods\n- Publications and subscriptions\n- User accounts\n- Registration\n- Login\n- Forgot password\n- Meteor tips&tricks\n\n\n\nNow let's sail together into the Meteor World!\n\n","source":"index.md","raw":"---\ntitle: Welcome\ndescription: 'Getting acquainted with Meteor'\ndisqusPage: 'Welcome'\n---\n\n<h1>Hello and Welcome!</h1>\n\nFirst of all, welcome aboard and congratulations on your choice of embarking on this journey. But before we start, let me tell you a little story:</br>\nAs years passed by and humanity evolved, apps have literally changed the way in which the world works, giving us the chance to simplify and optimize many aspects of our lives.\nHaving things simplified gave us more time, time which we, as humans started to use smartly by finding a way so simplify the process of building apps.\nAs a result of those efforts MeteorJS was born.\n\n**Important!**\nTo further help your understanding we have set a [github repository](https://github.com/cult-of-coders/meteor-tuts-tutorial) where you can find a branch for each of the sections\nyou will complete on this tutorial.\n\n\n\n<h1>What is Meteor?</h1>\n\nMeteor is an open-source JavaScript-based framework which allows the developing of complex web and mobile apps at a fast pace.\nThe framework’s design is based on simplicity and efficiency, thus making it a good fit for both beginner and advanced developers.\n\n\n\n<h1>What is Cult of Coders?</h1>\n\nWe are a Romanian company solely focused on web and mobile development. Analyzing our clients needs we understood that what\nthey are looking for in a product is a perfect combination of the newest technologies and fastness, stability and scalability.\n In order to apply to all those needs and become more professional we chose to work exclusively with Meteor and React.\n \n \n<h1>What is Meteor-Tuts?</h1>\n\nBeing in love with what we do we contributed to a series of open-source projects which you can see [HERE](http://www.github.com/cult-of-coders).</br>\nMeteor-Tuts is one of the projects closest to our hearts designed as a useful tool for any programmer that wants to step up his/her game.\nNavigating through this complex but rather easy to understand tutorial you will be accompanied by video tutorials for each chapter and sub-chapter.\nAlso, to give you an even better overview, we will provide you with a github repository link where you can find the full project \nalthough we recommend you to take it step by step in order to achieve a better understanding and mastery of the MeteorJS framework.\n\n\n<h1>Before you begin</h1>\n\nThis tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.\n\nHowever, if you do need to learn Javascript, you can use these resources:\n- We recommend this [website](https://www.freecodecamp.org/), because it will help you get some experience, after you're\n done with the Javascript, HTML and CSS tutorials.\n- One of the most eloquent [Javascript tutorials](http://eloquentjavascript.net/) on the web.\n- A [tutorial](https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript) from the \nMozilla Foundation ( yes, they do maintain the Firefox browser :)).\n\nIf you are familiar with Javascript, but not with the ES6 syntax, you can use these resources to learn it:\n- To just learn the syntax, this is the [place](http://exploringjs.com/es6/index.html) to go to. \n- After you've learned the syntax of ES6, to get some practice, go [here](http://es6katas.org/). \n\nThese resources are ordered in the order we thought wold serve you best to go over them. If you think you have found a \nbetter way to learn Javascript ES6, then, by all means, please use the resource which fits you better. \n\nEven though our primarily focus is Meteor, we are going to use React so that you can visualize how everything works, which is the view layer we recommend for Meteor. Ideally, would be to study first React even though our primary focus on this tutorial is Meteor. To study React, we recommend you: \n- [https://camjackson.net/post/9-things-every-reactjs-beginner-should-know](https://camjackson.net/post/9-things-every-reactjs-beginner-should-know).\n- [https://blog.risingstack.com/the-react-way-getting-started-tutorial/](https://blog.risingstack.com/the-react-way-getting-started-tutorial/).\n- [https://egghead.io/courses/react-fundamentals](https://egghead.io/courses/react-fundamentals).\n- [http://jaketrent.com/post/smart-dumb-components-react/](http://jaketrent.com/post/smart-dumb-components-react/).\n\n<h1>Meteor - what are we going to learn?</h1>\n\n**Introduction:** \n- We are going to create a post feed application in which users will be able to make a post and users will see the changes reactive (live). Each post will have comments and will allow the owner to edit or remove the post.</br>\n\n**Curriculum:**\n- Create a meteor project\n- Structuring a meteor application\n- Collections (list, insert, update and  remove)\n- Methods\n- Publications and subscriptions\n- User accounts\n- Registration\n- Login\n- Forgot password\n- Meteor tips&tricks\n\n\n\nNow let's sail together into the Meteor World!\n\n","date":"2019-10-04T12:00:07.767Z","updated":"2019-10-04T12:00:07.767Z","path":"index.html","_id":"ciurgklpx0000zwjxxxu58myv","comments":1,"layout":"page","content":"<h1>Hello and Welcome!</h1>\n\n<p>First of all, welcome aboard and congratulations on your choice of embarking on this journey. But before we start, let me tell you a little story:<br>\nAs years passed by and humanity evolved, apps have literally changed the way in which the world works, giving us the chance to simplify and optimize many aspects of our lives.\nHaving things simplified gave us more time, time which we, as humans started to use smartly by finding a way so simplify the process of building apps.\nAs a result of those efforts MeteorJS was born.</p>\n<p><strong>Important!</strong>\nTo further help your understanding we have set a <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial\" target=\"_blank\" rel=\"noopener\">github repository</a> where you can find a branch for each of the sections\nyou will complete on this tutorial.</p>\n<h1>What is Meteor?</h1>\n\n<p>Meteor is an open-source JavaScript-based framework which allows the developing of complex web and mobile apps at a fast pace.\nThe framework’s design is based on simplicity and efficiency, thus making it a good fit for both beginner and advanced developers.</p>\n<h1>What is Cult of Coders?</h1>\n\n<p>We are a Romanian company solely focused on web and mobile development. Analyzing our clients needs we understood that what\nthey are looking for in a product is a perfect combination of the newest technologies and fastness, stability and scalability.\n In order to apply to all those needs and become more professional we chose to work exclusively with Meteor and React.</p>\n<h1>What is Meteor-Tuts?</h1>\n\n<p>Being in love with what we do we contributed to a series of open-source projects which you can see <a href=\"http://www.github.com/cult-of-coders\" target=\"_blank\" rel=\"noopener\">HERE</a>.<br>\nMeteor-Tuts is one of the projects closest to our hearts designed as a useful tool for any programmer that wants to step up his/her game.\nNavigating through this complex but rather easy to understand tutorial you will be accompanied by video tutorials for each chapter and sub-chapter.\nAlso, to give you an even better overview, we will provide you with a github repository link where you can find the full project \nalthough we recommend you to take it step by step in order to achieve a better understanding and mastery of the MeteorJS framework.</p>\n<h1>Before you begin</h1>\n\n<p>This tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.</p>\n<p>However, if you do need to learn Javascript, you can use these resources:</p>\n<ul>\n<li>We recommend this <a href=\"https://www.freecodecamp.org/\" target=\"_blank\" rel=\"noopener\">website</a>, because it will help you get some experience, after you’re\ndone with the Javascript, HTML and CSS tutorials.</li>\n<li>One of the most eloquent <a href=\"http://eloquentjavascript.net/\" target=\"_blank\" rel=\"noopener\">Javascript tutorials</a> on the web.</li>\n<li>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"noopener\">tutorial</a> from the \nMozilla Foundation ( yes, they do maintain the Firefox browser :)).</li>\n</ul>\n<p>If you are familiar with Javascript, but not with the ES6 syntax, you can use these resources to learn it:</p>\n<ul>\n<li>To just learn the syntax, this is the <a href=\"http://exploringjs.com/es6/index.html\" target=\"_blank\" rel=\"noopener\">place</a> to go to. </li>\n<li>After you’ve learned the syntax of ES6, to get some practice, go <a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"noopener\">here</a>. </li>\n</ul>\n<p>These resources are ordered in the order we thought wold serve you best to go over them. If you think you have found a \nbetter way to learn Javascript ES6, then, by all means, please use the resource which fits you better. </p>\n<p>Even though our primarily focus is Meteor, we are going to use React so that you can visualize how everything works, which is the view layer we recommend for Meteor. Ideally, would be to study first React even though our primary focus on this tutorial is Meteor. To study React, we recommend you: </p>\n<ul>\n<li><a href=\"https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\" target=\"_blank\" rel=\"noopener\">https://camjackson.net/post/9-things-every-reactjs-beginner-should-know</a>.</li>\n<li><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"noopener\">https://blog.risingstack.com/the-react-way-getting-started-tutorial/</a>.</li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\" target=\"_blank\" rel=\"noopener\">https://egghead.io/courses/react-fundamentals</a>.</li>\n<li><a href=\"http://jaketrent.com/post/smart-dumb-components-react/\" target=\"_blank\" rel=\"noopener\">http://jaketrent.com/post/smart-dumb-components-react/</a>.</li>\n</ul>\n<h1>Meteor - what are we going to learn?</h1>\n\n<p><strong>Introduction:</strong> </p>\n<ul>\n<li>We are going to create a post feed application in which users will be able to make a post and users will see the changes reactive (live). Each post will have comments and will allow the owner to edit or remove the post.<br></li>\n</ul>\n<p><strong>Curriculum:</strong></p>\n<ul>\n<li>Create a meteor project</li>\n<li>Structuring a meteor application</li>\n<li>Collections (list, insert, update and  remove)</li>\n<li>Methods</li>\n<li>Publications and subscriptions</li>\n<li>User accounts</li>\n<li>Registration</li>\n<li>Login</li>\n<li>Forgot password</li>\n<li>Meteor tips&amp;tricks</li>\n</ul>\n<p>Now let’s sail together into the Meteor World!</p>\n","site":{"data":{}},"excerpt":"","more":"<h1>Hello and Welcome!</h1>\n\n<p>First of all, welcome aboard and congratulations on your choice of embarking on this journey. But before we start, let me tell you a little story:<br>\nAs years passed by and humanity evolved, apps have literally changed the way in which the world works, giving us the chance to simplify and optimize many aspects of our lives.\nHaving things simplified gave us more time, time which we, as humans started to use smartly by finding a way so simplify the process of building apps.\nAs a result of those efforts MeteorJS was born.</p>\n<p><strong>Important!</strong>\nTo further help your understanding we have set a <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial\" target=\"_blank\" rel=\"noopener\">github repository</a> where you can find a branch for each of the sections\nyou will complete on this tutorial.</p>\n<h1>What is Meteor?</h1>\n\n<p>Meteor is an open-source JavaScript-based framework which allows the developing of complex web and mobile apps at a fast pace.\nThe framework’s design is based on simplicity and efficiency, thus making it a good fit for both beginner and advanced developers.</p>\n<h1>What is Cult of Coders?</h1>\n\n<p>We are a Romanian company solely focused on web and mobile development. Analyzing our clients needs we understood that what\nthey are looking for in a product is a perfect combination of the newest technologies and fastness, stability and scalability.\n In order to apply to all those needs and become more professional we chose to work exclusively with Meteor and React.</p>\n<h1>What is Meteor-Tuts?</h1>\n\n<p>Being in love with what we do we contributed to a series of open-source projects which you can see <a href=\"http://www.github.com/cult-of-coders\" target=\"_blank\" rel=\"noopener\">HERE</a>.<br>\nMeteor-Tuts is one of the projects closest to our hearts designed as a useful tool for any programmer that wants to step up his/her game.\nNavigating through this complex but rather easy to understand tutorial you will be accompanied by video tutorials for each chapter and sub-chapter.\nAlso, to give you an even better overview, we will provide you with a github repository link where you can find the full project \nalthough we recommend you to take it step by step in order to achieve a better understanding and mastery of the MeteorJS framework.</p>\n<h1>Before you begin</h1>\n\n<p>This tutorial is focused on Meteor, which is a Javascript framework.\nBecause we want to teach you Meteor, we will already assume you know Javascript ES6, in order to keep this tutorial focused.</p>\n<p>However, if you do need to learn Javascript, you can use these resources:</p>\n<ul>\n<li>We recommend this <a href=\"https://www.freecodecamp.org/\" target=\"_blank\" rel=\"noopener\">website</a>, because it will help you get some experience, after you’re\ndone with the Javascript, HTML and CSS tutorials.</li>\n<li>One of the most eloquent <a href=\"http://eloquentjavascript.net/\" target=\"_blank\" rel=\"noopener\">Javascript tutorials</a> on the web.</li>\n<li>A <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript\" target=\"_blank\" rel=\"noopener\">tutorial</a> from the \nMozilla Foundation ( yes, they do maintain the Firefox browser :)).</li>\n</ul>\n<p>If you are familiar with Javascript, but not with the ES6 syntax, you can use these resources to learn it:</p>\n<ul>\n<li>To just learn the syntax, this is the <a href=\"http://exploringjs.com/es6/index.html\" target=\"_blank\" rel=\"noopener\">place</a> to go to. </li>\n<li>After you’ve learned the syntax of ES6, to get some practice, go <a href=\"http://es6katas.org/\" target=\"_blank\" rel=\"noopener\">here</a>. </li>\n</ul>\n<p>These resources are ordered in the order we thought wold serve you best to go over them. If you think you have found a \nbetter way to learn Javascript ES6, then, by all means, please use the resource which fits you better. </p>\n<p>Even though our primarily focus is Meteor, we are going to use React so that you can visualize how everything works, which is the view layer we recommend for Meteor. Ideally, would be to study first React even though our primary focus on this tutorial is Meteor. To study React, we recommend you: </p>\n<ul>\n<li><a href=\"https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\" target=\"_blank\" rel=\"noopener\">https://camjackson.net/post/9-things-every-reactjs-beginner-should-know</a>.</li>\n<li><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"noopener\">https://blog.risingstack.com/the-react-way-getting-started-tutorial/</a>.</li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\" target=\"_blank\" rel=\"noopener\">https://egghead.io/courses/react-fundamentals</a>.</li>\n<li><a href=\"http://jaketrent.com/post/smart-dumb-components-react/\" target=\"_blank\" rel=\"noopener\">http://jaketrent.com/post/smart-dumb-components-react/</a>.</li>\n</ul>\n<h1>Meteor - what are we going to learn?</h1>\n\n<p><strong>Introduction:</strong> </p>\n<ul>\n<li>We are going to create a post feed application in which users will be able to make a post and users will see the changes reactive (live). Each post will have comments and will allow the owner to edit or remove the post.<br></li>\n</ul>\n<p><strong>Curriculum:</strong></p>\n<ul>\n<li>Create a meteor project</li>\n<li>Structuring a meteor application</li>\n<li>Collections (list, insert, update and  remove)</li>\n<li>Methods</li>\n<li>Publications and subscriptions</li>\n<li>User accounts</li>\n<li>Registration</li>\n<li>Login</li>\n<li>Forgot password</li>\n<li>Meteor tips&amp;tricks</li>\n</ul>\n<p>Now let’s sail together into the Meteor World!</p>\n"},{"title":"Publications & Subscriptions","description":"Building reactive apps with Meteor","disqusPage":"Chapter 1: Pub/Sub","_content":"\n## Going Live\n\nTo be able to understand what we mean when we say Pub/sub in Meteor, we need to explain to you what a pub/sub system is in the first place. \n\nThe explanation is fairly straightforward: a pub/sub system is a communication system, where the \"publishers\" send messages \nto the \"subscribers\". Which is why, in Meteor, you will meet, very frequently, the term of **\"reactive data\"**.\n\nHaving this feature available in Meteor means that we can build **live applications**. If we go to our post example,\nand we add a new post, all the users that are **subscribed** to that data will see the changes made to the data in real time.\n\n## Publishing in Meteor\n\nSo how would we explain publishing in a very simple manner ? Well, let's assume you're talking to a friend about your application,\n and you want to give him access to your data. In other words, you are going to make that data **public** for him.\n As such,  **publishing** would be equivalent to saying \"I will give you access to this data !\".\n \n```js\n//file /imports/api/posts/publications.js\nimport { Meteor } from 'meteor/meteor';\nimport Posts from '/imports/db/posts/collection';\n\nMeteor.publish('posts', function () {\n    return Posts.find();\n})\n```\n\nNow, don't forget to import it in `/imports/startup/server/index.js`!\n\nIt's a basic rule that a publication needs to return 2 things:\n1. A cursor\n2. An array of cursors\n\nIt is because of this rule that we aren't using `.fetch()` in our code.\n\n## What is a cursor?\n\nA good way to think about a cursor is to think of it as if you would think of an \"address\". \nIn the example above, we returned an address to all posts.\n\nQ: Wait, isn't that also what methods do ? <br />\nA: Yes, but by using publications we benefit from reactivity.\n\nQ: Ok, so when should I use methods and when should i use pub/sub ? <br />\nA: You should use pub/sub when you want your data changes to be **live**. Otherwise you should stick to using methods.\n\n## Subscribing\n\nWe have now published the data changes, but how are the users going to know about the data that we've made available for them ?\nWell, that's where subscriptions come in ! If we are to use the \"friend\" analogy that we have used to explain **publishing**,\nthe friend to which we have given access to the data will say: \"Hey! I want access to the data you are offering me.\"\n\nYou noticed that when we created our publication, we first passed a string to it in the code called 'posts'.\nWe must use that same string in order to subscribe to the publication.\n\nGo to http://localhost:3000 and the console in your browser's . Then, type into it:\n```js\nvar handler = Meteor.subscribe('posts');\n```\n\n```js\nhandler.ready(); // / will return true/false if the subscription is ready\n```\n\n```js\nhandler.stop(); // will return true/false and stop listening to changes\n```\n\nThe variable *handler* contains:\n-a *subscriptionId*, which is a unique identifier for the subscription\n- *ready()*, which is a function that returns true, if the subscription is ready\n- *stop()*, which is a function that will stop the subscription\n\nWhen a subscription is ready, it means that the server got your request, and it gave the specified user access to the **live** data.\n\nHow the data is served to us is a very interesting process, but in order to dive into that process, we must first have to\nhave a good understanding of Client-Side collections.\n\n## Observing Changes\n\nNow every time something in the \"address\" changes, like a new element is inserted, or updated, or removed, Meteor will communicate that to you, \nbecause you subscribed to that publication, and the cursor will change, to a new address.\n\n## Managing subscriptions\n\nJust keep in mind: when **handle.ready()** returns *true*, if it is followed by a `.find().fetch()`, the results might be empty.\nThat's because *ready()* returning a *true* value does not mean that you got all the data. \nInstead, it means that the connections was established, and Meteor will pump the data there.\n\nIf you want to read more about how pub/sub works, click [here](https://docs.meteor.com/api/pubsub.html)\n\nIn order to see this how fully works in a practical way, you could clone our [github repository](https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/5-pub/sub) and on `/posts/reactive` you can see the process.\n\n \n\n\n\n\n\n","source":"chapters/1/pubsub.md","raw":"---\ntitle: Publications & Subscriptions\ndescription: Building reactive apps with Meteor\ndisqusPage: 'Chapter 1: Pub/Sub'\n---\n\n## Going Live\n\nTo be able to understand what we mean when we say Pub/sub in Meteor, we need to explain to you what a pub/sub system is in the first place. \n\nThe explanation is fairly straightforward: a pub/sub system is a communication system, where the \"publishers\" send messages \nto the \"subscribers\". Which is why, in Meteor, you will meet, very frequently, the term of **\"reactive data\"**.\n\nHaving this feature available in Meteor means that we can build **live applications**. If we go to our post example,\nand we add a new post, all the users that are **subscribed** to that data will see the changes made to the data in real time.\n\n## Publishing in Meteor\n\nSo how would we explain publishing in a very simple manner ? Well, let's assume you're talking to a friend about your application,\n and you want to give him access to your data. In other words, you are going to make that data **public** for him.\n As such,  **publishing** would be equivalent to saying \"I will give you access to this data !\".\n \n```js\n//file /imports/api/posts/publications.js\nimport { Meteor } from 'meteor/meteor';\nimport Posts from '/imports/db/posts/collection';\n\nMeteor.publish('posts', function () {\n    return Posts.find();\n})\n```\n\nNow, don't forget to import it in `/imports/startup/server/index.js`!\n\nIt's a basic rule that a publication needs to return 2 things:\n1. A cursor\n2. An array of cursors\n\nIt is because of this rule that we aren't using `.fetch()` in our code.\n\n## What is a cursor?\n\nA good way to think about a cursor is to think of it as if you would think of an \"address\". \nIn the example above, we returned an address to all posts.\n\nQ: Wait, isn't that also what methods do ? <br />\nA: Yes, but by using publications we benefit from reactivity.\n\nQ: Ok, so when should I use methods and when should i use pub/sub ? <br />\nA: You should use pub/sub when you want your data changes to be **live**. Otherwise you should stick to using methods.\n\n## Subscribing\n\nWe have now published the data changes, but how are the users going to know about the data that we've made available for them ?\nWell, that's where subscriptions come in ! If we are to use the \"friend\" analogy that we have used to explain **publishing**,\nthe friend to which we have given access to the data will say: \"Hey! I want access to the data you are offering me.\"\n\nYou noticed that when we created our publication, we first passed a string to it in the code called 'posts'.\nWe must use that same string in order to subscribe to the publication.\n\nGo to http://localhost:3000 and the console in your browser's . Then, type into it:\n```js\nvar handler = Meteor.subscribe('posts');\n```\n\n```js\nhandler.ready(); // / will return true/false if the subscription is ready\n```\n\n```js\nhandler.stop(); // will return true/false and stop listening to changes\n```\n\nThe variable *handler* contains:\n-a *subscriptionId*, which is a unique identifier for the subscription\n- *ready()*, which is a function that returns true, if the subscription is ready\n- *stop()*, which is a function that will stop the subscription\n\nWhen a subscription is ready, it means that the server got your request, and it gave the specified user access to the **live** data.\n\nHow the data is served to us is a very interesting process, but in order to dive into that process, we must first have to\nhave a good understanding of Client-Side collections.\n\n## Observing Changes\n\nNow every time something in the \"address\" changes, like a new element is inserted, or updated, or removed, Meteor will communicate that to you, \nbecause you subscribed to that publication, and the cursor will change, to a new address.\n\n## Managing subscriptions\n\nJust keep in mind: when **handle.ready()** returns *true*, if it is followed by a `.find().fetch()`, the results might be empty.\nThat's because *ready()* returning a *true* value does not mean that you got all the data. \nInstead, it means that the connections was established, and Meteor will pump the data there.\n\nIf you want to read more about how pub/sub works, click [here](https://docs.meteor.com/api/pubsub.html)\n\nIn order to see this how fully works in a practical way, you could clone our [github repository](https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/5-pub/sub) and on `/posts/reactive` you can see the process.\n\n \n\n\n\n\n\n","date":"2019-10-04T12:00:07.759Z","updated":"2019-10-04T12:00:07.759Z","path":"chapters/1/pubsub.html","_id":"ciusadl2x0000ftjxliw7ap6p","comments":1,"layout":"page","content":"<h2 id=\"Going-Live\"><a href=\"#Going-Live\" class=\"headerlink\" title=\"Going Live\"></a>Going Live</h2><p>To be able to understand what we mean when we say Pub/sub in Meteor, we need to explain to you what a pub/sub system is in the first place. </p>\n<p>The explanation is fairly straightforward: a pub/sub system is a communication system, where the “publishers” send messages \nto the “subscribers”. Which is why, in Meteor, you will meet, very frequently, the term of <strong>“reactive data”</strong>.</p>\n<p>Having this feature available in Meteor means that we can build <strong>live applications</strong>. If we go to our post example,\nand we add a new post, all the users that are <strong>subscribed</strong> to that data will see the changes made to the data in real time.</p>\n<h2 id=\"Publishing-in-Meteor\"><a href=\"#Publishing-in-Meteor\" class=\"headerlink\" title=\"Publishing in Meteor\"></a>Publishing in Meteor</h2><p>So how would we explain publishing in a very simple manner ? Well, let’s assume you’re talking to a friend about your application,\n and you want to give him access to your data. In other words, you are going to make that data <strong>public</strong> for him.\n As such,  <strong>publishing</strong> would be equivalent to saying “I will give you access to this data !”.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//file /imports/api/posts/publications.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/posts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now, don’t forget to import it in <code>/imports/startup/server/index.js</code>!</p>\n<p>It’s a basic rule that a publication needs to return 2 things:</p>\n<ol>\n<li>A cursor</li>\n<li>An array of cursors</li>\n</ol>\n<p>It is because of this rule that we aren’t using <code>.fetch()</code> in our code.</p>\n<h2 id=\"What-is-a-cursor\"><a href=\"#What-is-a-cursor\" class=\"headerlink\" title=\"What is a cursor?\"></a>What is a cursor?</h2><p>A good way to think about a cursor is to think of it as if you would think of an “address”. \nIn the example above, we returned an address to all posts.</p>\n<p>Q: Wait, isn’t that also what methods do ? <br>\nA: Yes, but by using publications we benefit from reactivity.</p>\n<p>Q: Ok, so when should I use methods and when should i use pub/sub ? <br>\nA: You should use pub/sub when you want your data changes to be <strong>live</strong>. Otherwise you should stick to using methods.</p>\n<h2 id=\"Subscribing\"><a href=\"#Subscribing\" class=\"headerlink\" title=\"Subscribing\"></a>Subscribing</h2><p>We have now published the data changes, but how are the users going to know about the data that we’ve made available for them ?\nWell, that’s where subscriptions come in ! If we are to use the “friend” analogy that we have used to explain <strong>publishing</strong>,\nthe friend to which we have given access to the data will say: “Hey! I want access to the data you are offering me.”</p>\n<p>You noticed that when we created our publication, we first passed a string to it in the code called ‘posts’.\nWe must use that same string in order to subscribe to the publication.</p>\n<p>Go to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a> and the console in your browser’s . Then, type into it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handler = Meteor.subscribe(<span class=\"string\">'posts'</span>);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.ready(); <span class=\"comment\">// / will return true/false if the subscription is ready</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.stop(); <span class=\"comment\">// will return true/false and stop listening to changes</span></div></pre></td></tr></table></figure>\n<p>The variable <em>handler</em> contains:\n-a <em>subscriptionId</em>, which is a unique identifier for the subscription</p>\n<ul>\n<li><em>ready()</em>, which is a function that returns true, if the subscription is ready</li>\n<li><em>stop()</em>, which is a function that will stop the subscription</li>\n</ul>\n<p>When a subscription is ready, it means that the server got your request, and it gave the specified user access to the <strong>live</strong> data.</p>\n<p>How the data is served to us is a very interesting process, but in order to dive into that process, we must first have to\nhave a good understanding of Client-Side collections.</p>\n<h2 id=\"Observing-Changes\"><a href=\"#Observing-Changes\" class=\"headerlink\" title=\"Observing Changes\"></a>Observing Changes</h2><p>Now every time something in the “address” changes, like a new element is inserted, or updated, or removed, Meteor will communicate that to you, \nbecause you subscribed to that publication, and the cursor will change, to a new address.</p>\n<h2 id=\"Managing-subscriptions\"><a href=\"#Managing-subscriptions\" class=\"headerlink\" title=\"Managing subscriptions\"></a>Managing subscriptions</h2><p>Just keep in mind: when <strong>handle.ready()</strong> returns <em>true</em>, if it is followed by a <code>.find().fetch()</code>, the results might be empty.\nThat’s because <em>ready()</em> returning a <em>true</em> value does not mean that you got all the data. \nInstead, it means that the connections was established, and Meteor will pump the data there.</p>\n<p>If you want to read more about how pub/sub works, click <a href=\"https://docs.meteor.com/api/pubsub.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>In order to see this how fully works in a practical way, you could clone our <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/5-pub/sub\" target=\"_blank\" rel=\"noopener\">github repository</a> and on <code>/posts/reactive</code> you can see the process.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Going-Live\"><a href=\"#Going-Live\" class=\"headerlink\" title=\"Going Live\"></a>Going Live</h2><p>To be able to understand what we mean when we say Pub/sub in Meteor, we need to explain to you what a pub/sub system is in the first place. </p>\n<p>The explanation is fairly straightforward: a pub/sub system is a communication system, where the “publishers” send messages \nto the “subscribers”. Which is why, in Meteor, you will meet, very frequently, the term of <strong>“reactive data”</strong>.</p>\n<p>Having this feature available in Meteor means that we can build <strong>live applications</strong>. If we go to our post example,\nand we add a new post, all the users that are <strong>subscribed</strong> to that data will see the changes made to the data in real time.</p>\n<h2 id=\"Publishing-in-Meteor\"><a href=\"#Publishing-in-Meteor\" class=\"headerlink\" title=\"Publishing in Meteor\"></a>Publishing in Meteor</h2><p>So how would we explain publishing in a very simple manner ? Well, let’s assume you’re talking to a friend about your application,\n and you want to give him access to your data. In other words, you are going to make that data <strong>public</strong> for him.\n As such,  <strong>publishing</strong> would be equivalent to saying “I will give you access to this data !”.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//file /imports/api/posts/publications.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Meteor &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/posts/collection'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find();</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Now, don’t forget to import it in <code>/imports/startup/server/index.js</code>!</p>\n<p>It’s a basic rule that a publication needs to return 2 things:</p>\n<ol>\n<li>A cursor</li>\n<li>An array of cursors</li>\n</ol>\n<p>It is because of this rule that we aren’t using <code>.fetch()</code> in our code.</p>\n<h2 id=\"What-is-a-cursor\"><a href=\"#What-is-a-cursor\" class=\"headerlink\" title=\"What is a cursor?\"></a>What is a cursor?</h2><p>A good way to think about a cursor is to think of it as if you would think of an “address”. \nIn the example above, we returned an address to all posts.</p>\n<p>Q: Wait, isn’t that also what methods do ? <br>\nA: Yes, but by using publications we benefit from reactivity.</p>\n<p>Q: Ok, so when should I use methods and when should i use pub/sub ? <br>\nA: You should use pub/sub when you want your data changes to be <strong>live</strong>. Otherwise you should stick to using methods.</p>\n<h2 id=\"Subscribing\"><a href=\"#Subscribing\" class=\"headerlink\" title=\"Subscribing\"></a>Subscribing</h2><p>We have now published the data changes, but how are the users going to know about the data that we’ve made available for them ?\nWell, that’s where subscriptions come in ! If we are to use the “friend” analogy that we have used to explain <strong>publishing</strong>,\nthe friend to which we have given access to the data will say: “Hey! I want access to the data you are offering me.”</p>\n<p>You noticed that when we created our publication, we first passed a string to it in the code called ‘posts’.\nWe must use that same string in order to subscribe to the publication.</p>\n<p>Go to <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a> and the console in your browser’s . Then, type into it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> handler = Meteor.subscribe(<span class=\"string\">'posts'</span>);</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.ready(); <span class=\"comment\">// / will return true/false if the subscription is ready</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">handler.stop(); <span class=\"comment\">// will return true/false and stop listening to changes</span></div></pre></td></tr></table></figure>\n<p>The variable <em>handler</em> contains:\n-a <em>subscriptionId</em>, which is a unique identifier for the subscription</p>\n<ul>\n<li><em>ready()</em>, which is a function that returns true, if the subscription is ready</li>\n<li><em>stop()</em>, which is a function that will stop the subscription</li>\n</ul>\n<p>When a subscription is ready, it means that the server got your request, and it gave the specified user access to the <strong>live</strong> data.</p>\n<p>How the data is served to us is a very interesting process, but in order to dive into that process, we must first have to\nhave a good understanding of Client-Side collections.</p>\n<h2 id=\"Observing-Changes\"><a href=\"#Observing-Changes\" class=\"headerlink\" title=\"Observing Changes\"></a>Observing Changes</h2><p>Now every time something in the “address” changes, like a new element is inserted, or updated, or removed, Meteor will communicate that to you, \nbecause you subscribed to that publication, and the cursor will change, to a new address.</p>\n<h2 id=\"Managing-subscriptions\"><a href=\"#Managing-subscriptions\" class=\"headerlink\" title=\"Managing subscriptions\"></a>Managing subscriptions</h2><p>Just keep in mind: when <strong>handle.ready()</strong> returns <em>true</em>, if it is followed by a <code>.find().fetch()</code>, the results might be empty.\nThat’s because <em>ready()</em> returning a <em>true</em> value does not mean that you got all the data. \nInstead, it means that the connections was established, and Meteor will pump the data there.</p>\n<p>If you want to read more about how pub/sub works, click <a href=\"https://docs.meteor.com/api/pubsub.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<p>In order to see this how fully works in a practical way, you could clone our <a href=\"https://github.com/cult-of-coders/meteor-tuts-tutorial/tree/5-pub/sub\" target=\"_blank\" rel=\"noopener\">github repository</a> and on <code>/posts/reactive</code> you can see the process.</p>\n"},{"title":"Tracker","description":"Building reactive apps with Meteor","disqusPage":"Chapter 1: Tracker","_content":"\n## Introducing the tracking system\n\nWhat is a tracking system ?\n\nThe tracker is one of the concepts that sets Meteor apart from other frameworks out there. As such, before we show you\nwhat it's all about, we need to make sure you have all the packages that you need installed on your machine.\nFor that, run this in your terminal:\n```js\nmeteor add tracker reactive-var\n```\n\nNow open up your browser and type this into the browser console \n(the browser console is available for you in the \"developer tools\" menu of your browser):\n```js\nvar a = new ReactiveVar('a default value');\na.get() // will display 'a default value'\na.set('some other value')\na.get() // will display 'some other value'\n```\n\nThat does not seem to be very complicated, but you might be asking yourself \"what's the deal with this ?\". \nAllow us to explain it step by step, so you can understand it!\n\n**ReactiveVar** is a reactive-data source and because of that, you can follow its changes at runtime. \nTo be able to do that, we will be using the *Tracker* feature that got mentioned earlier in the tutorial:\n```js\nvar computation = Tracker.autorun(() => {\n    // this is the function that runs it\n    console.log(a.get())\n})\n```\n\nNow each time you set some value to the **a** variable, it will get logged into the console. Let's try it:\n```js\na.set('something')\n```\n\nTo stop the execution, use:\n```js\ncomputation.stop()\n```\n\nNow, if you give values to your data source, the **run** function's execution will be stopped.\n\nSo, basically:\nWith the **Tracker**, we can track changes occurring to reactive data sources, in real time. \nThat's everything you need to know for now in order to use this feature.\n\nWhat we presented for you was a brief introduction, the **Tracker** tool is way more complex than that. You can read more about them [here](https://docs.meteor.com/api/tracker.html).\n\nAt its core, tracker is a reactive \"watcher\". And it is not unique !\nHowever, this one is very well integrated with Meteor, and this brings down the integration issues you might face when \nworking on projects, which is why we are using it !\n\n## Practice makes perfect\n\n#### 1. Stop. It's too much!\nCreate a tracker that will stop after the 5th change to a reactive variable.\n\n#### 2. Reactive-Dict ?\nFind out what's ReactiveDict and use it to track changes.","source":"chapters/1/reactivity.md","raw":"---\ntitle: Tracker\ndescription: Building reactive apps with Meteor\ndisqusPage: 'Chapter 1: Tracker'\n---\n\n## Introducing the tracking system\n\nWhat is a tracking system ?\n\nThe tracker is one of the concepts that sets Meteor apart from other frameworks out there. As such, before we show you\nwhat it's all about, we need to make sure you have all the packages that you need installed on your machine.\nFor that, run this in your terminal:\n```js\nmeteor add tracker reactive-var\n```\n\nNow open up your browser and type this into the browser console \n(the browser console is available for you in the \"developer tools\" menu of your browser):\n```js\nvar a = new ReactiveVar('a default value');\na.get() // will display 'a default value'\na.set('some other value')\na.get() // will display 'some other value'\n```\n\nThat does not seem to be very complicated, but you might be asking yourself \"what's the deal with this ?\". \nAllow us to explain it step by step, so you can understand it!\n\n**ReactiveVar** is a reactive-data source and because of that, you can follow its changes at runtime. \nTo be able to do that, we will be using the *Tracker* feature that got mentioned earlier in the tutorial:\n```js\nvar computation = Tracker.autorun(() => {\n    // this is the function that runs it\n    console.log(a.get())\n})\n```\n\nNow each time you set some value to the **a** variable, it will get logged into the console. Let's try it:\n```js\na.set('something')\n```\n\nTo stop the execution, use:\n```js\ncomputation.stop()\n```\n\nNow, if you give values to your data source, the **run** function's execution will be stopped.\n\nSo, basically:\nWith the **Tracker**, we can track changes occurring to reactive data sources, in real time. \nThat's everything you need to know for now in order to use this feature.\n\nWhat we presented for you was a brief introduction, the **Tracker** tool is way more complex than that. You can read more about them [here](https://docs.meteor.com/api/tracker.html).\n\nAt its core, tracker is a reactive \"watcher\". And it is not unique !\nHowever, this one is very well integrated with Meteor, and this brings down the integration issues you might face when \nworking on projects, which is why we are using it !\n\n## Practice makes perfect\n\n#### 1. Stop. It's too much!\nCreate a tracker that will stop after the 5th change to a reactive variable.\n\n#### 2. Reactive-Dict ?\nFind out what's ReactiveDict and use it to track changes.","date":"2019-10-04T12:00:07.760Z","updated":"2019-10-04T12:00:07.760Z","path":"chapters/1/reactivity.html","_id":"ciusg1bo40000lrjxv0qz6i9k","comments":1,"layout":"page","content":"<h2 id=\"Introducing-the-tracking-system\"><a href=\"#Introducing-the-tracking-system\" class=\"headerlink\" title=\"Introducing the tracking system\"></a>Introducing the tracking system</h2><p>What is a tracking system ?</p>\n<p>The tracker is one of the concepts that sets Meteor apart from other frameworks out there. As such, before we show you\nwhat it’s all about, we need to make sure you have all the packages that you need installed on your machine.\nFor that, run this in your terminal:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add tracker reactive-<span class=\"keyword\">var</span></div></pre></td></tr></table></figure></p>\n<p>Now open up your browser and type this into the browser console \n(the browser console is available for you in the “developer tools” menu of your browser):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ReactiveVar(<span class=\"string\">'a default value'</span>);</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'a default value'</span></div><div class=\"line\">a.set(<span class=\"string\">'some other value'</span>)</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'some other value'</span></div></pre></td></tr></table></figure></p>\n<p>That does not seem to be very complicated, but you might be asking yourself “what’s the deal with this ?”. \nAllow us to explain it step by step, so you can understand it!</p>\n<p><strong>ReactiveVar</strong> is a reactive-data source and because of that, you can follow its changes at runtime. \nTo be able to do that, we will be using the <em>Tracker</em> feature that got mentioned earlier in the tutorial:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> computation = Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// this is the function that runs it</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.get())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now each time you set some value to the <strong>a</strong> variable, it will get logged into the console. Let’s try it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.set(<span class=\"string\">'something'</span>)</div></pre></td></tr></table></figure></p>\n<p>To stop the execution, use:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">computation.stop()</div></pre></td></tr></table></figure></p>\n<p>Now, if you give values to your data source, the <strong>run</strong> function’s execution will be stopped.</p>\n<p>So, basically:\nWith the <strong>Tracker</strong>, we can track changes occurring to reactive data sources, in real time. \nThat’s everything you need to know for now in order to use this feature.</p>\n<p>What we presented for you was a brief introduction, the <strong>Tracker</strong> tool is way more complex than that. You can read more about them <a href=\"https://docs.meteor.com/api/tracker.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>At its core, tracker is a reactive “watcher”. And it is not unique !\nHowever, this one is very well integrated with Meteor, and this brings down the integration issues you might face when \nworking on projects, which is why we are using it !</p>\n<h2 id=\"Practice-makes-perfect\"><a href=\"#Practice-makes-perfect\" class=\"headerlink\" title=\"Practice makes perfect\"></a>Practice makes perfect</h2><h4 id=\"1-Stop-It’s-too-much\"><a href=\"#1-Stop-It’s-too-much\" class=\"headerlink\" title=\"1. Stop. It’s too much!\"></a>1. Stop. It’s too much!</h4><p>Create a tracker that will stop after the 5th change to a reactive variable.</p>\n<h4 id=\"2-Reactive-Dict\"><a href=\"#2-Reactive-Dict\" class=\"headerlink\" title=\"2. Reactive-Dict ?\"></a>2. Reactive-Dict ?</h4><p>Find out what’s ReactiveDict and use it to track changes.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introducing-the-tracking-system\"><a href=\"#Introducing-the-tracking-system\" class=\"headerlink\" title=\"Introducing the tracking system\"></a>Introducing the tracking system</h2><p>What is a tracking system ?</p>\n<p>The tracker is one of the concepts that sets Meteor apart from other frameworks out there. As such, before we show you\nwhat it’s all about, we need to make sure you have all the packages that you need installed on your machine.\nFor that, run this in your terminal:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add tracker reactive-<span class=\"keyword\">var</span></div></pre></td></tr></table></figure></p>\n<p>Now open up your browser and type this into the browser console \n(the browser console is available for you in the “developer tools” menu of your browser):\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"keyword\">new</span> ReactiveVar(<span class=\"string\">'a default value'</span>);</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'a default value'</span></div><div class=\"line\">a.set(<span class=\"string\">'some other value'</span>)</div><div class=\"line\">a.get() <span class=\"comment\">// will display 'some other value'</span></div></pre></td></tr></table></figure></p>\n<p>That does not seem to be very complicated, but you might be asking yourself “what’s the deal with this ?”. \nAllow us to explain it step by step, so you can understand it!</p>\n<p><strong>ReactiveVar</strong> is a reactive-data source and because of that, you can follow its changes at runtime. \nTo be able to do that, we will be using the <em>Tracker</em> feature that got mentioned earlier in the tutorial:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">var</span> computation = Tracker.autorun(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"comment\">// this is the function that runs it</span></div><div class=\"line\">    <span class=\"built_in\">console</span>.log(a.get())</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Now each time you set some value to the <strong>a</strong> variable, it will get logged into the console. Let’s try it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">a.set(<span class=\"string\">'something'</span>)</div></pre></td></tr></table></figure></p>\n<p>To stop the execution, use:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">computation.stop()</div></pre></td></tr></table></figure></p>\n<p>Now, if you give values to your data source, the <strong>run</strong> function’s execution will be stopped.</p>\n<p>So, basically:\nWith the <strong>Tracker</strong>, we can track changes occurring to reactive data sources, in real time. \nThat’s everything you need to know for now in order to use this feature.</p>\n<p>What we presented for you was a brief introduction, the <strong>Tracker</strong> tool is way more complex than that. You can read more about them <a href=\"https://docs.meteor.com/api/tracker.html\" target=\"_blank\" rel=\"noopener\">here</a>.</p>\n<p>At its core, tracker is a reactive “watcher”. And it is not unique !\nHowever, this one is very well integrated with Meteor, and this brings down the integration issues you might face when \nworking on projects, which is why we are using it !</p>\n<h2 id=\"Practice-makes-perfect\"><a href=\"#Practice-makes-perfect\" class=\"headerlink\" title=\"Practice makes perfect\"></a>Practice makes perfect</h2><h4 id=\"1-Stop-It’s-too-much\"><a href=\"#1-Stop-It’s-too-much\" class=\"headerlink\" title=\"1. Stop. It’s too much!\"></a>1. Stop. It’s too much!</h4><p>Create a tracker that will stop after the 5th change to a reactive variable.</p>\n<h4 id=\"2-Reactive-Dict\"><a href=\"#2-Reactive-Dict\" class=\"headerlink\" title=\"2. Reactive-Dict ?\"></a>2. Reactive-Dict ?</h4><p>Find out what’s ReactiveDict and use it to track changes.</p>\n"},{"title":"Accounts","description":"How Meteor handles users","disqusPage":"Chapter 1: Accounts","_content":"\nIn this part of the tutorial we will discuss about the friendly and simple APIs for:\n\n- Creating an user\n- Login (with Password, Facebook, Google and others)\n- Forgot Password\n- Change Password\n- Reset Password\n\nIn this part we'll focus more on registering and logging in the regular way, but we will also guide you on how you can integrate it with other authentication mechanism.\n\n```\nmeteor add accounts-base accounts-password\n```\nCreate a server side method where we register an user\n\n```js\n// file: /imports/api/users/methods.js\n'user.register' (data) {\n    Accounts.createUser({\n        email: data.email,\n        password: data.password\n    });\n}\n\n// client side, in the browser try this:\nconst data = {email: 'test@test.test', password: '12345'}\nMeteor.call('user.register', email, password, (err, result) => {\n    console.log(err, result) // in case you try it twice, it will throw an exception that email already exists\n});\n\n```\n\nUsers are stored in a collection. You can access this collection via `Meteor.users`. \nIt's the same kind of collection that we learned about in the past chapters.\n\nNow go to your browser's console:\n\n```js\nMeteor.loginWithPassword('test@test.test', '12345', function (err) {\n    if (!err) {\n        console.log('I was called because authentication was a success')\n    } else {\n        console.log(err);\n    }\n})\n```\nYou should be logged in now!\n\n```js\n// in browser console:\nMeteor.user() // will return the current logged in user\nMeteor.userId() // will return the _id of the current logged in user\n```\n\n`Meteor.user()` is a reactive data source, so if you use it in a Tracker, then you will benefit from it's reactivity.\n\nAnother thing you may notice is how `emails` key is structured:\n```js\n[\n    {\n        address: 'meteor@cultofcoders.com',\n        verified: true|false\n    }\n]\n```\n\nThis may seem a bit complicated, but they decided to stick with this, maybe because they wanted to easily satisfy  the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n```js\nMeteor.user().emails[0].address\n```\n\nBut don't worry about this now, when we'll learn how to make this easy, so you won't have to type this everywhere you need an user's email.\n\nYou think '12345' is not a very secure password, and you are correct, let's change it:\n\n```js\n// browser's console\nAccounts.changePassword('12345', 'My1337L333Tpasswurt%', function (err) {\n    if (!err) {\n        console.log('Change password was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nVery nice, now let's try a logout:\n\n```js\n//browser's console\nMeteor.logout(function (err) {\n    if (!err) {\n        console.log('Logout was a success!')\n    } else {\n        console.log(err);\n    }\n});\n// now Meteor.user() and Meteor.userId() will be null\n```\n\nNext time you login, you'll login with your new password.\n\nBut wait, your new password is so complex, you already forgot it.\n\n```js\nAccounts.forgotPassword({ email: 'donut@lover.com' })\n```\n\nNow check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n```\nhttp://localhost:3000/#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7\n```\n\nThe last part is your token.\n\n```js\nAccounts.resetPassword('eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7', 'NewPassword123', function (err) {\n    if (!err) {\n        console.log('Password reset was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nIf you want to read more about this package, you can find documentation for it [here](https://docs.meteor.com/api/accounts.html)\n\n# Important\nIn order to see this in real action, you can access on [github](www.github.com) and clone the project.","source":"chapters/1/users.md","raw":"---\ntitle: Accounts\ndescription: How Meteor handles users\ndisqusPage: 'Chapter 1: Accounts'\n---\n\nIn this part of the tutorial we will discuss about the friendly and simple APIs for:\n\n- Creating an user\n- Login (with Password, Facebook, Google and others)\n- Forgot Password\n- Change Password\n- Reset Password\n\nIn this part we'll focus more on registering and logging in the regular way, but we will also guide you on how you can integrate it with other authentication mechanism.\n\n```\nmeteor add accounts-base accounts-password\n```\nCreate a server side method where we register an user\n\n```js\n// file: /imports/api/users/methods.js\n'user.register' (data) {\n    Accounts.createUser({\n        email: data.email,\n        password: data.password\n    });\n}\n\n// client side, in the browser try this:\nconst data = {email: 'test@test.test', password: '12345'}\nMeteor.call('user.register', email, password, (err, result) => {\n    console.log(err, result) // in case you try it twice, it will throw an exception that email already exists\n});\n\n```\n\nUsers are stored in a collection. You can access this collection via `Meteor.users`. \nIt's the same kind of collection that we learned about in the past chapters.\n\nNow go to your browser's console:\n\n```js\nMeteor.loginWithPassword('test@test.test', '12345', function (err) {\n    if (!err) {\n        console.log('I was called because authentication was a success')\n    } else {\n        console.log(err);\n    }\n})\n```\nYou should be logged in now!\n\n```js\n// in browser console:\nMeteor.user() // will return the current logged in user\nMeteor.userId() // will return the _id of the current logged in user\n```\n\n`Meteor.user()` is a reactive data source, so if you use it in a Tracker, then you will benefit from it's reactivity.\n\nAnother thing you may notice is how `emails` key is structured:\n```js\n[\n    {\n        address: 'meteor@cultofcoders.com',\n        verified: true|false\n    }\n]\n```\n\nThis may seem a bit complicated, but they decided to stick with this, maybe because they wanted to easily satisfy  the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n```js\nMeteor.user().emails[0].address\n```\n\nBut don't worry about this now, when we'll learn how to make this easy, so you won't have to type this everywhere you need an user's email.\n\nYou think '12345' is not a very secure password, and you are correct, let's change it:\n\n```js\n// browser's console\nAccounts.changePassword('12345', 'My1337L333Tpasswurt%', function (err) {\n    if (!err) {\n        console.log('Change password was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nVery nice, now let's try a logout:\n\n```js\n//browser's console\nMeteor.logout(function (err) {\n    if (!err) {\n        console.log('Logout was a success!')\n    } else {\n        console.log(err);\n    }\n});\n// now Meteor.user() and Meteor.userId() will be null\n```\n\nNext time you login, you'll login with your new password.\n\nBut wait, your new password is so complex, you already forgot it.\n\n```js\nAccounts.forgotPassword({ email: 'donut@lover.com' })\n```\n\nNow check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n```\nhttp://localhost:3000/#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7\n```\n\nThe last part is your token.\n\n```js\nAccounts.resetPassword('eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7', 'NewPassword123', function (err) {\n    if (!err) {\n        console.log('Password reset was a success!')\n    } else {\n        console.log(err);\n    }\n})\n```\n\nIf you want to read more about this package, you can find documentation for it [here](https://docs.meteor.com/api/accounts.html)\n\n# Important\nIn order to see this in real action, you can access on [github](www.github.com) and clone the project.","date":"2019-10-04T12:00:07.760Z","updated":"2019-10-04T12:00:07.760Z","path":"chapters/1/users.html","_id":"ciushr1a10001lrjxef1x4k0v","comments":1,"layout":"page","content":"<p>In this part of the tutorial we will discuss about the friendly and simple APIs for:</p>\n<ul>\n<li>Creating an user</li>\n<li>Login (with Password, Facebook, Google and others)</li>\n<li>Forgot Password</li>\n<li>Change Password</li>\n<li>Reset Password</li>\n</ul>\n<p>In this part we’ll focus more on registering and logging in the regular way, but we will also guide you on how you can integrate it with other authentication mechanism.</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</div></pre></td></tr></table></figure>\n<p>Create a server side method where we register an user</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/users/methods.js</span></div><div class=\"line\"><span class=\"string\">'user.register'</span> (data) &#123;</div><div class=\"line\">    Accounts.createUser(&#123;</div><div class=\"line\">        email: data.email,</div><div class=\"line\">        password: data.password</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// client side, in the browser try this:</span></div><div class=\"line\"><span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">email</span>: <span class=\"string\">'test@test.test'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'12345'</span>&#125;</div><div class=\"line\">Meteor.call(<span class=\"string\">'user.register'</span>, email, password, (err, result) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err, result) <span class=\"comment\">// in case you try it twice, it will throw an exception that email already exists</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Users are stored in a collection. You can access this collection via <code>Meteor.users</code>. \nIt’s the same kind of collection that we learned about in the past chapters.</p>\n<p>Now go to your browser’s console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginWithPassword(<span class=\"string\">'test@test.test'</span>, <span class=\"string\">'12345'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called because authentication was a success'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You should be logged in now!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in browser console:</span></div><div class=\"line\">Meteor.user() <span class=\"comment\">// will return the current logged in user</span></div><div class=\"line\">Meteor.userId() <span class=\"comment\">// will return the _id of the current logged in user</span></div></pre></td></tr></table></figure>\n<p><code>Meteor.user()</code> is a reactive data source, so if you use it in a Tracker, then you will benefit from it’s reactivity.</p>\n<p>Another thing you may notice is how <code>emails</code> key is structured:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        address: <span class=\"string\">'meteor@cultofcoders.com'</span>,</div><div class=\"line\">        verified: <span class=\"literal\">true</span>|<span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>This may seem a bit complicated, but they decided to stick with this, maybe because they wanted to easily satisfy  the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.user().emails[<span class=\"number\">0</span>].address</div></pre></td></tr></table></figure></p>\n<p>But don’t worry about this now, when we’ll learn how to make this easy, so you won’t have to type this everywhere you need an user’s email.</p>\n<p>You think ‘12345’ is not a very secure password, and you are correct, let’s change it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser's console</span></div><div class=\"line\">Accounts.changePassword(<span class=\"string\">'12345'</span>, <span class=\"string\">'My1337L333Tpasswurt%'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Change password was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Very nice, now let’s try a logout:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//browser's console</span></div><div class=\"line\">Meteor.logout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Logout was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// now Meteor.user() and Meteor.userId() will be null</span></div></pre></td></tr></table></figure>\n<p>Next time you login, you’ll login with your new password.</p>\n<p>But wait, your new password is so complex, you already forgot it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.forgotPassword(&#123; <span class=\"attr\">email</span>: <span class=\"string\">'donut@lover.com'</span> &#125;)</div></pre></td></tr></table></figure>\n<p>Now check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//localhost:<span class=\"number\">3000</span>/<span class=\"meta\">#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7</span></div></pre></td></tr></table></figure></p>\n<p>The last part is your token.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.resetPassword(<span class=\"string\">'eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7'</span>, <span class=\"string\">'NewPassword123'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Password reset was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you want to read more about this package, you can find documentation for it <a href=\"https://docs.meteor.com/api/accounts.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h1 id=\"Important\"><a href=\"#Important\" class=\"headerlink\" title=\"Important\"></a>Important</h1><p>In order to see this in real action, you can access on <a href=\"www.github.com\">github</a> and clone the project.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>In this part of the tutorial we will discuss about the friendly and simple APIs for:</p>\n<ul>\n<li>Creating an user</li>\n<li>Login (with Password, Facebook, Google and others)</li>\n<li>Forgot Password</li>\n<li>Change Password</li>\n<li>Reset Password</li>\n</ul>\n<p>In this part we’ll focus more on registering and logging in the regular way, but we will also guide you on how you can integrate it with other authentication mechanism.</p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>accounts-<span class=\"keyword\">base </span>accounts-password</div></pre></td></tr></table></figure>\n<p>Create a server side method where we register an user</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/users/methods.js</span></div><div class=\"line\"><span class=\"string\">'user.register'</span> (data) &#123;</div><div class=\"line\">    Accounts.createUser(&#123;</div><div class=\"line\">        email: data.email,</div><div class=\"line\">        password: data.password</div><div class=\"line\">    &#125;);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// client side, in the browser try this:</span></div><div class=\"line\"><span class=\"keyword\">const</span> data = &#123;<span class=\"attr\">email</span>: <span class=\"string\">'test@test.test'</span>, <span class=\"attr\">password</span>: <span class=\"string\">'12345'</span>&#125;</div><div class=\"line\">Meteor.call(<span class=\"string\">'user.register'</span>, email, password, (err, result) =&gt; &#123;</div><div class=\"line\">    <span class=\"built_in\">console</span>.log(err, result) <span class=\"comment\">// in case you try it twice, it will throw an exception that email already exists</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Users are stored in a collection. You can access this collection via <code>Meteor.users</code>. \nIt’s the same kind of collection that we learned about in the past chapters.</p>\n<p>Now go to your browser’s console:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.loginWithPassword(<span class=\"string\">'test@test.test'</span>, <span class=\"string\">'12345'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'I was called because authentication was a success'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You should be logged in now!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in browser console:</span></div><div class=\"line\">Meteor.user() <span class=\"comment\">// will return the current logged in user</span></div><div class=\"line\">Meteor.userId() <span class=\"comment\">// will return the _id of the current logged in user</span></div></pre></td></tr></table></figure>\n<p><code>Meteor.user()</code> is a reactive data source, so if you use it in a Tracker, then you will benefit from it’s reactivity.</p>\n<p>Another thing you may notice is how <code>emails</code> key is structured:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[</div><div class=\"line\">    &#123;</div><div class=\"line\">        address: <span class=\"string\">'meteor@cultofcoders.com'</span>,</div><div class=\"line\">        verified: <span class=\"literal\">true</span>|<span class=\"literal\">false</span></div><div class=\"line\">    &#125;</div><div class=\"line\">]</div></pre></td></tr></table></figure></p>\n<p>This may seem a bit complicated, but they decided to stick with this, maybe because they wanted to easily satisfy  the people\nwho want multiple email addresses on their account. To get the email of your user, you would have to do:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.user().emails[<span class=\"number\">0</span>].address</div></pre></td></tr></table></figure></p>\n<p>But don’t worry about this now, when we’ll learn how to make this easy, so you won’t have to type this everywhere you need an user’s email.</p>\n<p>You think ‘12345’ is not a very secure password, and you are correct, let’s change it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// browser's console</span></div><div class=\"line\">Accounts.changePassword(<span class=\"string\">'12345'</span>, <span class=\"string\">'My1337L333Tpasswurt%'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Change password was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Very nice, now let’s try a logout:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">//browser's console</span></div><div class=\"line\">Meteor.logout(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Logout was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"><span class=\"comment\">// now Meteor.user() and Meteor.userId() will be null</span></div></pre></td></tr></table></figure>\n<p>Next time you login, you’ll login with your new password.</p>\n<p>But wait, your new password is so complex, you already forgot it.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.forgotPassword(&#123; <span class=\"attr\">email</span>: <span class=\"string\">'donut@lover.com'</span> &#125;)</div></pre></td></tr></table></figure>\n<p>Now check your terminal, where you started Meteor, you should see the email you got, you should have a link like:\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"symbol\">http:</span>//localhost:<span class=\"number\">3000</span>/<span class=\"meta\">#/reset-password/eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7</span></div></pre></td></tr></table></figure></p>\n<p>The last part is your token.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Accounts.resetPassword(<span class=\"string\">'eNqDzCvx0F3OA6B0dzmx4i6kLs4-veJ36j3X2Rhxui7'</span>, <span class=\"string\">'NewPassword123'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!err) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">'Password reset was a success!'</span>)</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(err);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>If you want to read more about this package, you can find documentation for it <a href=\"https://docs.meteor.com/api/accounts.html\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h1 id=\"Important\"><a href=\"#Important\" class=\"headerlink\" title=\"Important\"></a>Important</h1><p>In order to see this in real action, you can access on <a href=\"www.github.com\">github</a> and clone the project.</p>\n"},{"title":"Security","description":"Let's talk Security","disqusPage":"Chapter 1: Security","_content":"\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll first show how we can\nsecure our methods and publications, then we will get into some tips and tricks meant to teach you how to handle \nthe security for an evergrowing code base.\n\n## Securing Methods & Publicaions\n\nSo, remember the Methods ?\n\n```js\nMeteor.methods({\n    'post.create'(post) {\n        Posts.insert(post);\n    },\n})\n```\n\nIn every method & publication we can access `this.userId`, this will return either `null`, meaning the user is not authenticated, or a string with the actual userId, something like `8qLGFKSn6szJkzsyG`\n\n## Managing Roles\n\nBased on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,\n\nWe recommend installing the popular package [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\n\n## Security Module\n\nCentralize security in a module:\n\n```js\n// file: /imports/api/security.js\n// example of a module for security\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n    static checkRole(userId, role) {\n        if (!this.hasRole(userId, role)) {\n            throw new Meteor.Error('not-authorized');\n        }\n    }\n\n    static hasRole(userId, role) {\n        return Roles.userIsInRole(userId, role);\n    }\n\n    static checkLoggedIn(userId) {\n        if (!userId) {\n            throw new Meteor.Error('not-authorized', 'You are not authorized');\n        };\n    }\n    \n    // add other business logic checks here that you use throughout the app\n    // something like: isUserAllowedToSeeDocument()\n    // always keep decoupling your code if this class gets huge.\n}\n```\n\nPretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nSimple usage in methods:\n\n```js\nimport {Meteor} from 'meteor/meteor'\nimport {Posts} from '/db';\nimport Security from '/imports/api/security';\n\nMeteor.methods({\n    'secured.post_create'(post) {\n        Security.checkLoggedIn(this.userId);\n        post.userId = this.userId;\n        Posts.insert(post);\n    },\n\n    'secured.post_list' () {\n        return Posts.find().fetch();\n    },\n\n    'secured.post_edit' (_id, postData) {\n        Posts.update({_id: _id, userId: this.userId}, {\n            $set: {\n                title: postData.title,\n                description: postData.description\n            }\n        });\n    },\n\n    'secured.post_remove' (_id){\n        Posts.remove({_id: _id, userId: this.userId});\n    },\n\n    'secured.post_get' (_id) {\n        return Posts.findOne(_id);\n    }\n});\n```\n\nSimple usage in publications:\n\n```js\n\nimport Security from '/imports/api/security.js';\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.publish('posts', function () {\n    return Posts.find({userId: this.userId});\n})\n```\n\nThat's it. With this knowledge you can build more secured apps!\n","source":"chapters/1/security.md","raw":"---\ntitle: Security\ndescription: Let's talk Security\ndisqusPage: 'Chapter 1: Security'\n---\n\nSecurity is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We'll first show how we can\nsecure our methods and publications, then we will get into some tips and tricks meant to teach you how to handle \nthe security for an evergrowing code base.\n\n## Securing Methods & Publicaions\n\nSo, remember the Methods ?\n\n```js\nMeteor.methods({\n    'post.create'(post) {\n        Posts.insert(post);\n    },\n})\n```\n\nIn every method & publication we can access `this.userId`, this will return either `null`, meaning the user is not authenticated, or a string with the actual userId, something like `8qLGFKSn6szJkzsyG`\n\n## Managing Roles\n\nBased on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,\n\nWe recommend installing the popular package [alanning:roles](https://atmospherejs.com/alanning/roles):\n\n```\nmeteor add alanning:roles\n```\n\n\n## Security Module\n\nCentralize security in a module:\n\n```js\n// file: /imports/api/security.js\n// example of a module for security\nimport { Roles } from 'meteor/alanning:roles';\n\nexport default class Security {\n    static checkRole(userId, role) {\n        if (!this.hasRole(userId, role)) {\n            throw new Meteor.Error('not-authorized');\n        }\n    }\n\n    static hasRole(userId, role) {\n        return Roles.userIsInRole(userId, role);\n    }\n\n    static checkLoggedIn(userId) {\n        if (!userId) {\n            throw new Meteor.Error('not-authorized', 'You are not authorized');\n        };\n    }\n    \n    // add other business logic checks here that you use throughout the app\n    // something like: isUserAllowedToSeeDocument()\n    // always keep decoupling your code if this class gets huge.\n}\n```\n\nPretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!\n\nSimple usage in methods:\n\n```js\nimport {Meteor} from 'meteor/meteor'\nimport {Posts} from '/db';\nimport Security from '/imports/api/security';\n\nMeteor.methods({\n    'secured.post_create'(post) {\n        Security.checkLoggedIn(this.userId);\n        post.userId = this.userId;\n        Posts.insert(post);\n    },\n\n    'secured.post_list' () {\n        return Posts.find().fetch();\n    },\n\n    'secured.post_edit' (_id, postData) {\n        Posts.update({_id: _id, userId: this.userId}, {\n            $set: {\n                title: postData.title,\n                description: postData.description\n            }\n        });\n    },\n\n    'secured.post_remove' (_id){\n        Posts.remove({_id: _id, userId: this.userId});\n    },\n\n    'secured.post_get' (_id) {\n        return Posts.findOne(_id);\n    }\n});\n```\n\nSimple usage in publications:\n\n```js\n\nimport Security from '/imports/api/security.js';\nimport {Meteor} from \"meteor/meteor\";\n\nMeteor.publish('posts', function () {\n    return Posts.find({userId: this.userId});\n})\n```\n\nThat's it. With this knowledge you can build more secured apps!\n","date":"2019-10-04T12:00:07.760Z","updated":"2019-10-04T12:00:07.760Z","path":"chapters/1/security.html","_id":"ciuuujzzk00001gjxm98tz609","comments":1,"layout":"page","content":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll first show how we can\nsecure our methods and publications, then we will get into some tips and tricks meant to teach you how to handle \nthe security for an evergrowing code base.</p>\n<h2 id=\"Securing-Methods-amp-Publicaions\"><a href=\"#Securing-Methods-amp-Publicaions\" class=\"headerlink\" title=\"Securing Methods &amp; Publicaions\"></a>Securing Methods &amp; Publicaions</h2><p>So, remember the Methods ?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'post.create'</span>(post) &#123;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In every method &amp; publication we can access <code>this.userId</code>, this will return either <code>null</code>, meaning the user is not authenticated, or a string with the actual userId, something like <code>8qLGFKSn6szJkzsyG</code></p>\n<h2 id=\"Managing-Roles\"><a href=\"#Managing-Roles\" class=\"headerlink\" title=\"Managing Roles\"></a>Managing Roles</h2><p>Based on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,</p>\n<p>We recommend installing the popular package <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"noopener\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></div></pre></td></tr></table></figure>\n<h2 id=\"Security-Module\"><a href=\"#Security-Module\" class=\"headerlink\" title=\"Security Module\"></a>Security Module</h2><p>Centralize security in a module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/security.js</span></div><div class=\"line\"><span class=\"comment\">// example of a module for security</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/alanning:roles'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> checkRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> hasRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Roles.userIsInRole(userId, role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> checkLoggedIn(userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></div><div class=\"line\">    <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></div><div class=\"line\">    <span class=\"comment\">// always keep decoupling your code if this class gets huge.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>Simple usage in methods:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Posts&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/db'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'secured.post_create'</span>(post) &#123;</div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        post.userId = <span class=\"keyword\">this</span>.userId;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_list'</span> () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_edit'</span> (_id, postData) &#123;</div><div class=\"line\">        Posts.update(&#123;<span class=\"attr\">_id</span>: _id, <span class=\"attr\">userId</span>: <span class=\"keyword\">this</span>.userId&#125;, &#123;</div><div class=\"line\">            $set: &#123;</div><div class=\"line\">                title: postData.title,</div><div class=\"line\">                description: postData.description</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_remove'</span> (_id)&#123;</div><div class=\"line\">        Posts.remove(&#123;<span class=\"attr\">_id</span>: _id, <span class=\"attr\">userId</span>: <span class=\"keyword\">this</span>.userId&#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_get'</span> (_id) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Posts.findOne(_id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Simple usage in publications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"meteor/meteor\"</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find(&#123;<span class=\"attr\">userId</span>: <span class=\"keyword\">this</span>.userId&#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That’s it. With this knowledge you can build more secured apps!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Security is a very important aspect of any application. When your code-base grows,\nyou need to more and more careful on how you handle this. We’ll first show how we can\nsecure our methods and publications, then we will get into some tips and tricks meant to teach you how to handle \nthe security for an evergrowing code base.</p>\n<h2 id=\"Securing-Methods-amp-Publicaions\"><a href=\"#Securing-Methods-amp-Publicaions\" class=\"headerlink\" title=\"Securing Methods &amp; Publicaions\"></a>Securing Methods &amp; Publicaions</h2><p>So, remember the Methods ?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'post.create'</span>(post) &#123;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In every method &amp; publication we can access <code>this.userId</code>, this will return either <code>null</code>, meaning the user is not authenticated, or a string with the actual userId, something like <code>8qLGFKSn6szJkzsyG</code></p>\n<h2 id=\"Managing-Roles\"><a href=\"#Managing-Roles\" class=\"headerlink\" title=\"Managing Roles\"></a>Managing Roles</h2><p>Based on the userId you have the ability to check if the user is logged in, maybe you have multiple roles in the system,</p>\n<p>We recommend installing the popular package <a href=\"https://atmospherejs.com/alanning/roles\" target=\"_blank\" rel=\"noopener\">alanning:roles</a>:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> alanning:roles</span></div></pre></td></tr></table></figure>\n<h2 id=\"Security-Module\"><a href=\"#Security-Module\" class=\"headerlink\" title=\"Security Module\"></a>Security Module</h2><p>Centralize security in a module:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/security.js</span></div><div class=\"line\"><span class=\"comment\">// example of a module for security</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Roles &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/alanning:roles'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Security</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> checkRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.hasRole(userId, role)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> hasRole(userId, role) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Roles.userIsInRole(userId, role);</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">static</span> checkLoggedIn(userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-authorized'</span>, <span class=\"string\">'You are not authorized'</span>);</div><div class=\"line\">        &#125;;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"comment\">// add other business logic checks here that you use throughout the app</span></div><div class=\"line\">    <span class=\"comment\">// something like: isUserAllowedToSeeDocument()</span></div><div class=\"line\">    <span class=\"comment\">// always keep decoupling your code if this class gets huge.</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Pretty straight forward right ? The reason we do it like this, by centralizing security in one place,\nis to remove boilerplate code inside our methods and keep separation of concerns. You can do it however you want it, there is no right or wrong way to do it,\ndepends on your use-case, but we believe that it is easier to maintain, and newly onboarded developers were writing secure\ncode right from the start!</p>\n<p>Simple usage in methods:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Posts&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/db'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'secured.post_create'</span>(post) &#123;</div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        post.userId = <span class=\"keyword\">this</span>.userId;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_list'</span> () &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Posts.find().fetch();</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_edit'</span> (_id, postData) &#123;</div><div class=\"line\">        Posts.update(&#123;<span class=\"attr\">_id</span>: _id, <span class=\"attr\">userId</span>: <span class=\"keyword\">this</span>.userId&#125;, &#123;</div><div class=\"line\">            $set: &#123;</div><div class=\"line\">                title: postData.title,</div><div class=\"line\">                description: postData.description</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_remove'</span> (_id)&#123;</div><div class=\"line\">        Posts.remove(&#123;<span class=\"attr\">_id</span>: _id, <span class=\"attr\">userId</span>: <span class=\"keyword\">this</span>.userId&#125;);</div><div class=\"line\">    &#125;,</div><div class=\"line\"></div><div class=\"line\">    <span class=\"string\">'secured.post_get'</span> (_id) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> Posts.findOne(_id);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Simple usage in publications:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">\"meteor/meteor\"</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.publish(<span class=\"string\">'posts'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Posts.find(&#123;<span class=\"attr\">userId</span>: <span class=\"keyword\">this</span>.userId&#125;);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>That’s it. With this knowledge you can build more secured apps!</p>\n"},{"title":"Meteor Tips & Tricks","description":"Some interesting tips & tricks that Meteor has to offer.","disqusPage":"Chapter 1: Meteor Tips & Tricks","_content":"\n## Environment Variables\n\nMeteor uses these variables to know which MongoDB database should it connect to, how it should send emails, and many more:\n\n- MONGO_URL : you don't have to have this by default, but if you connect to another database here is where you would put it\n- MAIL_URL : the smtp:// to your email, we'll show you in a bit how easy it is to set it up.\n- METEOR_PROFILE : if set to 1, you'll see how much time meteor spends on the building/rebuilding process\n- ROOT_URL : the real path of Meteor, default is http://localhost:3000\n\nTo specify these variables you should do the following:\n\n```\nROOT_URL=\"http://localhost:3000\" MAIL_URL=\"smtp://gmail.com:25\" meteor run\n```\n\n## Run Meteor Easy\n\nInside your Meteor folder you have a file \"package.json\", that package keeps track of what npm packages you use, and some other\ncool stuff. So for example, if you would want to start an app with diff settings like MAIL_URL, etc, you would do something like this:\n```json\n{\n  ...\n  \"scripts\": {\n    \"start\": \"MONGO_URL=mongodb://localhost:27017/meteor-tuts meteor run --settings .deploy/local.json --port 3000\",\n    \"deploy\": \"We'll get into that in another chapter ;)\"\n  }\n}\n```\n\n```\n// in your terminal:\nnpm run start\n```\n\n## Meteor.wrapAsync\n\nYou will use this to be able to do async operations in your methods. Let's say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. So try this:\n \n```js\nMeteor.methods({\n    'something_async'  () {\n        coolLibrary.coolFunction((err, res) => {\n            // gets here after some time.\n        })\n    }\n})\n```\n\nYou may have a very weird error saying that code cannot run outside \"Fibers\". Don't want to get into details on that, but here's how you would do it:\n\n```js\nMeteor.methods({\n    'something_async': function () {\n        const run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);\n        // the second argument is to provide context to the function, \n        // if that function uses \"this\" inside it, then it will fail without the context specified.\n        \n        try {\n            const results = run(\"some-argument\");\n            return results;\n            // if the callback accepts err then res (standard), then result will be put in sync into results.\n        } catch (e) {\n            // if an exception occurs, that exception will be caught here\n            // and you can treat it by dispatching a Meteor.Error\n        }\n    }\n})\n```\n\n## Timers\n\nYou may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:\n\n```js\nMeteor.methods({\n    'something_async' () {\n        Meteor.setInterval(() => {\n            console.log('tick');\n        }, 1000);\n    }\n})\n```\n\nAfter you have called the method, you will get a 'tick' in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!\n\n## Email\n\nRemember the emails we received in console when we were talking about Users ? Well, a while back, they used this module:\nIf you don't specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?\n\nIf you want an email, we recommend: http://www.mailgun.com/ <- Free for < 10,000 per month\n\n```\n// we use %40 to represent @ because the username, because they need to be URI encoded\nMAIL_URL=\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\" meteor run\n```\n\n```js\n// Most Basic Usage\nimport { Email } from 'meteor/email';\n\nEmail.send({\n  to: 'you@meteor-tuts.com',\n  from: 'no-reply@meteor-tuts.com',\n  subject: \"I'm an email\",\n  html: '<p>Hello!</p>'\n});\n```\n\nRead more: http://docs.meteor.com/api/email.html\n\n## Meteor.defer\n\nSometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:\n\n```js\nMeteor.methods({\n    'action_plus_email': function () {\n        // do something\n        \n        Meteor.defer(() => {\n            Email.send(...)\n        })\n        \n        return 'hello there, user';\n    }\n})\n```\n\nMeteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a \"background\" job in a fiber.\n\n## HTTP\n\nWant to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.\n\nhttp://docs.meteor.com/api/http.html\n\n```js\nMeteor.methods({\n    'an_api_call': function () {\n        const data = HTTP.get('https://jsonplaceholder.typicode.com/posts/1')\n        \n        console.log(data);\n        \n        return data;\n    }\n})\n```\n\n## Assets\n\nhttp://docs.meteor.com/api/assets.html\n\nGo ahead, put something in \"/private/some_folder/test.txt\":\n\n```\n// meteor shell\nAssets.getText('/some_folder/test.txt')\n```\n\nYou would use this when, for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can privately use on the server.\n\n## Meteor Settings\n\nhttps://docs.meteor.com/api/core.html#Meteor-settings\n\n```json\n// file: .deploy/local.json\n{\n    \"public\": {\n        \"visible\": \"Something that the client can see\"\n    },\n    \"private\": {\n        \"API_KEY\": \"XXX\"\n    }\n}\n```\n\nYou can access the settings from the client-side:\n```\nMeteor.settings.public.visible\n```\n\nYou can access all settings from the server-side:\n```\nMeteor.settings.private.API_KEY\n```\n","source":"chapters/1/meteorSnacks.md","raw":"---\ntitle: Meteor Tips & Tricks\ndescription: Some interesting tips & tricks that Meteor has to offer.\ndisqusPage: 'Chapter 1: Meteor Tips & Tricks'\n---\n\n## Environment Variables\n\nMeteor uses these variables to know which MongoDB database should it connect to, how it should send emails, and many more:\n\n- MONGO_URL : you don't have to have this by default, but if you connect to another database here is where you would put it\n- MAIL_URL : the smtp:// to your email, we'll show you in a bit how easy it is to set it up.\n- METEOR_PROFILE : if set to 1, you'll see how much time meteor spends on the building/rebuilding process\n- ROOT_URL : the real path of Meteor, default is http://localhost:3000\n\nTo specify these variables you should do the following:\n\n```\nROOT_URL=\"http://localhost:3000\" MAIL_URL=\"smtp://gmail.com:25\" meteor run\n```\n\n## Run Meteor Easy\n\nInside your Meteor folder you have a file \"package.json\", that package keeps track of what npm packages you use, and some other\ncool stuff. So for example, if you would want to start an app with diff settings like MAIL_URL, etc, you would do something like this:\n```json\n{\n  ...\n  \"scripts\": {\n    \"start\": \"MONGO_URL=mongodb://localhost:27017/meteor-tuts meteor run --settings .deploy/local.json --port 3000\",\n    \"deploy\": \"We'll get into that in another chapter ;)\"\n  }\n}\n```\n\n```\n// in your terminal:\nnpm run start\n```\n\n## Meteor.wrapAsync\n\nYou will use this to be able to do async operations in your methods. Let's say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. So try this:\n \n```js\nMeteor.methods({\n    'something_async'  () {\n        coolLibrary.coolFunction((err, res) => {\n            // gets here after some time.\n        })\n    }\n})\n```\n\nYou may have a very weird error saying that code cannot run outside \"Fibers\". Don't want to get into details on that, but here's how you would do it:\n\n```js\nMeteor.methods({\n    'something_async': function () {\n        const run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);\n        // the second argument is to provide context to the function, \n        // if that function uses \"this\" inside it, then it will fail without the context specified.\n        \n        try {\n            const results = run(\"some-argument\");\n            return results;\n            // if the callback accepts err then res (standard), then result will be put in sync into results.\n        } catch (e) {\n            // if an exception occurs, that exception will be caught here\n            // and you can treat it by dispatching a Meteor.Error\n        }\n    }\n})\n```\n\n## Timers\n\nYou may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:\n\n```js\nMeteor.methods({\n    'something_async' () {\n        Meteor.setInterval(() => {\n            console.log('tick');\n        }, 1000);\n    }\n})\n```\n\nAfter you have called the method, you will get a 'tick' in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!\n\n## Email\n\nRemember the emails we received in console when we were talking about Users ? Well, a while back, they used this module:\nIf you don't specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?\n\nIf you want an email, we recommend: http://www.mailgun.com/ <- Free for < 10,000 per month\n\n```\n// we use %40 to represent @ because the username, because they need to be URI encoded\nMAIL_URL=\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\" meteor run\n```\n\n```js\n// Most Basic Usage\nimport { Email } from 'meteor/email';\n\nEmail.send({\n  to: 'you@meteor-tuts.com',\n  from: 'no-reply@meteor-tuts.com',\n  subject: \"I'm an email\",\n  html: '<p>Hello!</p>'\n});\n```\n\nRead more: http://docs.meteor.com/api/email.html\n\n## Meteor.defer\n\nSometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:\n\n```js\nMeteor.methods({\n    'action_plus_email': function () {\n        // do something\n        \n        Meteor.defer(() => {\n            Email.send(...)\n        })\n        \n        return 'hello there, user';\n    }\n})\n```\n\nMeteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a \"background\" job in a fiber.\n\n## HTTP\n\nWant to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.\n\nhttp://docs.meteor.com/api/http.html\n\n```js\nMeteor.methods({\n    'an_api_call': function () {\n        const data = HTTP.get('https://jsonplaceholder.typicode.com/posts/1')\n        \n        console.log(data);\n        \n        return data;\n    }\n})\n```\n\n## Assets\n\nhttp://docs.meteor.com/api/assets.html\n\nGo ahead, put something in \"/private/some_folder/test.txt\":\n\n```\n// meteor shell\nAssets.getText('/some_folder/test.txt')\n```\n\nYou would use this when, for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can privately use on the server.\n\n## Meteor Settings\n\nhttps://docs.meteor.com/api/core.html#Meteor-settings\n\n```json\n// file: .deploy/local.json\n{\n    \"public\": {\n        \"visible\": \"Something that the client can see\"\n    },\n    \"private\": {\n        \"API_KEY\": \"XXX\"\n    }\n}\n```\n\nYou can access the settings from the client-side:\n```\nMeteor.settings.public.visible\n```\n\nYou can access all settings from the server-side:\n```\nMeteor.settings.private.API_KEY\n```\n","date":"2019-10-04T12:00:07.758Z","updated":"2019-10-04T12:00:07.758Z","path":"chapters/1/meteorSnacks.html","_id":"ciuuvhqrw0000a0jx8hoyytyy","comments":1,"layout":"page","content":"<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>Meteor uses these variables to know which MongoDB database should it connect to, how it should send emails, and many more:</p>\n<ul>\n<li>MONGO_URL : you don’t have to have this by default, but if you connect to another database here is where you would put it</li>\n<li>MAIL_URL : the smtp:// to your email, we’ll show you in a bit how easy it is to set it up.</li>\n<li>METEOR_PROFILE : if set to 1, you’ll see how much time meteor spends on the building/rebuilding process</li>\n<li>ROOT_URL : the real path of Meteor, default is <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></li>\n</ul>\n<p>To specify these variables you should do the following:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROOT_URL=<span class=\"string\">\"http://localhost:3000\"</span> MAIL_URL=<span class=\"string\">\"smtp://gmail.com:25\"</span> meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<h2 id=\"Run-Meteor-Easy\"><a href=\"#Run-Meteor-Easy\" class=\"headerlink\" title=\"Run Meteor Easy\"></a>Run Meteor Easy</h2><p>Inside your Meteor folder you have a file “package.json”, that package keeps track of what npm packages you use, and some other\ncool stuff. So for example, if you would want to start an app with diff settings like MAIL_URL, etc, you would do something like this:\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    \"start\": \"MONGO_URL=mongodb://localhost:27017/meteor-tuts meteor run --settings .deploy/local.json --port 3000\",</div><div class=\"line\">    \"deploy\": \"We'll get into that in another chapter ;)\"</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your terminal:</span></div><div class=\"line\">npm <span class=\"built_in\">run</span> start</div></pre></td></tr></table></figure>\n<h2 id=\"Meteor-wrapAsync\"><a href=\"#Meteor-wrapAsync\" class=\"headerlink\" title=\"Meteor.wrapAsync\"></a>Meteor.wrapAsync</h2><p>You will use this to be able to do async operations in your methods. Let’s say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. So try this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>  () &#123;</div><div class=\"line\">        coolLibrary.coolFunction(<span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// gets here after some time.</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You may have a very weird error saying that code cannot run outside “Fibers”. Don’t want to get into details on that, but here’s how you would do it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);</div><div class=\"line\">        <span class=\"comment\">// the second argument is to provide context to the function, </span></div><div class=\"line\">        <span class=\"comment\">// if that function uses \"this\" inside it, then it will fail without the context specified.</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> results = run(<span class=\"string\">\"some-argument\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> results;</div><div class=\"line\">            <span class=\"comment\">// if the callback accepts err then res (standard), then result will be put in sync into results.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"comment\">// if an exception occurs, that exception will be caught here</span></div><div class=\"line\">            <span class=\"comment\">// and you can treat it by dispatching a Meteor.Error</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h2><p>You may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span> () &#123;</div><div class=\"line\">        Meteor.setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>After you have called the method, you will get a ‘tick’ in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!</p>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p>Remember the emails we received in console when we were talking about Users ? Well, a while back, they used this module:\nIf you don’t specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?</p>\n<p>If you want an email, we recommend: <a href=\"http://www.mailgun.com/\" target=\"_blank\" rel=\"noopener\">http://www.mailgun.com/</a> &lt;- Free for &lt; 10,000 per month</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we use %40 to represent @ because the username, because they need to be URI encoded</span></div><div class=\"line\">MAIL_URL=<span class=\"string\">\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\"</span> meteor <span class=\"built_in\">run</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Most Basic Usage</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Email &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"></div><div class=\"line\">Email.send(&#123;</div><div class=\"line\">  to: <span class=\"string\">'you@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"keyword\">from</span>: <span class=\"string\">'no-reply@meteor-tuts.com'</span>,</div><div class=\"line\">  subject: <span class=\"string\">\"I'm an email\"</span>,</div><div class=\"line\">  html: <span class=\"string\">'&lt;p&gt;Hello!&lt;/p&gt;'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Read more: <a href=\"http://docs.meteor.com/api/email.html\" target=\"_blank\" rel=\"noopener\">http://docs.meteor.com/api/email.html</a></p>\n<h2 id=\"Meteor-defer\"><a href=\"#Meteor-defer\" class=\"headerlink\" title=\"Meteor.defer\"></a>Meteor.defer</h2><p>Sometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'action_plus_email'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">        </div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(...)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello there, user'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Meteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a “background” job in a fiber.</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>Want to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.</p>\n<p><a href=\"http://docs.meteor.com/api/http.html\" target=\"_blank\" rel=\"noopener\">http://docs.meteor.com/api/http.html</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'an_api_call'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> data = HTTP.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Assets\"><a href=\"#Assets\" class=\"headerlink\" title=\"Assets\"></a>Assets</h2><p><a href=\"http://docs.meteor.com/api/assets.html\" target=\"_blank\" rel=\"noopener\">http://docs.meteor.com/api/assets.html</a></p>\n<p>Go ahead, put something in “/private/some_folder/test.txt”:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// meteor <span class=\"keyword\">shell</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">Assets.getText(<span class=\"string\">'/some_folder/test.txt'</span>)</span></div></pre></td></tr></table></figure>\n<p>You would use this when, for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can privately use on the server.</p>\n<h2 id=\"Meteor-Settings\"><a href=\"#Meteor-Settings\" class=\"headerlink\" title=\"Meteor Settings\"></a>Meteor Settings</h2><p><a href=\"https://docs.meteor.com/api/core.html#Meteor-settings\" target=\"_blank\" rel=\"noopener\">https://docs.meteor.com/api/core.html#Meteor-settings</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: .deploy/local.json</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"public\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"visible\"</span>: <span class=\"string\">\"Something that the client can see\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"private\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"API_KEY\"</span>: <span class=\"string\">\"XXX\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can access the settings from the client-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.public</span><span class=\"selector-class\">.visible</span></div></pre></td></tr></table></figure></p>\n<p>You can access all settings from the server-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.private</span><span class=\"selector-class\">.API_KEY</span></div></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Environment-Variables\"><a href=\"#Environment-Variables\" class=\"headerlink\" title=\"Environment Variables\"></a>Environment Variables</h2><p>Meteor uses these variables to know which MongoDB database should it connect to, how it should send emails, and many more:</p>\n<ul>\n<li>MONGO_URL : you don’t have to have this by default, but if you connect to another database here is where you would put it</li>\n<li>MAIL_URL : the smtp:// to your email, we’ll show you in a bit how easy it is to set it up.</li>\n<li>METEOR_PROFILE : if set to 1, you’ll see how much time meteor spends on the building/rebuilding process</li>\n<li>ROOT_URL : the real path of Meteor, default is <a href=\"http://localhost:3000\" target=\"_blank\" rel=\"noopener\">http://localhost:3000</a></li>\n</ul>\n<p>To specify these variables you should do the following:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">ROOT_URL=<span class=\"string\">\"http://localhost:3000\"</span> MAIL_URL=<span class=\"string\">\"smtp://gmail.com:25\"</span> meteor <span class=\"keyword\">run</span><span class=\"bash\"></span></div></pre></td></tr></table></figure>\n<h2 id=\"Run-Meteor-Easy\"><a href=\"#Run-Meteor-Easy\" class=\"headerlink\" title=\"Run Meteor Easy\"></a>Run Meteor Easy</h2><p>Inside your Meteor folder you have a file “package.json”, that package keeps track of what npm packages you use, and some other\ncool stuff. So for example, if you would want to start an app with diff settings like MAIL_URL, etc, you would do something like this:\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  \"scripts\": &#123;</div><div class=\"line\">    \"start\": \"MONGO_URL=mongodb://localhost:27017/meteor-tuts meteor run --settings .deploy/local.json --port 3000\",</div><div class=\"line\">    \"deploy\": \"We'll get into that in another chapter ;)\"</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// in your terminal:</span></div><div class=\"line\">npm <span class=\"built_in\">run</span> start</div></pre></td></tr></table></figure>\n<h2 id=\"Meteor-wrapAsync\"><a href=\"#Meteor-wrapAsync\" class=\"headerlink\" title=\"Meteor.wrapAsync\"></a>Meteor.wrapAsync</h2><p>You will use this to be able to do async operations in your methods. Let’s say you use S3, or an npm library, that is not in sync,\n it requires you to specify a callback. So try this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>  () &#123;</div><div class=\"line\">        coolLibrary.coolFunction(<span class=\"function\">(<span class=\"params\">err, res</span>) =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"comment\">// gets here after some time.</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>You may have a very weird error saying that code cannot run outside “Fibers”. Don’t want to get into details on that, but here’s how you would do it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> run = Meteor.wrapAsync(coolLibrary.coolFunction, coolLibrary);</div><div class=\"line\">        <span class=\"comment\">// the second argument is to provide context to the function, </span></div><div class=\"line\">        <span class=\"comment\">// if that function uses \"this\" inside it, then it will fail without the context specified.</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">try</span> &#123;</div><div class=\"line\">            <span class=\"keyword\">const</span> results = run(<span class=\"string\">\"some-argument\"</span>);</div><div class=\"line\">            <span class=\"keyword\">return</span> results;</div><div class=\"line\">            <span class=\"comment\">// if the callback accepts err then res (standard), then result will be put in sync into results.</span></div><div class=\"line\">        &#125; <span class=\"keyword\">catch</span> (e) &#123;</div><div class=\"line\">            <span class=\"comment\">// if an exception occurs, that exception will be caught here</span></div><div class=\"line\">            <span class=\"comment\">// and you can treat it by dispatching a Meteor.Error</span></div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Timers\"><a href=\"#Timers\" class=\"headerlink\" title=\"Timers\"></a>Timers</h2><p>You may already be familiar, with setTimeout, setInterval from JavaScript, well, Meteor has them too,\nbut they will run inside fibers. For example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'something_async'</span> () &#123;</div><div class=\"line\">        Meteor.setInterval(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">'tick'</span>);</div><div class=\"line\">        &#125;, <span class=\"number\">1000</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>After you have called the method, you will get a ‘tick’ in your console, every 1 second. You will not be able to stop this, \nunless you restart or implement a handler that stops it, so be careful!</p>\n<h2 id=\"Email\"><a href=\"#Email\" class=\"headerlink\" title=\"Email\"></a>Email</h2><p>Remember the emails we received in console when we were talking about Users ? Well, a while back, they used this module:\nIf you don’t specify MAIL_URL, all Emails that you send, will go to your console. Pretty cool, right?</p>\n<p>If you want an email, we recommend: <a href=\"http://www.mailgun.com/\" target=\"_blank\" rel=\"noopener\">http://www.mailgun.com/</a> &lt;- Free for &lt; 10,000 per month</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// we use %40 to represent @ because the username, because they need to be URI encoded</span></div><div class=\"line\">MAIL_URL=<span class=\"string\">\"smtp://postmaster%40yourdomain.com:b23f5872166c187ad5b5f1abece071b2@smtp.mailgun.org:25\"</span> meteor <span class=\"built_in\">run</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// Most Basic Usage</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; Email &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"></div><div class=\"line\">Email.send(&#123;</div><div class=\"line\">  to: <span class=\"string\">'you@meteor-tuts.com'</span>,</div><div class=\"line\">  <span class=\"keyword\">from</span>: <span class=\"string\">'no-reply@meteor-tuts.com'</span>,</div><div class=\"line\">  subject: <span class=\"string\">\"I'm an email\"</span>,</div><div class=\"line\">  html: <span class=\"string\">'&lt;p&gt;Hello!&lt;/p&gt;'</span></div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Read more: <a href=\"http://docs.meteor.com/api/email.html\" target=\"_blank\" rel=\"noopener\">http://docs.meteor.com/api/email.html</a></p>\n<h2 id=\"Meteor-defer\"><a href=\"#Meteor-defer\" class=\"headerlink\" title=\"Meteor.defer\"></a>Meteor.defer</h2><p>Sometimes you want to do something, and then notify the user by email. However, if you use SMTP, sometimes\nit takes between 50ms to 1s for the mail to be fully sent, and will give the user the impression that your Meteor app is slow. \nThis is why you should use this function:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'action_plus_email'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"comment\">// do something</span></div><div class=\"line\">        </div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(...)</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">'hello there, user'</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Meteor.defer(fn) is same as Meteor.setTimeout(fn, 0), basically it will do a “background” job in a fiber.</p>\n<h2 id=\"HTTP\"><a href=\"#HTTP\" class=\"headerlink\" title=\"HTTP\"></a>HTTP</h2><p>Want to use an external REST API ? No problem for Meteor, it has a super simple HTTP package built-in.</p>\n<p><a href=\"http://docs.meteor.com/api/http.html\" target=\"_blank\" rel=\"noopener\">http://docs.meteor.com/api/http.html</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'an_api_call'</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> data = HTTP.get(<span class=\"string\">'https://jsonplaceholder.typicode.com/posts/1'</span>)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"built_in\">console</span>.log(data);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> data;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Assets\"><a href=\"#Assets\" class=\"headerlink\" title=\"Assets\"></a>Assets</h2><p><a href=\"http://docs.meteor.com/api/assets.html\" target=\"_blank\" rel=\"noopener\">http://docs.meteor.com/api/assets.html</a></p>\n<p>Go ahead, put something in “/private/some_folder/test.txt”:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// meteor <span class=\"keyword\">shell</span><span class=\"bash\"></span></div><div class=\"line\"><span class=\"bash\">Assets.getText(<span class=\"string\">'/some_folder/test.txt'</span>)</span></div></pre></td></tr></table></figure>\n<p>You would use this when, for example, you have a business, logic-packed csv, or .xls file.\nOr you may have a JSON with car models and makes. \nThe idea is that you can have any type of file, even binary, that you can privately use on the server.</p>\n<h2 id=\"Meteor-Settings\"><a href=\"#Meteor-Settings\" class=\"headerlink\" title=\"Meteor Settings\"></a>Meteor Settings</h2><p><a href=\"https://docs.meteor.com/api/core.html#Meteor-settings\" target=\"_blank\" rel=\"noopener\">https://docs.meteor.com/api/core.html#Meteor-settings</a></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: .deploy/local.json</div><div class=\"line\">&#123;</div><div class=\"line\">    <span class=\"attr\">\"public\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"visible\"</span>: <span class=\"string\">\"Something that the client can see\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"attr\">\"private\"</span>: &#123;</div><div class=\"line\">        <span class=\"attr\">\"API_KEY\"</span>: <span class=\"string\">\"XXX\"</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>You can access the settings from the client-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.public</span><span class=\"selector-class\">.visible</span></div></pre></td></tr></table></figure></p>\n<p>You can access all settings from the server-side:\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor<span class=\"selector-class\">.settings</span><span class=\"selector-class\">.private</span><span class=\"selector-class\">.API_KEY</span></div></pre></td></tr></table></figure></p>\n"},{"title":"The View Layer","description":"Understanding how to build interfaces","disqusPage":"Chapter 2: Intro","_content":"\n## Introduction\n\nIn the previous chapter we learned how to harness Meteor's powers. But we didn't see anything actually happening in the UI (The View Layer).\n\nMeteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it's up to you.\n\nDon't get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. \n\n## Brief history\n\nWhen Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. [http://blazejs.org/](http://blazejs.org/). In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn't good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.\n\nEven if Blaze is one of the most friendliest View Layers you'll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.\n\n## What can we use?\n\nFrom a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.\n\nTimes changed, new View Layers appeared that support reactivity such as:\n- React\n- Vue.JS\n- Angular2\n- etc\n\n\nIn terms of styling the UI, we are going to use CSS and to make our life easier, we can opt for a pre-processor:\n- SASS\n- LESS\n- Stylus\n- etc\n\nWe could also use a front-end framework like: \n- Bootstrap\n- Foundation, \n- Materialize\n- Vuetify\n- etc\n\nEach has advantages and disadvantages. So question now is what to choose?\n\n### UI library/framework\n\nOur current recommendation is: [React](https://facebook.github.io/react/)\n\nReasons for this choice:\n\n- Modular\n- A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive\n- Lightning Fast \n- Maintained by Facebook\n\nHowever, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It's a race. It's the survival of the fittest. Time will decide. For now, pick a technology\nand master it. \n\nKeep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and do the job.\n\n### CSS\n\nOur current recommendation is to use SASS (SCSS) and no framework. Probably you are asking why we are not opting for a framework. The reason is that a framework like boostrap (one of the most used frameworks) comes with jquery dependecies which are not recommended to use with React. To read more why it is not recommended to use jquery, [click here](https://goo.gl/3mExNr) \n  \n","source":"chapters/2/intro.md","raw":"---\ntitle: 'The View Layer'\ndescription: Understanding how to build interfaces\ndisqusPage: 'Chapter 2: Intro'\n---\n\n## Introduction\n\nIn the previous chapter we learned how to harness Meteor's powers. But we didn't see anything actually happening in the UI (The View Layer).\n\nMeteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it's up to you.\n\nDon't get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. \n\n## Brief history\n\nWhen Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. [http://blazejs.org/](http://blazejs.org/). In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn't good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.\n\nEven if Blaze is one of the most friendliest View Layers you'll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.\n\n## What can we use?\n\nFrom a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.\n\nTimes changed, new View Layers appeared that support reactivity such as:\n- React\n- Vue.JS\n- Angular2\n- etc\n\n\nIn terms of styling the UI, we are going to use CSS and to make our life easier, we can opt for a pre-processor:\n- SASS\n- LESS\n- Stylus\n- etc\n\nWe could also use a front-end framework like: \n- Bootstrap\n- Foundation, \n- Materialize\n- Vuetify\n- etc\n\nEach has advantages and disadvantages. So question now is what to choose?\n\n### UI library/framework\n\nOur current recommendation is: [React](https://facebook.github.io/react/)\n\nReasons for this choice:\n\n- Modular\n- A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive\n- Lightning Fast \n- Maintained by Facebook\n\nHowever, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It's a race. It's the survival of the fittest. Time will decide. For now, pick a technology\nand master it. \n\nKeep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and do the job.\n\n### CSS\n\nOur current recommendation is to use SASS (SCSS) and no framework. Probably you are asking why we are not opting for a framework. The reason is that a framework like boostrap (one of the most used frameworks) comes with jquery dependecies which are not recommended to use with React. To read more why it is not recommended to use jquery, [click here](https://goo.gl/3mExNr) \n  \n","date":"2019-10-04T12:00:07.761Z","updated":"2019-10-04T12:00:07.761Z","path":"chapters/2/intro.html","_id":"civ9g0npj0002emjx9xoo7vln","comments":1,"layout":"page","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In the previous chapter we learned how to harness Meteor’s powers. But we didn’t see anything actually happening in the UI (The View Layer).</p>\n<p>Meteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it’s up to you.</p>\n<p>Don’t get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. </p>\n<h2 id=\"Brief-history\"><a href=\"#Brief-history\" class=\"headerlink\" title=\"Brief history\"></a>Brief history</h2><p>When Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. <a href=\"http://blazejs.org/\" target=\"_blank\" rel=\"noopener\">http://blazejs.org/</a>. In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn’t good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.</p>\n<p>Even if Blaze is one of the most friendliest View Layers you’ll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.</p>\n<h2 id=\"What-can-we-use\"><a href=\"#What-can-we-use\" class=\"headerlink\" title=\"What can we use?\"></a>What can we use?</h2><p>From a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.</p>\n<p>Times changed, new View Layers appeared that support reactivity such as:</p>\n<ul>\n<li>React</li>\n<li>Vue.JS</li>\n<li>Angular2</li>\n<li>etc</li>\n</ul>\n<p>In terms of styling the UI, we are going to use CSS and to make our life easier, we can opt for a pre-processor:</p>\n<ul>\n<li>SASS</li>\n<li>LESS</li>\n<li>Stylus</li>\n<li>etc</li>\n</ul>\n<p>We could also use a front-end framework like: </p>\n<ul>\n<li>Bootstrap</li>\n<li>Foundation, </li>\n<li>Materialize</li>\n<li>Vuetify</li>\n<li>etc</li>\n</ul>\n<p>Each has advantages and disadvantages. So question now is what to choose?</p>\n<h3 id=\"UI-library-framework\"><a href=\"#UI-library-framework\" class=\"headerlink\" title=\"UI library/framework\"></a>UI library/framework</h3><p>Our current recommendation is: <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">React</a></p>\n<p>Reasons for this choice:</p>\n<ul>\n<li>Modular</li>\n<li>A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive</li>\n<li>Lightning Fast </li>\n<li>Maintained by Facebook</li>\n</ul>\n<p>However, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It’s a race. It’s the survival of the fittest. Time will decide. For now, pick a technology\nand master it. </p>\n<p>Keep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and do the job.</p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>Our current recommendation is to use SASS (SCSS) and no framework. Probably you are asking why we are not opting for a framework. The reason is that a framework like boostrap (one of the most used frameworks) comes with jquery dependecies which are not recommended to use with React. To read more why it is not recommended to use jquery, <a href=\"https://goo.gl/3mExNr\" target=\"_blank\" rel=\"noopener\">click here</a> </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>In the previous chapter we learned how to harness Meteor’s powers. But we didn’t see anything actually happening in the UI (The View Layer).</p>\n<p>Meteor is a data-system more than anything else, ofcourse it gives you some snacks to help you\ncode faster: The User System, Emails, much more. But the View Layer it’s up to you.</p>\n<p>Don’t get this the wrong way, Meteor can be integrated with any View Layer/Template Engine/UI Framework you want to use. </p>\n<h2 id=\"Brief-history\"><a href=\"#Brief-history\" class=\"headerlink\" title=\"Brief history\"></a>Brief history</h2><p>When Meteor started there was no stable solution for building reactive views. They had to invent a way.\nThis is how Blaze was born. <a href=\"http://blazejs.org/\" target=\"_blank\" rel=\"noopener\">http://blazejs.org/</a>. In Q4 2015, they decided to drop\nsupport for Blaze, not because it wasn’t good, but because there were other teams that focused only on the\nview layer. You cannot expect one company to do everything. So they began decoupling Blaze from Meteor.</p>\n<p>Even if Blaze is one of the most friendliest View Layers you’ll ever meet, they gave it to the community\nto take care of it, decoupling it from Meteor. This does not mean you should not use Blaze. Blaze is rock-solid and battle-tested.</p>\n<h2 id=\"What-can-we-use\"><a href=\"#What-can-we-use\" class=\"headerlink\" title=\"What can we use?\"></a>What can we use?</h2><p>From a personal opinionated experience, we noticed that for mobile builds, Blaze is inferior to React, in terms\nof speed and stability. Especially for older mobile phones.</p>\n<p>Times changed, new View Layers appeared that support reactivity such as:</p>\n<ul>\n<li>React</li>\n<li>Vue.JS</li>\n<li>Angular2</li>\n<li>etc</li>\n</ul>\n<p>In terms of styling the UI, we are going to use CSS and to make our life easier, we can opt for a pre-processor:</p>\n<ul>\n<li>SASS</li>\n<li>LESS</li>\n<li>Stylus</li>\n<li>etc</li>\n</ul>\n<p>We could also use a front-end framework like: </p>\n<ul>\n<li>Bootstrap</li>\n<li>Foundation, </li>\n<li>Materialize</li>\n<li>Vuetify</li>\n<li>etc</li>\n</ul>\n<p>Each has advantages and disadvantages. So question now is what to choose?</p>\n<h3 id=\"UI-library-framework\"><a href=\"#UI-library-framework\" class=\"headerlink\" title=\"UI library/framework\"></a>UI library/framework</h3><p>Our current recommendation is: <a href=\"https://facebook.github.io/react/\" target=\"_blank\" rel=\"noopener\">React</a></p>\n<p>Reasons for this choice:</p>\n<ul>\n<li>Modular</li>\n<li>A bit hard to use at first, but much easier once you get the hang of it, it becomes easy and intuitive</li>\n<li>Lightning Fast </li>\n<li>Maintained by Facebook</li>\n</ul>\n<p>However, at this stage, (Q4 2016) Vue.JS is looking very promising and gaining a lot of momentum. \nWho wins? It’s a race. It’s the survival of the fittest. Time will decide. For now, pick a technology\nand master it. </p>\n<p>Keep in mind, many companies out there still use software written 50 years ago in COBOL. Why ? Because they work and do the job.</p>\n<h3 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h3><p>Our current recommendation is to use SASS (SCSS) and no framework. Probably you are asking why we are not opting for a framework. The reason is that a framework like boostrap (one of the most used frameworks) comes with jquery dependecies which are not recommended to use with React. To read more why it is not recommended to use jquery, <a href=\"https://goo.gl/3mExNr\" target=\"_blank\" rel=\"noopener\">click here</a> </p>\n"},{"title":"Chapter 1 - Conclusion","description":"Here we are, at the end of this chapter.","disqusPage":"Chapter 1: Conclusion","_content":"\nSo, even if we barely scratched the surface of the many good things Meteor has to offer, the journey has begun.\n\nYou have how acquired new knowledge on how to use Meteor's powers for your application:\n\n- How to store your data in the database via Collections\n- How to use Methods to perform server side actions and return responses to the client\n- Use Meteor's reactive system to see live updates\n- How to secure your methods/publications for a robust application\n\n\nFurther reading:\n\n- https://guide.meteor.com/ \n- https://themeteorchef.com/\n\n\nFeedback is not just welcomed, it's expected. Please share your experience with this tutorial to help us improve \nit for the next readers!","source":"chapters/1/conclusion.md","raw":"---\ntitle: Chapter 1 - Conclusion\ndescription: Here we are, at the end of this chapter.\ndisqusPage: 'Chapter 1: Conclusion'\n---\n\nSo, even if we barely scratched the surface of the many good things Meteor has to offer, the journey has begun.\n\nYou have how acquired new knowledge on how to use Meteor's powers for your application:\n\n- How to store your data in the database via Collections\n- How to use Methods to perform server side actions and return responses to the client\n- Use Meteor's reactive system to see live updates\n- How to secure your methods/publications for a robust application\n\n\nFurther reading:\n\n- https://guide.meteor.com/ \n- https://themeteorchef.com/\n\n\nFeedback is not just welcomed, it's expected. Please share your experience with this tutorial to help us improve \nit for the next readers!","date":"2019-10-04T12:00:07.758Z","updated":"2019-10-04T12:00:07.758Z","path":"chapters/1/conclusion.html","_id":"civ9g0npk0003emjxii61m771","comments":1,"layout":"page","content":"<p>So, even if we barely scratched the surface of the many good things Meteor has to offer, the journey has begun.</p>\n<p>You have how acquired new knowledge on how to use Meteor’s powers for your application:</p>\n<ul>\n<li>How to store your data in the database via Collections</li>\n<li>How to use Methods to perform server side actions and return responses to the client</li>\n<li>Use Meteor’s reactive system to see live updates</li>\n<li>How to secure your methods/publications for a robust application</li>\n</ul>\n<p>Further reading:</p>\n<ul>\n<li><a href=\"https://guide.meteor.com/\" target=\"_blank\" rel=\"noopener\">https://guide.meteor.com/</a> </li>\n<li><a href=\"https://themeteorchef.com/\" target=\"_blank\" rel=\"noopener\">https://themeteorchef.com/</a></li>\n</ul>\n<p>Feedback is not just welcomed, it’s expected. Please share your experience with this tutorial to help us improve \nit for the next readers!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>So, even if we barely scratched the surface of the many good things Meteor has to offer, the journey has begun.</p>\n<p>You have how acquired new knowledge on how to use Meteor’s powers for your application:</p>\n<ul>\n<li>How to store your data in the database via Collections</li>\n<li>How to use Methods to perform server side actions and return responses to the client</li>\n<li>Use Meteor’s reactive system to see live updates</li>\n<li>How to secure your methods/publications for a robust application</li>\n</ul>\n<p>Further reading:</p>\n<ul>\n<li><a href=\"https://guide.meteor.com/\" target=\"_blank\" rel=\"noopener\">https://guide.meteor.com/</a> </li>\n<li><a href=\"https://themeteorchef.com/\" target=\"_blank\" rel=\"noopener\">https://themeteorchef.com/</a></li>\n</ul>\n<p>Feedback is not just welcomed, it’s expected. Please share your experience with this tutorial to help us improve \nit for the next readers!</p>\n"},{"title":"Chapter 2 - Conclusion","description":"Conclusion","disqusPage":"Chapter 2: Conclusion","_content":"\nYou made it through Chapter 2, good job :)\n\nSo we uncovered how to integrate the View Layer into Meteor, how can we write clean CSS code and tools for optimization. What's next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.\n\nNext chapter will be dedicated to how we can use all the knowledge from Chapter 1 & Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. \n\nWe'll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!\n\nIt is going to be a big one.\n\n","source":"chapters/2/conclusion.md","raw":"---\ntitle: 'Chapter 2 - Conclusion'\ndescription: Conclusion\ndisqusPage: 'Chapter 2: Conclusion'\n---\n\nYou made it through Chapter 2, good job :)\n\nSo we uncovered how to integrate the View Layer into Meteor, how can we write clean CSS code and tools for optimization. What's next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.\n\nNext chapter will be dedicated to how we can use all the knowledge from Chapter 1 & Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. \n\nWe'll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!\n\nIt is going to be a big one.\n\n","date":"2019-10-04T12:00:07.761Z","updated":"2019-10-04T12:00:07.761Z","path":"chapters/2/conclusion.html","_id":"civauf4sw0000kvjxds0vq6rm","comments":1,"layout":"page","content":"<p>You made it through Chapter 2, good job :)</p>\n<p>So we uncovered how to integrate the View Layer into Meteor, how can we write clean CSS code and tools for optimization. What’s next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.</p>\n<p>Next chapter will be dedicated to how we can use all the knowledge from Chapter 1 &amp; Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. </p>\n<p>We’ll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!</p>\n<p>It is going to be a big one.</p>\n","site":{"data":{}},"excerpt":"","more":"<p>You made it through Chapter 2, good job :)</p>\n<p>So we uncovered how to integrate the View Layer into Meteor, how can we write clean CSS code and tools for optimization. What’s next ?\nWell, you need to do your homework first, because it will help you form\nnew neural synapses that will enable you to remember and code faster.</p>\n<p>Next chapter will be dedicated to how we can use all the knowledge from Chapter 1 &amp; Chapter 2,\nin order to create large scale applications, not your simple To Do list, we are talking about\nHealthcare, Government Apps, Multi-tenant Apps, Role-Based Access Control, CRMs, the usual enterprise type of applications that may require a bigger team,\nand a lot of coding. </p>\n<p>We’ll understand how to keep it under-control, how to use testing and how\nto continously integrate and ofcourse: how to deploy!</p>\n<p>It is going to be a big one.</p>\n"},{"title":"React","description":"Integrating React with Meteor","disqusPage":"Chapter 2: React","_content":"\n## Introduction\n\nThis chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what's going on here check the following resources:\n\n- https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\n- https://blog.risingstack.com/the-react-way-getting-started-tutorial/\n- https://egghead.io/courses/react-fundamentals\n- http://jaketrent.com/post/smart-dumb-components-react/\n\n## Setting Up\n```bash\nmeteor add cultofcoders:meteor-react-routing\nmeteor npm install --save react react-mounter react-dom \n```\n\n## Architecture\n\nAs we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the `/imports/ui` folder.\n\nRouting is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in `/imports/routing`\n\n## Routing\n\nPlease follow the README.md from: \nhttps://github.com/cult-of-coders/meteor-react-routing\n\nAfter you have setup your files, created `/imports/routing/router.js`, `/imports/routing/index.js`, and you included the routing in your client/startup folder,\ncreated your `/imports/ui/App.jsx` file, and now it's time to see this baby in action!\n\n```js\n// file: /imports/ui/Home.jsx\nimport React from 'react';\n\nexport default class Home extends React.Component {\n    render() {\n        return <h1>Hello Reactive World!</h1>\n    }\n}\n```\n\n```js\n// file: /imports/routing/index.js\nimport route from './router.js'\n\nroute('/', Home);\n```\n\nNow access it: http://localhost:3000/\n\n## Methods\n\nBy default, if you read the tutorials on React, you realized that React is already reactive, by doing `this.setState` it will\nrerender efficiently your Component.\n \nLet's see how we would call a method and show a response in our component:\n\n```js\n// file: /imports/ui/Home.jsx\nexport default class Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {loading: true, donuts: []}\n    }\n    \n    componentDidMount() {\n        Meteor.call('donuts.list', (err, res) => {\n            this.setState({\n                loading: false,\n                donuts: res // assuming the method returns an array of donuts\n            })\n        })\n    }\n    \n    render() {\n        if (this.state.loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    this.state.donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n```\n\nTry it out, see if it works.\n\n## Publications\n\nFor publications we need Meteor's reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don't have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:\n\nhttps://guide.meteor.com/react.html#using-createContainer\n\n```\n// terminal\nmeteor add react-meteor-data\n```\n\n```js\n// assuming you have a publication 'donuts' that returns Donuts.find()\n// file: /imports/ui/Home.jsx\n\nimport { createContainer } from 'meteor/react-meteor-data';\nimport Donuts from '/imports/api/donuts/collection.js'\n\nclass Home extends React.Component {\n    render() {\n        const {loading, donuts} = this.props;\n        \n        if (loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default createContainer((props) => {\n    const handle = Meteor.subscribe('donuts');\n    // reactive data sources will get tracked here\n    // any change will result into a re-render of \"Home\" component\n    \n    return {\n        loading: !handle.ready(),\n        donuts: Donuts.find().fetch()\n    }\n}, Home)\n```\n\nGo ahead, try adding a new donut from the Meteor's shell. You'll see it updated live.\n\nThis is it. It's just this simple. You now have the knowledge of integrating Meteor & React. Now, we need to\nmaster it.\n\nIn the homework you'll most likely be dealing with forms, here are some starting points:\n- http://www.material-ui.com/\n- https://github.com/christianalfoni/formsy-react\n- https://github.com/mbrookes/formsy-material-ui \n\nBut you can use everything you want.\n\nThere is a package that leverages work for you:\nhttps://github.com/meteor-utilities/react-list-container\n\n## Homework\n\n#### 1. Log me in!\nCreate a route `/login` and a `Login.jsx` file. In it you will have a form. When the form is submitted, \nit will call `Meteor.loginWithPassword` and redirect him to \"/\" [Hint 1](/)\n\n#### 2. Private Donuts!\nOnly allow logged in users to view the donuts list, it is very private. [Hint]()\n\n#### 3. Register\nCreate a registration, use email and password for now.\n\n#### 4. Create a donut\nAs a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.\n\n## Over-achievers\n\n#### 1. Filters\nIn the donuts list, add a checkbox, when you click it it will only show the donuts with price < 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!\n\n#### 2. Pagination (By Methods) (From scratch)\nImplement a pagination strategy (You can use: https://www.npmjs.com/package/react-paginator). Where you display\nall the donuts, 3 items per page. *Quick tip*: You may need to create another method that retrieves the count for all donuts.\n\n#### 3. Pagination (By Subscription) (From scratch)\nThis one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don't) but you want \nit know because you're an over-achiever, check this meteor package for reactive counting:\n\n- https://github.com/percolatestudio/publish-counts\n\n","source":"chapters/2/react.md","raw":"---\ntitle: 'React'\ndescription: Integrating React with Meteor\ndisqusPage: 'Chapter 2: React'\n---\n\n## Introduction\n\nThis chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what's going on here check the following resources:\n\n- https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\n- https://blog.risingstack.com/the-react-way-getting-started-tutorial/\n- https://egghead.io/courses/react-fundamentals\n- http://jaketrent.com/post/smart-dumb-components-react/\n\n## Setting Up\n```bash\nmeteor add cultofcoders:meteor-react-routing\nmeteor npm install --save react react-mounter react-dom \n```\n\n## Architecture\n\nAs we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the `/imports/ui` folder.\n\nRouting is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in `/imports/routing`\n\n## Routing\n\nPlease follow the README.md from: \nhttps://github.com/cult-of-coders/meteor-react-routing\n\nAfter you have setup your files, created `/imports/routing/router.js`, `/imports/routing/index.js`, and you included the routing in your client/startup folder,\ncreated your `/imports/ui/App.jsx` file, and now it's time to see this baby in action!\n\n```js\n// file: /imports/ui/Home.jsx\nimport React from 'react';\n\nexport default class Home extends React.Component {\n    render() {\n        return <h1>Hello Reactive World!</h1>\n    }\n}\n```\n\n```js\n// file: /imports/routing/index.js\nimport route from './router.js'\n\nroute('/', Home);\n```\n\nNow access it: http://localhost:3000/\n\n## Methods\n\nBy default, if you read the tutorials on React, you realized that React is already reactive, by doing `this.setState` it will\nrerender efficiently your Component.\n \nLet's see how we would call a method and show a response in our component:\n\n```js\n// file: /imports/ui/Home.jsx\nexport default class Home extends React.Component {\n    constructor() {\n        super();\n        this.state = {loading: true, donuts: []}\n    }\n    \n    componentDidMount() {\n        Meteor.call('donuts.list', (err, res) => {\n            this.setState({\n                loading: false,\n                donuts: res // assuming the method returns an array of donuts\n            })\n        })\n    }\n    \n    render() {\n        if (this.state.loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    this.state.donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n```\n\nTry it out, see if it works.\n\n## Publications\n\nFor publications we need Meteor's reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don't have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:\n\nhttps://guide.meteor.com/react.html#using-createContainer\n\n```\n// terminal\nmeteor add react-meteor-data\n```\n\n```js\n// assuming you have a publication 'donuts' that returns Donuts.find()\n// file: /imports/ui/Home.jsx\n\nimport { createContainer } from 'meteor/react-meteor-data';\nimport Donuts from '/imports/api/donuts/collection.js'\n\nclass Home extends React.Component {\n    render() {\n        const {loading, donuts} = this.props;\n        \n        if (loading) {\n            return <div>Waiting for the method</div>\n        }\n        \n        return (\n            <div>\n                {\n                    donuts.map(donut => {\n                        return <div key={donut._id}>{donut._id}</div>\n                    })\n                }\n            </div>\n        )\n    }\n}\n\nexport default createContainer((props) => {\n    const handle = Meteor.subscribe('donuts');\n    // reactive data sources will get tracked here\n    // any change will result into a re-render of \"Home\" component\n    \n    return {\n        loading: !handle.ready(),\n        donuts: Donuts.find().fetch()\n    }\n}, Home)\n```\n\nGo ahead, try adding a new donut from the Meteor's shell. You'll see it updated live.\n\nThis is it. It's just this simple. You now have the knowledge of integrating Meteor & React. Now, we need to\nmaster it.\n\nIn the homework you'll most likely be dealing with forms, here are some starting points:\n- http://www.material-ui.com/\n- https://github.com/christianalfoni/formsy-react\n- https://github.com/mbrookes/formsy-material-ui \n\nBut you can use everything you want.\n\nThere is a package that leverages work for you:\nhttps://github.com/meteor-utilities/react-list-container\n\n## Homework\n\n#### 1. Log me in!\nCreate a route `/login` and a `Login.jsx` file. In it you will have a form. When the form is submitted, \nit will call `Meteor.loginWithPassword` and redirect him to \"/\" [Hint 1](/)\n\n#### 2. Private Donuts!\nOnly allow logged in users to view the donuts list, it is very private. [Hint]()\n\n#### 3. Register\nCreate a registration, use email and password for now.\n\n#### 4. Create a donut\nAs a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.\n\n## Over-achievers\n\n#### 1. Filters\nIn the donuts list, add a checkbox, when you click it it will only show the donuts with price < 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!\n\n#### 2. Pagination (By Methods) (From scratch)\nImplement a pagination strategy (You can use: https://www.npmjs.com/package/react-paginator). Where you display\nall the donuts, 3 items per page. *Quick tip*: You may need to create another method that retrieves the count for all donuts.\n\n#### 3. Pagination (By Subscription) (From scratch)\nThis one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don't) but you want \nit know because you're an over-achiever, check this meteor package for reactive counting:\n\n- https://github.com/percolatestudio/publish-counts\n\n","date":"2017-06-02T07:29:51.575Z","updated":"2017-06-02T07:29:51.575Z","path":"chapters/2/react.html","_id":"civb10l8s0000xdjxcjj4nt5c","comments":1,"layout":"page","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>This chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what’s going on here check the following resources:</p>\n<ul>\n<li><a href=\"https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\" target=\"_blank\" rel=\"external\">https://camjackson.net/post/9-things-every-reactjs-beginner-should-know</a></li>\n<li><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"external\">https://blog.risingstack.com/the-react-way-getting-started-tutorial/</a></li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\" target=\"_blank\" rel=\"external\">https://egghead.io/courses/react-fundamentals</a></li>\n<li><a href=\"http://jaketrent.com/post/smart-dumb-components-react/\" target=\"_blank\" rel=\"external\">http://jaketrent.com/post/smart-dumb-components-react/</a></li>\n</ul>\n<h2 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add cultofcoders:meteor-react-routing</div><div class=\"line\">meteor npm install --save react react-mounter react-dom</div></pre></td></tr></table></figure>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p>As we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the <code>/imports/ui</code> folder.</p>\n<p>Routing is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in <code>/imports/routing</code></p>\n<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p>Please follow the README.md from: \n<a href=\"https://github.com/cult-of-coders/meteor-react-routing\" target=\"_blank\" rel=\"external\">https://github.com/cult-of-coders/meteor-react-routing</a></p>\n<p>After you have setup your files, created <code>/imports/routing/router.js</code>, <code>/imports/routing/index.js</code>, and you included the routing in your client/startup folder,\ncreated your <code>/imports/ui/App.jsx</code> file, and now it’s time to see this baby in action!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Reactive World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/routing/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> route <span class=\"keyword\">from</span> <span class=\"string\">'./router.js'</span></div><div class=\"line\"></div><div class=\"line\">route(<span class=\"string\">'/'</span>, Home);</div></pre></td></tr></table></figure>\n<p>Now access it: <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a></p>\n<h2 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods\"></a>Methods</h2><p>By default, if you read the tutorials on React, you realized that React is already reactive, by doing <code>this.setState</code> it will\nrerender efficiently your Component.</p>\n<p>Let’s see how we would call a method and show a response in our component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">loading</span>: <span class=\"literal\">true</span>, <span class=\"attr\">donuts</span>: []&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        Meteor.call(<span class=\"string\">'donuts.list'</span>, (err, res) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">donuts</span>: res <span class=\"comment\">// assuming the method returns an array of donuts</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    this.state.donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Try it out, see if it works.</p>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><p>For publications we need Meteor’s reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don’t have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:</p>\n<p><a href=\"https://guide.meteor.com/react.html#using-createContainer\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/react.html#using-createContainer</a></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// terminal</div><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>react-meteor-<span class=\"meta\">data</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assuming you have a publication 'donuts' that returns Donuts.find()</span></div><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/react-meteor-data'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;loading, donuts&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createContainer(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> handle = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div><div class=\"line\">    <span class=\"comment\">// reactive data sources will get tracked here</span></div><div class=\"line\">    <span class=\"comment\">// any change will result into a re-render of \"Home\" component</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">loading</span>: !handle.ready(),</div><div class=\"line\">        <span class=\"attr\">donuts</span>: Donuts.find().fetch()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, Home)</div></pre></td></tr></table></figure>\n<p>Go ahead, try adding a new donut from the Meteor’s shell. You’ll see it updated live.</p>\n<p>This is it. It’s just this simple. You now have the knowledge of integrating Meteor &amp; React. Now, we need to\nmaster it.</p>\n<p>In the homework you’ll most likely be dealing with forms, here are some starting points:</p>\n<ul>\n<li><a href=\"http://www.material-ui.com/\" target=\"_blank\" rel=\"external\">http://www.material-ui.com/</a></li>\n<li><a href=\"https://github.com/christianalfoni/formsy-react\" target=\"_blank\" rel=\"external\">https://github.com/christianalfoni/formsy-react</a></li>\n<li><a href=\"https://github.com/mbrookes/formsy-material-ui\" target=\"_blank\" rel=\"external\">https://github.com/mbrookes/formsy-material-ui</a> </li>\n</ul>\n<p>But you can use everything you want.</p>\n<p>There is a package that leverages work for you:\n<a href=\"https://github.com/meteor-utilities/react-list-container\" target=\"_blank\" rel=\"external\">https://github.com/meteor-utilities/react-list-container</a></p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Log-me-in\"><a href=\"#1-Log-me-in\" class=\"headerlink\" title=\"1. Log me in!\"></a>1. Log me in!</h4><p>Create a route <code>/login</code> and a <code>Login.jsx</code> file. In it you will have a form. When the form is submitted, \nit will call <code>Meteor.loginWithPassword</code> and redirect him to “/“ <a href=\"/\">Hint 1</a></p>\n<h4 id=\"2-Private-Donuts\"><a href=\"#2-Private-Donuts\" class=\"headerlink\" title=\"2. Private Donuts!\"></a>2. Private Donuts!</h4><p>Only allow logged in users to view the donuts list, it is very private. <a href=\"\">Hint</a></p>\n<h4 id=\"3-Register\"><a href=\"#3-Register\" class=\"headerlink\" title=\"3. Register\"></a>3. Register</h4><p>Create a registration, use email and password for now.</p>\n<h4 id=\"4-Create-a-donut\"><a href=\"#4-Create-a-donut\" class=\"headerlink\" title=\"4. Create a donut\"></a>4. Create a donut</h4><p>As a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.</p>\n<h2 id=\"Over-achievers\"><a href=\"#Over-achievers\" class=\"headerlink\" title=\"Over-achievers\"></a>Over-achievers</h2><h4 id=\"1-Filters\"><a href=\"#1-Filters\" class=\"headerlink\" title=\"1. Filters\"></a>1. Filters</h4><p>In the donuts list, add a checkbox, when you click it it will only show the donuts with price &lt; 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!</p>\n<h4 id=\"2-Pagination-By-Methods-From-scratch\"><a href=\"#2-Pagination-By-Methods-From-scratch\" class=\"headerlink\" title=\"2. Pagination (By Methods) (From scratch)\"></a>2. Pagination (By Methods) (From scratch)</h4><p>Implement a pagination strategy (You can use: <a href=\"https://www.npmjs.com/package/react-paginator\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/react-paginator</a>). Where you display\nall the donuts, 3 items per page. <em>Quick tip</em>: You may need to create another method that retrieves the count for all donuts.</p>\n<h4 id=\"3-Pagination-By-Subscription-From-scratch\"><a href=\"#3-Pagination-By-Subscription-From-scratch\" class=\"headerlink\" title=\"3. Pagination (By Subscription) (From scratch)\"></a>3. Pagination (By Subscription) (From scratch)</h4><p>This one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don’t) but you want \nit know because you’re an over-achiever, check this meteor package for reactive counting:</p>\n<ul>\n<li><a href=\"https://github.com/percolatestudio/publish-counts\" target=\"_blank\" rel=\"external\">https://github.com/percolatestudio/publish-counts</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>This chapter shows you how to integrate React into Meteor with absolute ease. But be warned! This is not a React tutorial, in order\nto fully understand what’s going on here check the following resources:</p>\n<ul>\n<li><a href=\"https://camjackson.net/post/9-things-every-reactjs-beginner-should-know\" target=\"_blank\" rel=\"external\">https://camjackson.net/post/9-things-every-reactjs-beginner-should-know</a></li>\n<li><a href=\"https://blog.risingstack.com/the-react-way-getting-started-tutorial/\" target=\"_blank\" rel=\"external\">https://blog.risingstack.com/the-react-way-getting-started-tutorial/</a></li>\n<li><a href=\"https://egghead.io/courses/react-fundamentals\" target=\"_blank\" rel=\"external\">https://egghead.io/courses/react-fundamentals</a></li>\n<li><a href=\"http://jaketrent.com/post/smart-dumb-components-react/\" target=\"_blank\" rel=\"external\">http://jaketrent.com/post/smart-dumb-components-react/</a></li>\n</ul>\n<h2 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add cultofcoders:meteor-react-routing</div><div class=\"line\">meteor npm install --save react react-mounter react-dom</div></pre></td></tr></table></figure>\n<h2 id=\"Architecture\"><a href=\"#Architecture\" class=\"headerlink\" title=\"Architecture\"></a>Architecture</h2><p>As we discussed in the first chapter, we want to build modular apps and not rely on auto loading.\nWe will store all our react components in the <code>/imports/ui</code> folder.</p>\n<p>Routing is a general concept. A router decides what to show to the user, and because we regard it\nas a very important piece in our app, we shall put it in <code>/imports/routing</code></p>\n<h2 id=\"Routing\"><a href=\"#Routing\" class=\"headerlink\" title=\"Routing\"></a>Routing</h2><p>Please follow the README.md from: \n<a href=\"https://github.com/cult-of-coders/meteor-react-routing\" target=\"_blank\" rel=\"external\">https://github.com/cult-of-coders/meteor-react-routing</a></p>\n<p>After you have setup your files, created <code>/imports/routing/router.js</code>, <code>/imports/routing/index.js</code>, and you included the routing in your client/startup folder,\ncreated your <code>/imports/ui/App.jsx</code> file, and now it’s time to see this baby in action!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello Reactive World!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/routing/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> route <span class=\"keyword\">from</span> <span class=\"string\">'./router.js'</span></div><div class=\"line\"></div><div class=\"line\">route(<span class=\"string\">'/'</span>, Home);</div></pre></td></tr></table></figure>\n<p>Now access it: <a href=\"http://localhost:3000/\" target=\"_blank\" rel=\"external\">http://localhost:3000/</a></p>\n<h2 id=\"Methods\"><a href=\"#Methods\" class=\"headerlink\" title=\"Methods\"></a>Methods</h2><p>By default, if you read the tutorials on React, you realized that React is already reactive, by doing <code>this.setState</code> it will\nrerender efficiently your Component.</p>\n<p>Let’s see how we would call a method and show a response in our component:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>() &#123;</div><div class=\"line\">        <span class=\"keyword\">super</span>();</div><div class=\"line\">        <span class=\"keyword\">this</span>.state = &#123;<span class=\"attr\">loading</span>: <span class=\"literal\">true</span>, <span class=\"attr\">donuts</span>: []&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    componentDidMount() &#123;</div><div class=\"line\">        Meteor.call(<span class=\"string\">'donuts.list'</span>, (err, res) =&gt; &#123;</div><div class=\"line\">            <span class=\"keyword\">this</span>.setState(&#123;</div><div class=\"line\">                <span class=\"attr\">loading</span>: <span class=\"literal\">false</span>,</div><div class=\"line\">                <span class=\"attr\">donuts</span>: res <span class=\"comment\">// assuming the method returns an array of donuts</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.state.loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    this.state.donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Try it out, see if it works.</p>\n<h2 id=\"Publications\"><a href=\"#Publications\" class=\"headerlink\" title=\"Publications\"></a>Publications</h2><p>For publications we need Meteor’s reactivity, the Tracker, that we discussed about it in Chapter 1. However,\nfortunately we don’t have to reinvent the wheel for it, because Meteor has created a package that allows us\nto easily do it:</p>\n<p><a href=\"https://guide.meteor.com/react.html#using-createContainer\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/react.html#using-createContainer</a></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">// terminal</div><div class=\"line\"><span class=\"symbol\">meteor</span> <span class=\"keyword\">add </span>react-meteor-<span class=\"meta\">data</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// assuming you have a publication 'donuts' that returns Donuts.find()</span></div><div class=\"line\"><span class=\"comment\">// file: /imports/ui/Home.jsx</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123; createContainer &#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/react-meteor-data'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Donuts <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/donuts/collection.js'</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Home</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</div><div class=\"line\">    render() &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;loading, donuts&#125; = <span class=\"keyword\">this</span>.props;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (loading) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>Waiting for the method<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> (</div><div class=\"line\">            <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></div><div class=\"line\">                &#123;</div><div class=\"line\">                    donuts.map(donut =&gt; &#123;</div><div class=\"line\">                        return <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">key</span>=<span class=\"string\">&#123;donut._id&#125;</span>&gt;</span>&#123;donut._id&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">                    &#125;)</div><div class=\"line\">                &#125;</div><div class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></div><div class=\"line\">        )</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createContainer(<span class=\"function\">(<span class=\"params\">props</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> handle = Meteor.subscribe(<span class=\"string\">'donuts'</span>);</div><div class=\"line\">    <span class=\"comment\">// reactive data sources will get tracked here</span></div><div class=\"line\">    <span class=\"comment\">// any change will result into a re-render of \"Home\" component</span></div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        <span class=\"attr\">loading</span>: !handle.ready(),</div><div class=\"line\">        <span class=\"attr\">donuts</span>: Donuts.find().fetch()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;, Home)</div></pre></td></tr></table></figure>\n<p>Go ahead, try adding a new donut from the Meteor’s shell. You’ll see it updated live.</p>\n<p>This is it. It’s just this simple. You now have the knowledge of integrating Meteor &amp; React. Now, we need to\nmaster it.</p>\n<p>In the homework you’ll most likely be dealing with forms, here are some starting points:</p>\n<ul>\n<li><a href=\"http://www.material-ui.com/\" target=\"_blank\" rel=\"external\">http://www.material-ui.com/</a></li>\n<li><a href=\"https://github.com/christianalfoni/formsy-react\" target=\"_blank\" rel=\"external\">https://github.com/christianalfoni/formsy-react</a></li>\n<li><a href=\"https://github.com/mbrookes/formsy-material-ui\" target=\"_blank\" rel=\"external\">https://github.com/mbrookes/formsy-material-ui</a> </li>\n</ul>\n<p>But you can use everything you want.</p>\n<p>There is a package that leverages work for you:\n<a href=\"https://github.com/meteor-utilities/react-list-container\" target=\"_blank\" rel=\"external\">https://github.com/meteor-utilities/react-list-container</a></p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Log-me-in\"><a href=\"#1-Log-me-in\" class=\"headerlink\" title=\"1. Log me in!\"></a>1. Log me in!</h4><p>Create a route <code>/login</code> and a <code>Login.jsx</code> file. In it you will have a form. When the form is submitted, \nit will call <code>Meteor.loginWithPassword</code> and redirect him to “/“ <a href=\"/\">Hint 1</a></p>\n<h4 id=\"2-Private-Donuts\"><a href=\"#2-Private-Donuts\" class=\"headerlink\" title=\"2. Private Donuts!\"></a>2. Private Donuts!</h4><p>Only allow logged in users to view the donuts list, it is very private. <a href=\"\">Hint</a></p>\n<h4 id=\"3-Register\"><a href=\"#3-Register\" class=\"headerlink\" title=\"3. Register\"></a>3. Register</h4><p>Create a registration, use email and password for now.</p>\n<h4 id=\"4-Create-a-donut\"><a href=\"#4-Create-a-donut\" class=\"headerlink\" title=\"4. Create a donut\"></a>4. Create a donut</h4><p>As a logged in user, present a form and createa donut via the Meteor.call(). You can do it in a separate route, or\nwhere you list the donuts. Whatever you choose, create another component. Always think in components.</p>\n<h2 id=\"Over-achievers\"><a href=\"#Over-achievers\" class=\"headerlink\" title=\"Over-achievers\"></a>Over-achievers</h2><h4 id=\"1-Filters\"><a href=\"#1-Filters\" class=\"headerlink\" title=\"1. Filters\"></a>1. Filters</h4><p>In the donuts list, add a checkbox, when you click it it will only show the donuts with price &lt; 200. Make sure filter\nis in another component, when something changes, your subscription should change. This means you may need a container\nover on top of your container!</p>\n<h4 id=\"2-Pagination-By-Methods-From-scratch\"><a href=\"#2-Pagination-By-Methods-From-scratch\" class=\"headerlink\" title=\"2. Pagination (By Methods) (From scratch)\"></a>2. Pagination (By Methods) (From scratch)</h4><p>Implement a pagination strategy (You can use: <a href=\"https://www.npmjs.com/package/react-paginator\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/react-paginator</a>). Where you display\nall the donuts, 3 items per page. <em>Quick tip</em>: You may need to create another method that retrieves the count for all donuts.</p>\n<h4 id=\"3-Pagination-By-Subscription-From-scratch\"><a href=\"#3-Pagination-By-Subscription-From-scratch\" class=\"headerlink\" title=\"3. Pagination (By Subscription) (From scratch)\"></a>3. Pagination (By Subscription) (From scratch)</h4><p>This one is a bit tricky. But not impossible, if you want a true reactive pagination (which in most cases you don’t) but you want \nit know because you’re an over-achiever, check this meteor package for reactive counting:</p>\n<ul>\n<li><a href=\"https://github.com/percolatestudio/publish-counts\" target=\"_blank\" rel=\"external\">https://github.com/percolatestudio/publish-counts</a></li>\n</ul>\n"},{"title":"Enterprise Level","description":"Getting Meteor to Enterprise Level","disqusPage":"Chapter 3: Intro","_content":"\n## Welcome\n\nIn this chapter we are going to talk about what it takes to write a solid back-end and how we solve common issues in a very elegant manner.\n\nWe are not going to work on how to structure the front-end part. We are going to address topics such as: how do we structure the code, how do we test it, how do we lint it, and all sorts of elements\nthat make an app great behind the scenes and simply a joy to work with.\n\n## Why?\n\nWe at [Cult of Coders](https://www.cultofcoders.com) believe in the future of Meteor, making things easy for development is the key of success. But even if you have a powerful tool like Meteor in your hands, you can still make many mistakes and spend time learning from them.\nWe made these mistakes so you don't have to. \n\nSo why are we sharing them for free? When we could easily create a book and make some good bucks? Because money is not our objective. A thriving community is more valuable to us.\n\nThe main reason is that we love and support the community, the next is by engaging the community in this, we are able to gain more insights and to improve our knowledge.\n \nThat being said, we hope you enjoy this chapter and that it will open your mind.\n\nMay the code be with you.\n\n## Beginning the adventure\n\nWe will begin with a story, a young developer joining a team of Meteor developers, and he receives his first task:\n\n`\nAs a user, I want to create a post.\nAfter creation, I want to send an email to the admin so he can approve it.\nAfter approval, find the users that are interested in this post by their interests, and notify them.\n`\n\nFrom the client I would craft a form, and do something like a method call, but since our focus is backend, we won't get too much on the frontend\nside of things.\n\n```js\nMeteor.call('posts.create', {\n    title: 'I wanna learn Meteor!',\n    tags: ['philosophy'],\n})\n```\n\nIn the server you start coding:\n```js\nimport Posts from '/some/where/collection.js';\n\nMeteor.methods({\n    'posts.create'(post) {\n        Posts.insert(post);\n        \n        Email.send({\n            to: 'admin@app.com',\n            from: 'notifications@app.com',\n            subject: 'New Post',\n            html: `\n                You can access it here: ${Meteor.absoluteUrl(`/posts/${post._id}`)}\n            `\n        })\n    },\n    'posts.approve'(postId) {\n        const post = Posts.findOne(postId);\n        Posts.update(postId, {\n            $set: {\n                isApproved: true\n            }\n        });\n        \n        const users = Meteor.users.find({\n            interests: {$in: post.tags}\n        }).fetch();\n        \n        users.forEach(user => {\n            Email.send({\n                to: user.emails[0].address,\n                from: 'notifications@app.com',\n                subject: 'New Post With Your Interest',\n                html: `\n                    You can access it here: ${Meteor.absoluteUrl(`/posts/${post._id}`)}\n                `\n            })\n        })\n    },\n})\n```\n\nThis looks like a simple way of doing things, the code is relatively clean, and it does its job.\n\nBut, then the *Bigshot Code Reviewer* comes to you and says the following:\n\n1. You need to make sure the user is logged in when creating a post\n2. What prevents the user of setting `isApproved: true` in the post object? Never trust the client!\n3. What if I want to change `notifications@app.com` from one place.\n4. Post approval is not secured, you need an Admin role to do that\n5. What if the `/posts/:_id` route changes I want to be able to change it from one place\n6. What if I have multiple admins and want to notify them all ?\n7. The tags need to be validated as well, we don't allow all possible tags\n\nBecause you are a good developer you listen to all of his requests and you start coding, then it will look something like this:\n\n```js\nimport Posts from '/some/where/collection.js';\n\nconst FROM = Meteor.settings.emails.from; // You decide to put your \"from\" in settings, which is an ok approach.\nconst TAGS = ['psychology', 'philosophy'];\n\nfunction generatePostUrl(_id) {\n    return Meteor.absoluteUrl(`/posts/${_id}`);\n}\n\nMeteor.methods({\n    'posts.create'(post) {\n        if (!this.userId) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        if (post.isApproved) {\n            delete post['isApproved'];\n        }\n        \n        if (post.tags) {\n            let cleanedTags = [];\n            post.tags.forEach(tag => {\n                if (_.find(TAGS, tag)) {\n                    cleanedTags.push(tag);\n                }\n            })\n            \n            post.tags = cleanedTags;\n        }\n        \n        Posts.insert(post);\n        \n        const admins = Meteor.users.find({\n            roles: {$in: ['ADMIN']}\n        }).fetch();\n        \n        admins.forEach(admin => {\n            Email.send({\n                to: admin.emails[0].address,\n                from: FROM,\n                subject: 'New Post',\n                html: `\n                    You can access it here: ${generatePostUrl(post._id)}\n                `\n            })\n        })\n    },\n    'posts.approve'(postId) {\n        if (!Roles.userIsInRole(this.userId, 'ADMIN')) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        const post = Posts.findOne(postId);\n        \n        if (!post) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        Posts.update(postId, {\n            $set: {\n                isApproved: true\n            }\n        });\n        \n        const users = Meteor.users.find({\n            interests: {$in: post.tags}\n        }).fetch();\n        \n        users.forEach(user => {\n            Email.send({\n                to: user.emails[0].address,\n                from: FROM,\n                subject: 'New Post With Your Interest',\n                html: `\n                    You can access it here: ${generatePostUrl(post._id)}\n                `\n            })\n        })\n    },\n})\n```\n\n## Implementation\n\nBy this time your code has grown a lot, and you send it for review being optimistic... but our **Bigshot Code Reviewer** comes with a new set of requests:\n\n1. I need to be able to validate these tags at User level as well\n2. I want to have Emails centralized somewhere so I can have a nice layout\n3. When you find users you fetch a lot of data you don't need!\n4. ... \n\nSo what's the problem here? You want to do your job, and receiving so many comments makes you feel like you don't know jack. Then, after you implement them you realize\nthat your code grows and grows and if another developer wants to read your methods he will have a hard time because it's simply too much. What if later on you want to send some Push Notifications,\nor other stuff, a method can grow to 200 lines? Unacceptable.\n\n```bash\nQ: Is there any way in this lonesome world?\nA: Yes. Use services.\n```\n\nLet's begin first with our Emailing service:\n```js\n// file: '/some/where/services/EmailService.js'\nconst FROM = Meteor.settings.emails.from;\n\nfunction generatePostUrl(_id) {\n    return Meteor.absoluteUrl(`/posts/${_id}`);\n}\n\nclass EmailService {\n    sendPostForApproval(userId, postId) {\n        Email.send({\n            to: this._getEmailForUser(userId),\n            from: FROM,\n            subject: 'New Post',\n            html: `\n                You can access it here: ${generatePostUrl(post._id)}\n            `\n        })\n    }\n    \n    sendPostForInterest(userId, postId) {\n        Email.send({\n            to: this._getEmailForUser(userId),\n            from: FROM,\n            subject: 'New Post With Your Interest',\n            html: `\n                You can access it here: ${generatePostUrl(post._id)}\n            `\n        })\n    }\n    \n    _getEmailForUser(userId) {\n        const user = Meteor.users.findOne(userId, {\n            fields: {emails: 1}\n        })\n        \n        if (!user) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        return user.emails[0].address;\n    }\n}\n\nexport default EmailService;\n```\n \nWe already decouple mail sending in a nice manner, and we aren't fetching from database things we don't need. Nice!\n \n```js\n// file: '/some/where/services/PostService.js'\nconst TAGS = ['psychology', 'philosophy'];\n\nclass PostService {\n    static createPost(userId, post) {\n        // the services is not your security layer, so we shouldn't do the check here\n        this._validateCreationPost(post)\n        post.userId = userId;\n        \n        const postId = Posts.insert(post);\n        this.notifyAdminForApprovalOfPost(post);\n        \n        return postId;\n    }\n    \n    static approvePost(postId) {\n        const post = this._getPost(postId);\n        Posts.update(postId, {\n            $set: {isApproved: true}\n        });\n        \n        this.notifyUsersOfPosts(post);\n    }\n    \n    static notifyAdminForApprovalOfPost(post) {\n        const admins = Meteor.users.find({\n            roles: {$in: ['ADMIN']}\n        }, {\n            fields: {_id: 1}\n        }).fetch();\n        \n        admins.forEach(admin => {\n            EmailService.sendPostForApproval(admin._id, post._id)\n        });\n    }\n    \n    static notifyUsersOfPosts(post) {\n        const users = Meteor.users.find({\n            interests: {$in: post.tags}\n        }, {\n            fields: {_id: 1}\n        }).fetch();\n        \n        users.forEach(user => {\n            EmailService.sendPostForInterest(user._id, post._id);\n        })\n    }\n    \n    static _getPost(postId) {\n        const post = Posts.findOne(postId);\n        \n        if (!post) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        return post;\n    }\n    \n    static _validateCreationPost(post) {\n        if (post.isApproved) {\n            delete post['isApproved'];\n        }\n        \n        if (post.tags) {\n            let cleanedTags = [];\n            post.tags.forEach(tag => {\n                if (_.find(TAGS, tag)) {\n                    cleanedTags.push(tag);\n                }\n            })\n            \n            post.tags = cleanedTags;\n        }\n    }\n}\n\nexport default PostService;\n```\n\nOk, nice, now as you can see the code can be read as poetry. By decoupling functions you understand what they do without seeing the code, this brings verbosity and makes the code a pleasure to work with.\nSo, how will our methods look after these changes?\n\n```js\nMeteor.methods({\n    'posts.create'(post) {\n        if (!this.userId) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        return PostService.createPost(post);\n    },\n    'posts.approve'(postId) {\n        if (!Roles.userIsInRole(this.userId, 'ADMIN')) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        return PostService.approvePost(postId);\n    }\n})\n```\n\nWow! So clean and so sexy! Much more readable. But are we there yet? Is this how the code should look?\nNot by far. \n\nBut we made some good progress already, good job!\nWe understood that separation of logic, makes the code manageable, easy to understand, and easier to test.\n\nSo why do we say *not by far* ?\n\nWell, the **Bigshot** will still see some problems:\n1. If I want to write a test for PostService but not send emails how would I do that ?\n2. Tags need to be centralized somewhere and apply same validation when User updates interests.\n3. What if the user adds some extra fields to post object ? How do I stop that ?\n4. What if that absolute path for seeing posts needs also to be decoupled and used somewhere ?\n5. Emails still don't have a nice re-usable layout\n6. PostService should be about Posts, not about notifying others, it has too much logic.\n7. ...\n\nOk, how do we close this **Bigshot**'s mouth? We continue learning the principles behind quality code.\n\nLet the adventure begin! But first, you must understand some basic stuff regarding programming in javascript:\n\nThis is the best resource I've found:\nhttps://github.com/ryanmcdermott/clean-code-javascript \n\nIt's based on Robert Martin's Clean Code book but tailored for our love, JavaScript.\n\nPlease don't treat it as just another link, you must absorb the teachings there, and make sure that until you master them,\nyou read them daily or at least weekly for 2 months.\n\nEven I read it from time to time, to refresh my memory.\n\n`After all this time? Always.`","source":"chapters/3/intro.md","raw":"---\ntitle: 'Enterprise Level'\ndescription: Getting Meteor to Enterprise Level\ndisqusPage: 'Chapter 3: Intro'\n---\n\n## Welcome\n\nIn this chapter we are going to talk about what it takes to write a solid back-end and how we solve common issues in a very elegant manner.\n\nWe are not going to work on how to structure the front-end part. We are going to address topics such as: how do we structure the code, how do we test it, how do we lint it, and all sorts of elements\nthat make an app great behind the scenes and simply a joy to work with.\n\n## Why?\n\nWe at [Cult of Coders](https://www.cultofcoders.com) believe in the future of Meteor, making things easy for development is the key of success. But even if you have a powerful tool like Meteor in your hands, you can still make many mistakes and spend time learning from them.\nWe made these mistakes so you don't have to. \n\nSo why are we sharing them for free? When we could easily create a book and make some good bucks? Because money is not our objective. A thriving community is more valuable to us.\n\nThe main reason is that we love and support the community, the next is by engaging the community in this, we are able to gain more insights and to improve our knowledge.\n \nThat being said, we hope you enjoy this chapter and that it will open your mind.\n\nMay the code be with you.\n\n## Beginning the adventure\n\nWe will begin with a story, a young developer joining a team of Meteor developers, and he receives his first task:\n\n`\nAs a user, I want to create a post.\nAfter creation, I want to send an email to the admin so he can approve it.\nAfter approval, find the users that are interested in this post by their interests, and notify them.\n`\n\nFrom the client I would craft a form, and do something like a method call, but since our focus is backend, we won't get too much on the frontend\nside of things.\n\n```js\nMeteor.call('posts.create', {\n    title: 'I wanna learn Meteor!',\n    tags: ['philosophy'],\n})\n```\n\nIn the server you start coding:\n```js\nimport Posts from '/some/where/collection.js';\n\nMeteor.methods({\n    'posts.create'(post) {\n        Posts.insert(post);\n        \n        Email.send({\n            to: 'admin@app.com',\n            from: 'notifications@app.com',\n            subject: 'New Post',\n            html: `\n                You can access it here: ${Meteor.absoluteUrl(`/posts/${post._id}`)}\n            `\n        })\n    },\n    'posts.approve'(postId) {\n        const post = Posts.findOne(postId);\n        Posts.update(postId, {\n            $set: {\n                isApproved: true\n            }\n        });\n        \n        const users = Meteor.users.find({\n            interests: {$in: post.tags}\n        }).fetch();\n        \n        users.forEach(user => {\n            Email.send({\n                to: user.emails[0].address,\n                from: 'notifications@app.com',\n                subject: 'New Post With Your Interest',\n                html: `\n                    You can access it here: ${Meteor.absoluteUrl(`/posts/${post._id}`)}\n                `\n            })\n        })\n    },\n})\n```\n\nThis looks like a simple way of doing things, the code is relatively clean, and it does its job.\n\nBut, then the *Bigshot Code Reviewer* comes to you and says the following:\n\n1. You need to make sure the user is logged in when creating a post\n2. What prevents the user of setting `isApproved: true` in the post object? Never trust the client!\n3. What if I want to change `notifications@app.com` from one place.\n4. Post approval is not secured, you need an Admin role to do that\n5. What if the `/posts/:_id` route changes I want to be able to change it from one place\n6. What if I have multiple admins and want to notify them all ?\n7. The tags need to be validated as well, we don't allow all possible tags\n\nBecause you are a good developer you listen to all of his requests and you start coding, then it will look something like this:\n\n```js\nimport Posts from '/some/where/collection.js';\n\nconst FROM = Meteor.settings.emails.from; // You decide to put your \"from\" in settings, which is an ok approach.\nconst TAGS = ['psychology', 'philosophy'];\n\nfunction generatePostUrl(_id) {\n    return Meteor.absoluteUrl(`/posts/${_id}`);\n}\n\nMeteor.methods({\n    'posts.create'(post) {\n        if (!this.userId) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        if (post.isApproved) {\n            delete post['isApproved'];\n        }\n        \n        if (post.tags) {\n            let cleanedTags = [];\n            post.tags.forEach(tag => {\n                if (_.find(TAGS, tag)) {\n                    cleanedTags.push(tag);\n                }\n            })\n            \n            post.tags = cleanedTags;\n        }\n        \n        Posts.insert(post);\n        \n        const admins = Meteor.users.find({\n            roles: {$in: ['ADMIN']}\n        }).fetch();\n        \n        admins.forEach(admin => {\n            Email.send({\n                to: admin.emails[0].address,\n                from: FROM,\n                subject: 'New Post',\n                html: `\n                    You can access it here: ${generatePostUrl(post._id)}\n                `\n            })\n        })\n    },\n    'posts.approve'(postId) {\n        if (!Roles.userIsInRole(this.userId, 'ADMIN')) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        const post = Posts.findOne(postId);\n        \n        if (!post) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        Posts.update(postId, {\n            $set: {\n                isApproved: true\n            }\n        });\n        \n        const users = Meteor.users.find({\n            interests: {$in: post.tags}\n        }).fetch();\n        \n        users.forEach(user => {\n            Email.send({\n                to: user.emails[0].address,\n                from: FROM,\n                subject: 'New Post With Your Interest',\n                html: `\n                    You can access it here: ${generatePostUrl(post._id)}\n                `\n            })\n        })\n    },\n})\n```\n\n## Implementation\n\nBy this time your code has grown a lot, and you send it for review being optimistic... but our **Bigshot Code Reviewer** comes with a new set of requests:\n\n1. I need to be able to validate these tags at User level as well\n2. I want to have Emails centralized somewhere so I can have a nice layout\n3. When you find users you fetch a lot of data you don't need!\n4. ... \n\nSo what's the problem here? You want to do your job, and receiving so many comments makes you feel like you don't know jack. Then, after you implement them you realize\nthat your code grows and grows and if another developer wants to read your methods he will have a hard time because it's simply too much. What if later on you want to send some Push Notifications,\nor other stuff, a method can grow to 200 lines? Unacceptable.\n\n```bash\nQ: Is there any way in this lonesome world?\nA: Yes. Use services.\n```\n\nLet's begin first with our Emailing service:\n```js\n// file: '/some/where/services/EmailService.js'\nconst FROM = Meteor.settings.emails.from;\n\nfunction generatePostUrl(_id) {\n    return Meteor.absoluteUrl(`/posts/${_id}`);\n}\n\nclass EmailService {\n    sendPostForApproval(userId, postId) {\n        Email.send({\n            to: this._getEmailForUser(userId),\n            from: FROM,\n            subject: 'New Post',\n            html: `\n                You can access it here: ${generatePostUrl(post._id)}\n            `\n        })\n    }\n    \n    sendPostForInterest(userId, postId) {\n        Email.send({\n            to: this._getEmailForUser(userId),\n            from: FROM,\n            subject: 'New Post With Your Interest',\n            html: `\n                You can access it here: ${generatePostUrl(post._id)}\n            `\n        })\n    }\n    \n    _getEmailForUser(userId) {\n        const user = Meteor.users.findOne(userId, {\n            fields: {emails: 1}\n        })\n        \n        if (!user) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        return user.emails[0].address;\n    }\n}\n\nexport default EmailService;\n```\n \nWe already decouple mail sending in a nice manner, and we aren't fetching from database things we don't need. Nice!\n \n```js\n// file: '/some/where/services/PostService.js'\nconst TAGS = ['psychology', 'philosophy'];\n\nclass PostService {\n    static createPost(userId, post) {\n        // the services is not your security layer, so we shouldn't do the check here\n        this._validateCreationPost(post)\n        post.userId = userId;\n        \n        const postId = Posts.insert(post);\n        this.notifyAdminForApprovalOfPost(post);\n        \n        return postId;\n    }\n    \n    static approvePost(postId) {\n        const post = this._getPost(postId);\n        Posts.update(postId, {\n            $set: {isApproved: true}\n        });\n        \n        this.notifyUsersOfPosts(post);\n    }\n    \n    static notifyAdminForApprovalOfPost(post) {\n        const admins = Meteor.users.find({\n            roles: {$in: ['ADMIN']}\n        }, {\n            fields: {_id: 1}\n        }).fetch();\n        \n        admins.forEach(admin => {\n            EmailService.sendPostForApproval(admin._id, post._id)\n        });\n    }\n    \n    static notifyUsersOfPosts(post) {\n        const users = Meteor.users.find({\n            interests: {$in: post.tags}\n        }, {\n            fields: {_id: 1}\n        }).fetch();\n        \n        users.forEach(user => {\n            EmailService.sendPostForInterest(user._id, post._id);\n        })\n    }\n    \n    static _getPost(postId) {\n        const post = Posts.findOne(postId);\n        \n        if (!post) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        return post;\n    }\n    \n    static _validateCreationPost(post) {\n        if (post.isApproved) {\n            delete post['isApproved'];\n        }\n        \n        if (post.tags) {\n            let cleanedTags = [];\n            post.tags.forEach(tag => {\n                if (_.find(TAGS, tag)) {\n                    cleanedTags.push(tag);\n                }\n            })\n            \n            post.tags = cleanedTags;\n        }\n    }\n}\n\nexport default PostService;\n```\n\nOk, nice, now as you can see the code can be read as poetry. By decoupling functions you understand what they do without seeing the code, this brings verbosity and makes the code a pleasure to work with.\nSo, how will our methods look after these changes?\n\n```js\nMeteor.methods({\n    'posts.create'(post) {\n        if (!this.userId) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        return PostService.createPost(post);\n    },\n    'posts.approve'(postId) {\n        if (!Roles.userIsInRole(this.userId, 'ADMIN')) {\n            throw new Meteor.Error('not-allowed');\n        }\n        \n        return PostService.approvePost(postId);\n    }\n})\n```\n\nWow! So clean and so sexy! Much more readable. But are we there yet? Is this how the code should look?\nNot by far. \n\nBut we made some good progress already, good job!\nWe understood that separation of logic, makes the code manageable, easy to understand, and easier to test.\n\nSo why do we say *not by far* ?\n\nWell, the **Bigshot** will still see some problems:\n1. If I want to write a test for PostService but not send emails how would I do that ?\n2. Tags need to be centralized somewhere and apply same validation when User updates interests.\n3. What if the user adds some extra fields to post object ? How do I stop that ?\n4. What if that absolute path for seeing posts needs also to be decoupled and used somewhere ?\n5. Emails still don't have a nice re-usable layout\n6. PostService should be about Posts, not about notifying others, it has too much logic.\n7. ...\n\nOk, how do we close this **Bigshot**'s mouth? We continue learning the principles behind quality code.\n\nLet the adventure begin! But first, you must understand some basic stuff regarding programming in javascript:\n\nThis is the best resource I've found:\nhttps://github.com/ryanmcdermott/clean-code-javascript \n\nIt's based on Robert Martin's Clean Code book but tailored for our love, JavaScript.\n\nPlease don't treat it as just another link, you must absorb the teachings there, and make sure that until you master them,\nyou read them daily or at least weekly for 2 months.\n\nEven I read it from time to time, to refresh my memory.\n\n`After all this time? Always.`","date":"2019-10-04T12:01:21.632Z","updated":"2019-10-04T12:01:21.632Z","path":"chapters/3/intro.html","_id":"cj8zm74a20000qmu55ra4wato","comments":1,"layout":"page","content":"<h2 id=\"Welcome\"><a href=\"#Welcome\" class=\"headerlink\" title=\"Welcome\"></a>Welcome</h2><p>In this chapter we are going to talk about what it takes to write a solid back-end and how we solve common issues in a very elegant manner.</p>\n<p>We are not going to work on how to structure the front-end part. We are going to address topics such as: how do we structure the code, how do we test it, how do we lint it, and all sorts of elements\nthat make an app great behind the scenes and simply a joy to work with.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>We at <a href=\"https://www.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Cult of Coders</a> believe in the future of Meteor, making things easy for development is the key of success. But even if you have a powerful tool like Meteor in your hands, you can still make many mistakes and spend time learning from them.\nWe made these mistakes so you don’t have to. </p>\n<p>So why are we sharing them for free? When we could easily create a book and make some good bucks? Because money is not our objective. A thriving community is more valuable to us.</p>\n<p>The main reason is that we love and support the community, the next is by engaging the community in this, we are able to gain more insights and to improve our knowledge.</p>\n<p>That being said, we hope you enjoy this chapter and that it will open your mind.</p>\n<p>May the code be with you.</p>\n<h2 id=\"Beginning-the-adventure\"><a href=\"#Beginning-the-adventure\" class=\"headerlink\" title=\"Beginning the adventure\"></a>Beginning the adventure</h2><p>We will begin with a story, a young developer joining a team of Meteor developers, and he receives his first task:</p>\n<p><code>As a user, I want to create a post.\nAfter creation, I want to send an email to the admin so he can approve it.\nAfter approval, find the users that are interested in this post by their interests, and notify them.</code></p>\n<p>From the client I would craft a form, and do something like a method call, but since our focus is backend, we won’t get too much on the frontend\nside of things.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'posts.create'</span>, &#123;</div><div class=\"line\">    title: <span class=\"string\">'I wanna learn Meteor!'</span>,</div><div class=\"line\">    tags: [<span class=\"string\">'philosophy'</span>],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In the server you start coding:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/some/where/collection.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>(post) &#123;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">        </div><div class=\"line\">        Email.send(&#123;</div><div class=\"line\">            to: <span class=\"string\">'admin@app.com'</span>,</div><div class=\"line\">            <span class=\"keyword\">from</span>: <span class=\"string\">'notifications@app.com'</span>,</div><div class=\"line\">            subject: <span class=\"string\">'New Post'</span>,</div><div class=\"line\">            html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                You can access it here: <span class=\"subst\">$&#123;Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)&#125;</span></span></div><div class=\"line\"><span class=\"string\">            `</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> post = Posts.findOne(postId);</div><div class=\"line\">        Posts.update(postId, &#123;</div><div class=\"line\">            $set: &#123;</div><div class=\"line\">                isApproved: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> users = Meteor.users.find(&#123;</div><div class=\"line\">            interests: &#123;<span class=\"attr\">$in</span>: post.tags&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(&#123;</div><div class=\"line\">                to: user.emails[<span class=\"number\">0</span>].address,</div><div class=\"line\">                <span class=\"keyword\">from</span>: <span class=\"string\">'notifications@app.com'</span>,</div><div class=\"line\">                subject: <span class=\"string\">'New Post With Your Interest'</span>,</div><div class=\"line\">                html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                    You can access it here: <span class=\"subst\">$&#123;Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)&#125;</span></span></div><div class=\"line\"><span class=\"string\">                `</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>This looks like a simple way of doing things, the code is relatively clean, and it does its job.</p>\n<p>But, then the <em>Bigshot Code Reviewer</em> comes to you and says the following:</p>\n<ol>\n<li>You need to make sure the user is logged in when creating a post</li>\n<li>What prevents the user of setting <code>isApproved: true</code> in the post object? Never trust the client!</li>\n<li>What if I want to change <code>notifications@app.com</code> from one place.</li>\n<li>Post approval is not secured, you need an Admin role to do that</li>\n<li>What if the <code>/posts/:_id</code> route changes I want to be able to change it from one place</li>\n<li>What if I have multiple admins and want to notify them all ?</li>\n<li>The tags need to be validated as well, we don’t allow all possible tags</li>\n</ol>\n<p>Because you are a good developer you listen to all of his requests and you start coding, then it will look something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/some/where/collection.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> FROM = Meteor.settings.emails.from; <span class=\"comment\">// You decide to put your \"from\" in settings, which is an ok approach.</span></div><div class=\"line\"><span class=\"keyword\">const</span> TAGS = [<span class=\"string\">'psychology'</span>, <span class=\"string\">'philosophy'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generatePostUrl</span>(<span class=\"params\">_id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;_id&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (post.isApproved) &#123;</div><div class=\"line\">            <span class=\"keyword\">delete</span> post[<span class=\"string\">'isApproved'</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (post.tags) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> cleanedTags = [];</div><div class=\"line\">            post.tags.forEach(<span class=\"function\"><span class=\"params\">tag</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (_.find(TAGS, tag)) &#123;</div><div class=\"line\">                    cleanedTags.push(tag);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            </div><div class=\"line\">            post.tags = cleanedTags;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> admins = Meteor.users.find(&#123;</div><div class=\"line\">            roles: &#123;<span class=\"attr\">$in</span>: [<span class=\"string\">'ADMIN'</span>]&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        admins.forEach(<span class=\"function\"><span class=\"params\">admin</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(&#123;</div><div class=\"line\">                to: admin.emails[<span class=\"number\">0</span>].address,</div><div class=\"line\">                <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">                subject: <span class=\"string\">'New Post'</span>,</div><div class=\"line\">                html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                    You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">                `</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Roles.userIsInRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> post = Posts.findOne(postId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (!post) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Posts.update(postId, &#123;</div><div class=\"line\">            $set: &#123;</div><div class=\"line\">                isApproved: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> users = Meteor.users.find(&#123;</div><div class=\"line\">            interests: &#123;<span class=\"attr\">$in</span>: post.tags&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(&#123;</div><div class=\"line\">                to: user.emails[<span class=\"number\">0</span>].address,</div><div class=\"line\">                <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">                subject: <span class=\"string\">'New Post With Your Interest'</span>,</div><div class=\"line\">                html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                    You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">                `</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>By this time your code has grown a lot, and you send it for review being optimistic… but our <strong>Bigshot Code Reviewer</strong> comes with a new set of requests:</p>\n<ol>\n<li>I need to be able to validate these tags at User level as well</li>\n<li>I want to have Emails centralized somewhere so I can have a nice layout</li>\n<li>When you find users you fetch a lot of data you don’t need!</li>\n<li>… </li>\n</ol>\n<p>So what’s the problem here? You want to do your job, and receiving so many comments makes you feel like you don’t know jack. Then, after you implement them you realize\nthat your code grows and grows and if another developer wants to read your methods he will have a hard time because it’s simply too much. What if later on you want to send some Push Notifications,\nor other stuff, a method can grow to 200 lines? Unacceptable.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q: Is there any way <span class=\"keyword\">in</span> this lonesome world?</div><div class=\"line\">A: Yes. Use services.</div></pre></td></tr></table></figure>\n<p>Let’s begin first with our Emailing service:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: '/some/where/services/EmailService.js'</span></div><div class=\"line\"><span class=\"keyword\">const</span> FROM = Meteor.settings.emails.from;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generatePostUrl</span>(<span class=\"params\">_id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;_id&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailService</span> </span>&#123;</div><div class=\"line\">    sendPostForApproval(userId, postId) &#123;</div><div class=\"line\">        Email.send(&#123;</div><div class=\"line\">            to: <span class=\"keyword\">this</span>._getEmailForUser(userId),</div><div class=\"line\">            <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">            subject: <span class=\"string\">'New Post'</span>,</div><div class=\"line\">            html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">            `</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    sendPostForInterest(userId, postId) &#123;</div><div class=\"line\">        Email.send(&#123;</div><div class=\"line\">            to: <span class=\"keyword\">this</span>._getEmailForUser(userId),</div><div class=\"line\">            <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">            subject: <span class=\"string\">'New Post With Your Interest'</span>,</div><div class=\"line\">            html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">            `</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    _getEmailForUser(userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> user = Meteor.users.findOne(userId, &#123;</div><div class=\"line\">            fields: &#123;<span class=\"attr\">emails</span>: <span class=\"number\">1</span>&#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (!user) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> user.emails[<span class=\"number\">0</span>].address;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> EmailService;</div></pre></td></tr></table></figure></p>\n<p>We already decouple mail sending in a nice manner, and we aren’t fetching from database things we don’t need. Nice!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: '/some/where/services/PostService.js'</span></div><div class=\"line\"><span class=\"keyword\">const</span> TAGS = [<span class=\"string\">'psychology'</span>, <span class=\"string\">'philosophy'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> createPost(userId, post) &#123;</div><div class=\"line\">        <span class=\"comment\">// the services is not your security layer, so we shouldn't do the check here</span></div><div class=\"line\">        <span class=\"keyword\">this</span>._validateCreationPost(post)</div><div class=\"line\">        post.userId = userId;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> postId = Posts.insert(post);</div><div class=\"line\">        <span class=\"keyword\">this</span>.notifyAdminForApprovalOfPost(post);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> postId;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> approvePost(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> post = <span class=\"keyword\">this</span>._getPost(postId);</div><div class=\"line\">        Posts.update(postId, &#123;</div><div class=\"line\">            $set: &#123;<span class=\"attr\">isApproved</span>: <span class=\"literal\">true</span>&#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.notifyUsersOfPosts(post);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> notifyAdminForApprovalOfPost(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> admins = Meteor.users.find(&#123;</div><div class=\"line\">            roles: &#123;<span class=\"attr\">$in</span>: [<span class=\"string\">'ADMIN'</span>]&#125;</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            fields: &#123;<span class=\"attr\">_id</span>: <span class=\"number\">1</span>&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        admins.forEach(<span class=\"function\"><span class=\"params\">admin</span> =&gt;</span> &#123;</div><div class=\"line\">            EmailService.sendPostForApproval(admin._id, post._id)</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> notifyUsersOfPosts(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> users = Meteor.users.find(&#123;</div><div class=\"line\">            interests: &#123;<span class=\"attr\">$in</span>: post.tags&#125;</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            fields: &#123;<span class=\"attr\">_id</span>: <span class=\"number\">1</span>&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</div><div class=\"line\">            EmailService.sendPostForInterest(user._id, post._id);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> _getPost(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> post = Posts.findOne(postId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (!post) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> post;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> _validateCreationPost(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (post.isApproved) &#123;</div><div class=\"line\">            <span class=\"keyword\">delete</span> post[<span class=\"string\">'isApproved'</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (post.tags) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> cleanedTags = [];</div><div class=\"line\">            post.tags.forEach(<span class=\"function\"><span class=\"params\">tag</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (_.find(TAGS, tag)) &#123;</div><div class=\"line\">                    cleanedTags.push(tag);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            </div><div class=\"line\">            post.tags = cleanedTags;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PostService;</div></pre></td></tr></table></figure>\n<p>Ok, nice, now as you can see the code can be read as poetry. By decoupling functions you understand what they do without seeing the code, this brings verbosity and makes the code a pleasure to work with.\nSo, how will our methods look after these changes?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> PostService.createPost(post);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Roles.userIsInRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> PostService.approvePost(postId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Wow! So clean and so sexy! Much more readable. But are we there yet? Is this how the code should look?\nNot by far. </p>\n<p>But we made some good progress already, good job!\nWe understood that separation of logic, makes the code manageable, easy to understand, and easier to test.</p>\n<p>So why do we say <em>not by far</em> ?</p>\n<p>Well, the <strong>Bigshot</strong> will still see some problems:</p>\n<ol>\n<li>If I want to write a test for PostService but not send emails how would I do that ?</li>\n<li>Tags need to be centralized somewhere and apply same validation when User updates interests.</li>\n<li>What if the user adds some extra fields to post object ? How do I stop that ?</li>\n<li>What if that absolute path for seeing posts needs also to be decoupled and used somewhere ?</li>\n<li>Emails still don’t have a nice re-usable layout</li>\n<li>PostService should be about Posts, not about notifying others, it has too much logic.</li>\n<li>…</li>\n</ol>\n<p>Ok, how do we close this <strong>Bigshot</strong>‘s mouth? We continue learning the principles behind quality code.</p>\n<p>Let the adventure begin! But first, you must understand some basic stuff regarding programming in javascript:</p>\n<p>This is the best resource I’ve found:\n<a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a> </p>\n<p>It’s based on Robert Martin’s Clean Code book but tailored for our love, JavaScript.</p>\n<p>Please don’t treat it as just another link, you must absorb the teachings there, and make sure that until you master them,\nyou read them daily or at least weekly for 2 months.</p>\n<p>Even I read it from time to time, to refresh my memory.</p>\n<p><code>After all this time? Always.</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Welcome\"><a href=\"#Welcome\" class=\"headerlink\" title=\"Welcome\"></a>Welcome</h2><p>In this chapter we are going to talk about what it takes to write a solid back-end and how we solve common issues in a very elegant manner.</p>\n<p>We are not going to work on how to structure the front-end part. We are going to address topics such as: how do we structure the code, how do we test it, how do we lint it, and all sorts of elements\nthat make an app great behind the scenes and simply a joy to work with.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>We at <a href=\"https://www.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Cult of Coders</a> believe in the future of Meteor, making things easy for development is the key of success. But even if you have a powerful tool like Meteor in your hands, you can still make many mistakes and spend time learning from them.\nWe made these mistakes so you don’t have to. </p>\n<p>So why are we sharing them for free? When we could easily create a book and make some good bucks? Because money is not our objective. A thriving community is more valuable to us.</p>\n<p>The main reason is that we love and support the community, the next is by engaging the community in this, we are able to gain more insights and to improve our knowledge.</p>\n<p>That being said, we hope you enjoy this chapter and that it will open your mind.</p>\n<p>May the code be with you.</p>\n<h2 id=\"Beginning-the-adventure\"><a href=\"#Beginning-the-adventure\" class=\"headerlink\" title=\"Beginning the adventure\"></a>Beginning the adventure</h2><p>We will begin with a story, a young developer joining a team of Meteor developers, and he receives his first task:</p>\n<p><code>As a user, I want to create a post.\nAfter creation, I want to send an email to the admin so he can approve it.\nAfter approval, find the users that are interested in this post by their interests, and notify them.</code></p>\n<p>From the client I would craft a form, and do something like a method call, but since our focus is backend, we won’t get too much on the frontend\nside of things.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.call(<span class=\"string\">'posts.create'</span>, &#123;</div><div class=\"line\">    title: <span class=\"string\">'I wanna learn Meteor!'</span>,</div><div class=\"line\">    tags: [<span class=\"string\">'philosophy'</span>],</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In the server you start coding:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/some/where/collection.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>(post) &#123;</div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">        </div><div class=\"line\">        Email.send(&#123;</div><div class=\"line\">            to: <span class=\"string\">'admin@app.com'</span>,</div><div class=\"line\">            <span class=\"keyword\">from</span>: <span class=\"string\">'notifications@app.com'</span>,</div><div class=\"line\">            subject: <span class=\"string\">'New Post'</span>,</div><div class=\"line\">            html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                You can access it here: <span class=\"subst\">$&#123;Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)&#125;</span></span></div><div class=\"line\"><span class=\"string\">            `</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> post = Posts.findOne(postId);</div><div class=\"line\">        Posts.update(postId, &#123;</div><div class=\"line\">            $set: &#123;</div><div class=\"line\">                isApproved: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> users = Meteor.users.find(&#123;</div><div class=\"line\">            interests: &#123;<span class=\"attr\">$in</span>: post.tags&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(&#123;</div><div class=\"line\">                to: user.emails[<span class=\"number\">0</span>].address,</div><div class=\"line\">                <span class=\"keyword\">from</span>: <span class=\"string\">'notifications@app.com'</span>,</div><div class=\"line\">                subject: <span class=\"string\">'New Post With Your Interest'</span>,</div><div class=\"line\">                html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                    You can access it here: <span class=\"subst\">$&#123;Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;post._id&#125;</span>`</span>)&#125;</span></span></div><div class=\"line\"><span class=\"string\">                `</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>This looks like a simple way of doing things, the code is relatively clean, and it does its job.</p>\n<p>But, then the <em>Bigshot Code Reviewer</em> comes to you and says the following:</p>\n<ol>\n<li>You need to make sure the user is logged in when creating a post</li>\n<li>What prevents the user of setting <code>isApproved: true</code> in the post object? Never trust the client!</li>\n<li>What if I want to change <code>notifications@app.com</code> from one place.</li>\n<li>Post approval is not secured, you need an Admin role to do that</li>\n<li>What if the <code>/posts/:_id</code> route changes I want to be able to change it from one place</li>\n<li>What if I have multiple admins and want to notify them all ?</li>\n<li>The tags need to be validated as well, we don’t allow all possible tags</li>\n</ol>\n<p>Because you are a good developer you listen to all of his requests and you start coding, then it will look something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'/some/where/collection.js'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> FROM = Meteor.settings.emails.from; <span class=\"comment\">// You decide to put your \"from\" in settings, which is an ok approach.</span></div><div class=\"line\"><span class=\"keyword\">const</span> TAGS = [<span class=\"string\">'psychology'</span>, <span class=\"string\">'philosophy'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generatePostUrl</span>(<span class=\"params\">_id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;_id&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (post.isApproved) &#123;</div><div class=\"line\">            <span class=\"keyword\">delete</span> post[<span class=\"string\">'isApproved'</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (post.tags) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> cleanedTags = [];</div><div class=\"line\">            post.tags.forEach(<span class=\"function\"><span class=\"params\">tag</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (_.find(TAGS, tag)) &#123;</div><div class=\"line\">                    cleanedTags.push(tag);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            </div><div class=\"line\">            post.tags = cleanedTags;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Posts.insert(post);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> admins = Meteor.users.find(&#123;</div><div class=\"line\">            roles: &#123;<span class=\"attr\">$in</span>: [<span class=\"string\">'ADMIN'</span>]&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        admins.forEach(<span class=\"function\"><span class=\"params\">admin</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(&#123;</div><div class=\"line\">                to: admin.emails[<span class=\"number\">0</span>].address,</div><div class=\"line\">                <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">                subject: <span class=\"string\">'New Post'</span>,</div><div class=\"line\">                html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                    You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">                `</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Roles.userIsInRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> post = Posts.findOne(postId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (!post) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        Posts.update(postId, &#123;</div><div class=\"line\">            $set: &#123;</div><div class=\"line\">                isApproved: <span class=\"literal\">true</span></div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> users = Meteor.users.find(&#123;</div><div class=\"line\">            interests: &#123;<span class=\"attr\">$in</span>: post.tags&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(&#123;</div><div class=\"line\">                to: user.emails[<span class=\"number\">0</span>].address,</div><div class=\"line\">                <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">                subject: <span class=\"string\">'New Post With Your Interest'</span>,</div><div class=\"line\">                html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                    You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">                `</span></div><div class=\"line\">            &#125;)</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Implementation\"><a href=\"#Implementation\" class=\"headerlink\" title=\"Implementation\"></a>Implementation</h2><p>By this time your code has grown a lot, and you send it for review being optimistic… but our <strong>Bigshot Code Reviewer</strong> comes with a new set of requests:</p>\n<ol>\n<li>I need to be able to validate these tags at User level as well</li>\n<li>I want to have Emails centralized somewhere so I can have a nice layout</li>\n<li>When you find users you fetch a lot of data you don’t need!</li>\n<li>… </li>\n</ol>\n<p>So what’s the problem here? You want to do your job, and receiving so many comments makes you feel like you don’t know jack. Then, after you implement them you realize\nthat your code grows and grows and if another developer wants to read your methods he will have a hard time because it’s simply too much. What if later on you want to send some Push Notifications,\nor other stuff, a method can grow to 200 lines? Unacceptable.</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q: Is there any way <span class=\"keyword\">in</span> this lonesome world?</div><div class=\"line\">A: Yes. Use services.</div></pre></td></tr></table></figure>\n<p>Let’s begin first with our Emailing service:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: '/some/where/services/EmailService.js'</span></div><div class=\"line\"><span class=\"keyword\">const</span> FROM = Meteor.settings.emails.from;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">generatePostUrl</span>(<span class=\"params\">_id</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">return</span> Meteor.absoluteUrl(<span class=\"string\">`/posts/<span class=\"subst\">$&#123;_id&#125;</span>`</span>);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmailService</span> </span>&#123;</div><div class=\"line\">    sendPostForApproval(userId, postId) &#123;</div><div class=\"line\">        Email.send(&#123;</div><div class=\"line\">            to: <span class=\"keyword\">this</span>._getEmailForUser(userId),</div><div class=\"line\">            <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">            subject: <span class=\"string\">'New Post'</span>,</div><div class=\"line\">            html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">            `</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    sendPostForInterest(userId, postId) &#123;</div><div class=\"line\">        Email.send(&#123;</div><div class=\"line\">            to: <span class=\"keyword\">this</span>._getEmailForUser(userId),</div><div class=\"line\">            <span class=\"keyword\">from</span>: FROM,</div><div class=\"line\">            subject: <span class=\"string\">'New Post With Your Interest'</span>,</div><div class=\"line\">            html: <span class=\"string\">`</span></div><div class=\"line\"><span class=\"string\">                You can access it here: <span class=\"subst\">$&#123;generatePostUrl(post._id)&#125;</span></span></div><div class=\"line\"><span class=\"string\">            `</span></div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    _getEmailForUser(userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> user = Meteor.users.findOne(userId, &#123;</div><div class=\"line\">            fields: &#123;<span class=\"attr\">emails</span>: <span class=\"number\">1</span>&#125;</div><div class=\"line\">        &#125;)</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (!user) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> user.emails[<span class=\"number\">0</span>].address;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> EmailService;</div></pre></td></tr></table></figure></p>\n<p>We already decouple mail sending in a nice manner, and we aren’t fetching from database things we don’t need. Nice!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: '/some/where/services/PostService.js'</span></div><div class=\"line\"><span class=\"keyword\">const</span> TAGS = [<span class=\"string\">'psychology'</span>, <span class=\"string\">'philosophy'</span>];</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">PostService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> createPost(userId, post) &#123;</div><div class=\"line\">        <span class=\"comment\">// the services is not your security layer, so we shouldn't do the check here</span></div><div class=\"line\">        <span class=\"keyword\">this</span>._validateCreationPost(post)</div><div class=\"line\">        post.userId = userId;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> postId = Posts.insert(post);</div><div class=\"line\">        <span class=\"keyword\">this</span>.notifyAdminForApprovalOfPost(post);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> postId;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> approvePost(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> post = <span class=\"keyword\">this</span>._getPost(postId);</div><div class=\"line\">        Posts.update(postId, &#123;</div><div class=\"line\">            $set: &#123;<span class=\"attr\">isApproved</span>: <span class=\"literal\">true</span>&#125;</div><div class=\"line\">        &#125;);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">this</span>.notifyUsersOfPosts(post);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> notifyAdminForApprovalOfPost(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> admins = Meteor.users.find(&#123;</div><div class=\"line\">            roles: &#123;<span class=\"attr\">$in</span>: [<span class=\"string\">'ADMIN'</span>]&#125;</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            fields: &#123;<span class=\"attr\">_id</span>: <span class=\"number\">1</span>&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        admins.forEach(<span class=\"function\"><span class=\"params\">admin</span> =&gt;</span> &#123;</div><div class=\"line\">            EmailService.sendPostForApproval(admin._id, post._id)</div><div class=\"line\">        &#125;);</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> notifyUsersOfPosts(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> users = Meteor.users.find(&#123;</div><div class=\"line\">            interests: &#123;<span class=\"attr\">$in</span>: post.tags&#125;</div><div class=\"line\">        &#125;, &#123;</div><div class=\"line\">            fields: &#123;<span class=\"attr\">_id</span>: <span class=\"number\">1</span>&#125;</div><div class=\"line\">        &#125;).fetch();</div><div class=\"line\">        </div><div class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</div><div class=\"line\">            EmailService.sendPostForInterest(user._id, post._id);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> _getPost(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> post = Posts.findOne(postId);</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (!post) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> post;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> _validateCreationPost(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (post.isApproved) &#123;</div><div class=\"line\">            <span class=\"keyword\">delete</span> post[<span class=\"string\">'isApproved'</span>];</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (post.tags) &#123;</div><div class=\"line\">            <span class=\"keyword\">let</span> cleanedTags = [];</div><div class=\"line\">            post.tags.forEach(<span class=\"function\"><span class=\"params\">tag</span> =&gt;</span> &#123;</div><div class=\"line\">                <span class=\"keyword\">if</span> (_.find(TAGS, tag)) &#123;</div><div class=\"line\">                    cleanedTags.push(tag);</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;)</div><div class=\"line\">            </div><div class=\"line\">            post.tags = cleanedTags;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PostService;</div></pre></td></tr></table></figure>\n<p>Ok, nice, now as you can see the code can be read as poetry. By decoupling functions you understand what they do without seeing the code, this brings verbosity and makes the code a pleasure to work with.\nSo, how will our methods look after these changes?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>(post) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userId) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> PostService.createPost(post);</div><div class=\"line\">    &#125;,</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(postId) &#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Roles.userIsInRole(<span class=\"keyword\">this</span>.userId, <span class=\"string\">'ADMIN'</span>)) &#123;</div><div class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">return</span> PostService.approvePost(postId);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>Wow! So clean and so sexy! Much more readable. But are we there yet? Is this how the code should look?\nNot by far. </p>\n<p>But we made some good progress already, good job!\nWe understood that separation of logic, makes the code manageable, easy to understand, and easier to test.</p>\n<p>So why do we say <em>not by far</em> ?</p>\n<p>Well, the <strong>Bigshot</strong> will still see some problems:</p>\n<ol>\n<li>If I want to write a test for PostService but not send emails how would I do that ?</li>\n<li>Tags need to be centralized somewhere and apply same validation when User updates interests.</li>\n<li>What if the user adds some extra fields to post object ? How do I stop that ?</li>\n<li>What if that absolute path for seeing posts needs also to be decoupled and used somewhere ?</li>\n<li>Emails still don’t have a nice re-usable layout</li>\n<li>PostService should be about Posts, not about notifying others, it has too much logic.</li>\n<li>…</li>\n</ol>\n<p>Ok, how do we close this <strong>Bigshot</strong>‘s mouth? We continue learning the principles behind quality code.</p>\n<p>Let the adventure begin! But first, you must understand some basic stuff regarding programming in javascript:</p>\n<p>This is the best resource I’ve found:\n<a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a> </p>\n<p>It’s based on Robert Martin’s Clean Code book but tailored for our love, JavaScript.</p>\n<p>Please don’t treat it as just another link, you must absorb the teachings there, and make sure that until you master them,\nyou read them daily or at least weekly for 2 months.</p>\n<p>Even I read it from time to time, to refresh my memory.</p>\n<p><code>After all this time? Always.</code></p>\n"},{"title":"Events","description":"Observe and react to changes in a decoupled manner","disqusPage":"Chapter 3: Events","_content":"\n## The Problem\n\nLet's start with the problem. Something happens in your system, like: you add a new item for sale.\n\nWhen this happens you need to do:\n- Notify people that may be interested in your sale\n- Send an email to the Admin\n- Charge the person 0.02$ for the fact he posted a new item for sale on your platform\n\nSo far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:\n\n```js\nnotifyInterestedPeopleInSale(itemId);\nnotifyAdmins(itemId);\nprocessCharging(itemId);\n```\n\nNow you go to your `ItemService` and have something like:\n```js\nstatic createItem(data) {\n    const itemId = Items.insert(data);\n    \n    notifyInterestedPeopleInSale(itemId);\n    notifyAdmins(itemId);\n    processCharging(itemId);\n}\n```\n\nAnd it seems that you are happy with this. It looks modular and decoupled. However it's not ok because:\n- **It knows too much** about other services\n- **It does too much**, it's purpose is to merely create an item, that's it.\n- **It depends on too many modules**, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.\n\nBesides that, the name we have is not very verbose, what if we change it?\n```js\ncreatePostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);\n```\n\n## The Solution\n\nOk we can't work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?\n\nOfcourse, let's rock and roll with the Observer pattern. The observer pattern is so simple to understand:\n- When X happens I want to do Y\n- Ability to say X happens\n- Ability to do Y when X happens\n\nIn code translation:\n```\nmeteor npm i -S event-emitter\n```\n\nPS: In Node 8 (Meteor 1.6), it is native: https://nodejs.org/api/events.html  \n\n```js\n// file: /imports/api/events.js\nimport EventEmitter from 'event-emitter';\n\nconst Emitter = new EventEmitter();\n\nconst Events = {\n    ITEM_CREATED: 'item_created'\n};\n\nexport { Emitter, Events }\n```\n\nNow we need to say to the system that an item has been created:\n```js\nimport {Emitter, Events} from '/imports/api/events';\n\nfunction createItem(userId, data) {\n    const itemId = Items.insert(data);\n    \n    Emitter.emit(Events.ITEM_CREATED, {itemId, userId});\n}\n```\n\nNow, notifications and payment are two modules that aren't necessarily related, they don't really need to know about each other.\nThis is why our listeners, should be close to their code:\n\n```js\n// file: /imports/api/notifications/listeners.js\nimport {Emitter, Events} from '/imports/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({itemId}) { \n    notifyInterestedPeopleInSale(itemId);\n    notifyAdmins(itemId);\n})\n```\n```js\n// file: /imports/api/payments/listeners.js\nimport {Emitter, Events} from '/imports/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({itemId}) { \n    processCharging(itemId);\n})\n```\n\nWhat do we exactly gain by using this strategy ?\n- You can plug-in additional functionality by listening to events\n- If item creation is done from multiple places, if you want to remove/add functionality you do it in one place\n- It's easy to find what listeners you have if you respect the pattern, simply searching for `Events.ITEM_CREATED` in your project finds you everything you need (listeners, emitters)\n- The code is independent and doesn't know about other functionality, which is the way it should be\n\n\nWatch the pattern: `MODEL_ACTION: 'model_action'`. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: `MODEL_ACTION_BY_ADMIN`\n\nBe very careful with verb tenses, if it's present, then it's before the item creation, if it's past-tense it's after that action has been made:\n\n```js\nEmitter.emit(Events.ITEM_CREATE, {item});\nconst _id = Items.insert(item);\nEmitter.emit(Events.ITEM_CREATED, {_id, item});\n```\n\n\n\n**Bottom line**\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!\n\n## Event Params\n\nWhen you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.\n\nA common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it's your first one.\n\nFor example, you dispatch something like:\n```js\nEmitter.emit(Events.ITEM_CREATED, {\n    itemPrice: X,\n})\n```\n\nBecause you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data\nrelated to the Event itself.\n\nBasically the rule is: when you dispatch events, imagine that you don't know about who is going to use them. There aren't any strict rules here.\n\nWhen item is created I want to send:\n- Item identification\n- Who added this item\n\nIt's not bad to send the full item, it's up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I'd rather send the full `item` object, because I know a lot of listeners will need it.\n\nDoesn't matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use [Grapher](http://grapher.cultofcoders.com),\nand fetch only the fields you need. \n\nAren't Events just great ?\n\n## When to use\n\nYou can use them in most situations but I strongly recommend using them when:\n- You have to create notifications of any kind (push, app, emails)\n- You have a service that knows too much \n- You want to have something easily pluggable and upluggable in your system\n\n## Validation & Maintenance\n\nHow do I enforce validation for events parameters ?\n\nAgain, you have to keep things simple, but if your code-base grows a lot, this will be needed,\nespecially if events are dispatched from multiple places. You need to be sure that the events receive valid parameters.\n\nJust a simple way to architect this:\n`/imports/api/events.js` -> `/imports/api/events/index.js`\n\n```js\n// file: /imports/api/events/events.js\n\nconst Events = {\n    ITEM_CREATED: {\n        key: 'item_created',\n        schema: {\n            itemId: {type: String}\n        }\n    }\n};\n\nexport default Events;\n```\n\n```js\n// file: /imports/api/events/events.js\nimport SimpleSchema from 'simpl-schema';\nimport _ from 'underscore';\n\nconst Events = {\n    ITEM_CREATED: {\n        key: 'item_created',\n        schema: {\n            itemId: {type: String}\n        }\n    }\n};\n\n// put this in a separate module, it's for demo here\n// we create SimpleSchema validator function for each event with schema \n_.each(Events, (value, key) => {\n    if (!Events[key].schema) {\n        return;\n    }\n    \n    Events[key]['validator'] = new SimpleSchema(Events[key].schema).validator();\n});\n\n// we also need the old simple Events style so we can easily use it in our app\n// so we don't have to do Events.ITEM_CREATED.key when dispatching or listening\nlet SimpleEventsMap = {};\n_.each(Events, (value, key) => {\n    SimpleEventsMap[key] = value.key;\n});\n\nexport default SimpleEventsMap;\nexport {Events};\n```\n\n```js\n// file: /imports/api/events/extendForValidation.js\nimport {Events} from './events';\n\nexport default (emitter) => {\n    const oldEmit = emitter.emit;\n    const newEmit = function (event, data) {\n        if (!Events[event]) {\n            return;\n        }\n        \n        if (Events[event].validator) {\n            Events[event].validator.validate(data);\n        }\n        \n        oldEmit(event, data);\n    };\n    \n    emitter.emit = newEmit.bind(emitter);\n    \n    return emitter;\n}\n```\n\n```js\n// file: /imports/api/events/index.js\nimport Events from './events';\nimport EventEmitter from 'event-emitter';\nimport extendForValidation from './extendForValidation';\n\nconst Emitter = extendForValidation(\n    new EventEmitter()\n);\n\nexport default Emitter;\n\nexport {Emitter, Events};\n```\n\n## Testing\n\nEvent listeners **must** delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services,\nand then you can run an integration test easily.\n\nIf you do want to test them, use the strategy in the [**Services - Dependency Injection**](/chapters/3/services.html#Dependency-Injection) and make your listener a class,\nand inject the services it uses.\n","source":"chapters/3/events.md","raw":"---\ntitle: 'Events'\ndescription: Observe and react to changes in a decoupled manner \ndisqusPage: 'Chapter 3: Events'\n---\n\n## The Problem\n\nLet's start with the problem. Something happens in your system, like: you add a new item for sale.\n\nWhen this happens you need to do:\n- Notify people that may be interested in your sale\n- Send an email to the Admin\n- Charge the person 0.02$ for the fact he posted a new item for sale on your platform\n\nSo far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:\n\n```js\nnotifyInterestedPeopleInSale(itemId);\nnotifyAdmins(itemId);\nprocessCharging(itemId);\n```\n\nNow you go to your `ItemService` and have something like:\n```js\nstatic createItem(data) {\n    const itemId = Items.insert(data);\n    \n    notifyInterestedPeopleInSale(itemId);\n    notifyAdmins(itemId);\n    processCharging(itemId);\n}\n```\n\nAnd it seems that you are happy with this. It looks modular and decoupled. However it's not ok because:\n- **It knows too much** about other services\n- **It does too much**, it's purpose is to merely create an item, that's it.\n- **It depends on too many modules**, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.\n\nBesides that, the name we have is not very verbose, what if we change it?\n```js\ncreatePostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);\n```\n\n## The Solution\n\nOk we can't work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?\n\nOfcourse, let's rock and roll with the Observer pattern. The observer pattern is so simple to understand:\n- When X happens I want to do Y\n- Ability to say X happens\n- Ability to do Y when X happens\n\nIn code translation:\n```\nmeteor npm i -S event-emitter\n```\n\nPS: In Node 8 (Meteor 1.6), it is native: https://nodejs.org/api/events.html  \n\n```js\n// file: /imports/api/events.js\nimport EventEmitter from 'event-emitter';\n\nconst Emitter = new EventEmitter();\n\nconst Events = {\n    ITEM_CREATED: 'item_created'\n};\n\nexport { Emitter, Events }\n```\n\nNow we need to say to the system that an item has been created:\n```js\nimport {Emitter, Events} from '/imports/api/events';\n\nfunction createItem(userId, data) {\n    const itemId = Items.insert(data);\n    \n    Emitter.emit(Events.ITEM_CREATED, {itemId, userId});\n}\n```\n\nNow, notifications and payment are two modules that aren't necessarily related, they don't really need to know about each other.\nThis is why our listeners, should be close to their code:\n\n```js\n// file: /imports/api/notifications/listeners.js\nimport {Emitter, Events} from '/imports/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({itemId}) { \n    notifyInterestedPeopleInSale(itemId);\n    notifyAdmins(itemId);\n})\n```\n```js\n// file: /imports/api/payments/listeners.js\nimport {Emitter, Events} from '/imports/api/events';\n\nEmitter.on(Events.ITEM_CREATED, function({itemId}) { \n    processCharging(itemId);\n})\n```\n\nWhat do we exactly gain by using this strategy ?\n- You can plug-in additional functionality by listening to events\n- If item creation is done from multiple places, if you want to remove/add functionality you do it in one place\n- It's easy to find what listeners you have if you respect the pattern, simply searching for `Events.ITEM_CREATED` in your project finds you everything you need (listeners, emitters)\n- The code is independent and doesn't know about other functionality, which is the way it should be\n\n\nWatch the pattern: `MODEL_ACTION: 'model_action'`. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: `MODEL_ACTION_BY_ADMIN`\n\nBe very careful with verb tenses, if it's present, then it's before the item creation, if it's past-tense it's after that action has been made:\n\n```js\nEmitter.emit(Events.ITEM_CREATE, {item});\nconst _id = Items.insert(item);\nEmitter.emit(Events.ITEM_CREATED, {_id, item});\n```\n\n\n\n**Bottom line**\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!\n\n## Event Params\n\nWhen you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.\n\nA common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it's your first one.\n\nFor example, you dispatch something like:\n```js\nEmitter.emit(Events.ITEM_CREATED, {\n    itemPrice: X,\n})\n```\n\nBecause you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data\nrelated to the Event itself.\n\nBasically the rule is: when you dispatch events, imagine that you don't know about who is going to use them. There aren't any strict rules here.\n\nWhen item is created I want to send:\n- Item identification\n- Who added this item\n\nIt's not bad to send the full item, it's up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I'd rather send the full `item` object, because I know a lot of listeners will need it.\n\nDoesn't matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use [Grapher](http://grapher.cultofcoders.com),\nand fetch only the fields you need. \n\nAren't Events just great ?\n\n## When to use\n\nYou can use them in most situations but I strongly recommend using them when:\n- You have to create notifications of any kind (push, app, emails)\n- You have a service that knows too much \n- You want to have something easily pluggable and upluggable in your system\n\n## Validation & Maintenance\n\nHow do I enforce validation for events parameters ?\n\nAgain, you have to keep things simple, but if your code-base grows a lot, this will be needed,\nespecially if events are dispatched from multiple places. You need to be sure that the events receive valid parameters.\n\nJust a simple way to architect this:\n`/imports/api/events.js` -> `/imports/api/events/index.js`\n\n```js\n// file: /imports/api/events/events.js\n\nconst Events = {\n    ITEM_CREATED: {\n        key: 'item_created',\n        schema: {\n            itemId: {type: String}\n        }\n    }\n};\n\nexport default Events;\n```\n\n```js\n// file: /imports/api/events/events.js\nimport SimpleSchema from 'simpl-schema';\nimport _ from 'underscore';\n\nconst Events = {\n    ITEM_CREATED: {\n        key: 'item_created',\n        schema: {\n            itemId: {type: String}\n        }\n    }\n};\n\n// put this in a separate module, it's for demo here\n// we create SimpleSchema validator function for each event with schema \n_.each(Events, (value, key) => {\n    if (!Events[key].schema) {\n        return;\n    }\n    \n    Events[key]['validator'] = new SimpleSchema(Events[key].schema).validator();\n});\n\n// we also need the old simple Events style so we can easily use it in our app\n// so we don't have to do Events.ITEM_CREATED.key when dispatching or listening\nlet SimpleEventsMap = {};\n_.each(Events, (value, key) => {\n    SimpleEventsMap[key] = value.key;\n});\n\nexport default SimpleEventsMap;\nexport {Events};\n```\n\n```js\n// file: /imports/api/events/extendForValidation.js\nimport {Events} from './events';\n\nexport default (emitter) => {\n    const oldEmit = emitter.emit;\n    const newEmit = function (event, data) {\n        if (!Events[event]) {\n            return;\n        }\n        \n        if (Events[event].validator) {\n            Events[event].validator.validate(data);\n        }\n        \n        oldEmit(event, data);\n    };\n    \n    emitter.emit = newEmit.bind(emitter);\n    \n    return emitter;\n}\n```\n\n```js\n// file: /imports/api/events/index.js\nimport Events from './events';\nimport EventEmitter from 'event-emitter';\nimport extendForValidation from './extendForValidation';\n\nconst Emitter = extendForValidation(\n    new EventEmitter()\n);\n\nexport default Emitter;\n\nexport {Emitter, Events};\n```\n\n## Testing\n\nEvent listeners **must** delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services,\nand then you can run an integration test easily.\n\nIf you do want to test them, use the strategy in the [**Services - Dependency Injection**](/chapters/3/services.html#Dependency-Injection) and make your listener a class,\nand inject the services it uses.\n","date":"2017-10-25T09:40:26.388Z","updated":"2017-10-25T09:40:26.387Z","path":"chapters/3/events.html","_id":"cj8zm7icq0002qmu5kt61xu5b","comments":1,"layout":"page","content":"<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Let’s start with the problem. Something happens in your system, like: you add a new item for sale.</p>\n<p>When this happens you need to do:</p>\n<ul>\n<li>Notify people that may be interested in your sale</li>\n<li>Send an email to the Admin</li>\n<li>Charge the person 0.02$ for the fact he posted a new item for sale on your platform</li>\n</ul>\n<p>So far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">notifyInterestedPeopleInSale(itemId);</div><div class=\"line\">notifyAdmins(itemId);</div><div class=\"line\">processCharging(itemId);</div></pre></td></tr></table></figure>\n<p>Now you go to your <code>ItemService</code> and have something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> createItem(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> itemId = Items.insert(data);</div><div class=\"line\">    </div><div class=\"line\">    notifyInterestedPeopleInSale(itemId);</div><div class=\"line\">    notifyAdmins(itemId);</div><div class=\"line\">    processCharging(itemId);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>And it seems that you are happy with this. It looks modular and decoupled. However it’s not ok because:</p>\n<ul>\n<li><strong>It knows too much</strong> about other services</li>\n<li><strong>It does too much</strong>, it’s purpose is to merely create an item, that’s it.</li>\n<li><strong>It depends on too many modules</strong>, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.</li>\n</ul>\n<p>Besides that, the name we have is not very verbose, what if we change it?\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">createPostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);</div></pre></td></tr></table></figure></p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Ok we can’t work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?</p>\n<p>Ofcourse, let’s rock and roll with the Observer pattern. The observer pattern is so simple to understand:</p>\n<ul>\n<li>When X happens I want to do Y</li>\n<li>Ability to say X happens</li>\n<li>Ability to do Y when X happens</li>\n</ul>\n<p>In code translation:\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor npm i -S <span class=\"keyword\">event</span>-<span class=\"keyword\">emitter</span></div></pre></td></tr></table></figure></p>\n<p>PS: In Node 8 (Meteor 1.6), it is native: <a href=\"https://nodejs.org/api/events.html\" target=\"_blank\" rel=\"external\">https://nodejs.org/api/events.html</a>  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Emitter = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    ITEM_CREATED: <span class=\"string\">'item_created'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; Emitter, Events &#125;</div></pre></td></tr></table></figure>\n<p>Now we need to say to the system that an item has been created:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createItem</span>(<span class=\"params\">userId, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> itemId = Items.insert(data);</div><div class=\"line\">    </div><div class=\"line\">    Emitter.emit(Events.ITEM_CREATED, &#123;itemId, userId&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now, notifications and payment are two modules that aren’t necessarily related, they don’t really need to know about each other.\nThis is why our listeners, should be close to their code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/notifications/listeners.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;itemId&#125;</span>) </span>&#123; </div><div class=\"line\">    notifyInterestedPeopleInSale(itemId);</div><div class=\"line\">    notifyAdmins(itemId);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/payments/listeners.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;itemId&#125;</span>) </span>&#123; </div><div class=\"line\">    processCharging(itemId);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>What do we exactly gain by using this strategy ?</p>\n<ul>\n<li>You can plug-in additional functionality by listening to events</li>\n<li>If item creation is done from multiple places, if you want to remove/add functionality you do it in one place</li>\n<li>It’s easy to find what listeners you have if you respect the pattern, simply searching for <code>Events.ITEM_CREATED</code> in your project finds you everything you need (listeners, emitters)</li>\n<li>The code is independent and doesn’t know about other functionality, which is the way it should be</li>\n</ul>\n<p>Watch the pattern: <code>MODEL_ACTION: &#39;model_action&#39;</code>. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: <code>MODEL_ACTION_BY_ADMIN</code></p>\n<p>Be very careful with verb tenses, if it’s present, then it’s before the item creation, if it’s past-tense it’s after that action has been made:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Emitter.emit(Events.ITEM_CREATE, &#123;item&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> _id = Items.insert(item);</div><div class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123;_id, item&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Bottom line</strong>\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!</p>\n<h2 id=\"Event-Params\"><a href=\"#Event-Params\" class=\"headerlink\" title=\"Event Params\"></a>Event Params</h2><p>When you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.</p>\n<p>A common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it’s your first one.</p>\n<p>For example, you dispatch something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123;</div><div class=\"line\">    itemPrice: X,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Because you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data\nrelated to the Event itself.</p>\n<p>Basically the rule is: when you dispatch events, imagine that you don’t know about who is going to use them. There aren’t any strict rules here.</p>\n<p>When item is created I want to send:</p>\n<ul>\n<li>Item identification</li>\n<li>Who added this item</li>\n</ul>\n<p>It’s not bad to send the full item, it’s up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I’d rather send the full <code>item</code> object, because I know a lot of listeners will need it.</p>\n<p>Doesn’t matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"external\">Grapher</a>,\nand fetch only the fields you need. </p>\n<p>Aren’t Events just great ?</p>\n<h2 id=\"When-to-use\"><a href=\"#When-to-use\" class=\"headerlink\" title=\"When to use\"></a>When to use</h2><p>You can use them in most situations but I strongly recommend using them when:</p>\n<ul>\n<li>You have to create notifications of any kind (push, app, emails)</li>\n<li>You have a service that knows too much </li>\n<li>You want to have something easily pluggable and upluggable in your system</li>\n</ul>\n<h2 id=\"Validation-amp-Maintenance\"><a href=\"#Validation-amp-Maintenance\" class=\"headerlink\" title=\"Validation &amp; Maintenance\"></a>Validation &amp; Maintenance</h2><p>How do I enforce validation for events parameters ?</p>\n<p>Again, you have to keep things simple, but if your code-base grows a lot, this will be needed,\nespecially if events are dispatched from multiple places. You need to be sure that the events receive valid parameters.</p>\n<p>Just a simple way to architect this:\n<code>/imports/api/events.js</code> -&gt; <code>/imports/api/events/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/events.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    ITEM_CREATED: &#123;</div><div class=\"line\">        key: <span class=\"string\">'item_created'</span>,</div><div class=\"line\">        schema: &#123;</div><div class=\"line\">            itemId: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Events;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/events.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'underscore'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    ITEM_CREATED: &#123;</div><div class=\"line\">        key: <span class=\"string\">'item_created'</span>,</div><div class=\"line\">        schema: &#123;</div><div class=\"line\">            itemId: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// put this in a separate module, it's for demo here</span></div><div class=\"line\"><span class=\"comment\">// we create SimpleSchema validator function for each event with schema </span></div><div class=\"line\">_.each(Events, (value, key) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Events[key].schema) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    Events[key][<span class=\"string\">'validator'</span>] = <span class=\"keyword\">new</span> SimpleSchema(Events[key].schema).validator();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// we also need the old simple Events style so we can easily use it in our app</span></div><div class=\"line\"><span class=\"comment\">// so we don't have to do Events.ITEM_CREATED.key when dispatching or listening</span></div><div class=\"line\"><span class=\"keyword\">let</span> SimpleEventsMap = &#123;&#125;;</div><div class=\"line\">_.each(Events, (value, key) =&gt; &#123;</div><div class=\"line\">    SimpleEventsMap[key] = value.key;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> SimpleEventsMap;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;Events&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/extendForValidation.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./events'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (emitter) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> oldEmit = emitter.emit;</div><div class=\"line\">    <span class=\"keyword\">const</span> newEmit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Events[event]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (Events[event].validator) &#123;</div><div class=\"line\">            Events[event].validator.validate(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        oldEmit(event, data);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    emitter.emit = newEmit.bind(emitter);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> emitter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> Events <span class=\"keyword\">from</span> <span class=\"string\">'./events'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> extendForValidation <span class=\"keyword\">from</span> <span class=\"string\">'./extendForValidation'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Emitter = extendForValidation(</div><div class=\"line\">    <span class=\"keyword\">new</span> EventEmitter()</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Emitter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;Emitter, Events&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>Event listeners <strong>must</strong> delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services,\nand then you can run an integration test easily.</p>\n<p>If you do want to test them, use the strategy in the <a href=\"/chapters/3/services.html#Dependency-Injection\"><strong>Services - Dependency Injection</strong></a> and make your listener a class,\nand inject the services it uses.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"The-Problem\"><a href=\"#The-Problem\" class=\"headerlink\" title=\"The Problem\"></a>The Problem</h2><p>Let’s start with the problem. Something happens in your system, like: you add a new item for sale.</p>\n<p>When this happens you need to do:</p>\n<ul>\n<li>Notify people that may be interested in your sale</li>\n<li>Send an email to the Admin</li>\n<li>Charge the person 0.02$ for the fact he posted a new item for sale on your platform</li>\n</ul>\n<p>So far so good, you know that you need to have units of logic (services) for this, so after some coding hours (or minutes!) you come up with these functions:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">notifyInterestedPeopleInSale(itemId);</div><div class=\"line\">notifyAdmins(itemId);</div><div class=\"line\">processCharging(itemId);</div></pre></td></tr></table></figure>\n<p>Now you go to your <code>ItemService</code> and have something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">static</span> createItem(data) &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> itemId = Items.insert(data);</div><div class=\"line\">    </div><div class=\"line\">    notifyInterestedPeopleInSale(itemId);</div><div class=\"line\">    notifyAdmins(itemId);</div><div class=\"line\">    processCharging(itemId);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>And it seems that you are happy with this. It looks modular and decoupled. However it’s not ok because:</p>\n<ul>\n<li><strong>It knows too much</strong> about other services</li>\n<li><strong>It does too much</strong>, it’s purpose is to merely create an item, that’s it.</li>\n<li><strong>It depends on too many modules</strong>, if by any chance you decide to remove admin notifications you need to see wherever you use it and remove it.</li>\n</ul>\n<p>Besides that, the name we have is not very verbose, what if we change it?\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">createPostAndNotifyAdminsAndInterestedPeopleInSaleThenProcessCharging(data);</div></pre></td></tr></table></figure></p>\n<h2 id=\"The-Solution\"><a href=\"#The-Solution\" class=\"headerlink\" title=\"The Solution\"></a>The Solution</h2><p>Ok we can’t work with something like that, name too long, and we break the single responsability principle.\nIs there any hope for us ?\nCan we have good code when we have a lot of functionality ?</p>\n<p>Ofcourse, let’s rock and roll with the Observer pattern. The observer pattern is so simple to understand:</p>\n<ul>\n<li>When X happens I want to do Y</li>\n<li>Ability to say X happens</li>\n<li>Ability to do Y when X happens</li>\n</ul>\n<p>In code translation:\n<figure class=\"highlight mel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor npm i -S <span class=\"keyword\">event</span>-<span class=\"keyword\">emitter</span></div></pre></td></tr></table></figure></p>\n<p>PS: In Node 8 (Meteor 1.6), it is native: <a href=\"https://nodejs.org/api/events.html\" target=\"_blank\" rel=\"external\">https://nodejs.org/api/events.html</a>  </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Emitter = <span class=\"keyword\">new</span> EventEmitter();</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    ITEM_CREATED: <span class=\"string\">'item_created'</span></div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123; Emitter, Events &#125;</div></pre></td></tr></table></figure>\n<p>Now we need to say to the system that an item has been created:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createItem</span>(<span class=\"params\">userId, data</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> itemId = Items.insert(data);</div><div class=\"line\">    </div><div class=\"line\">    Emitter.emit(Events.ITEM_CREATED, &#123;itemId, userId&#125;);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>Now, notifications and payment are two modules that aren’t necessarily related, they don’t really need to know about each other.\nThis is why our listeners, should be close to their code:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/notifications/listeners.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;itemId&#125;</span>) </span>&#123; </div><div class=\"line\">    notifyInterestedPeopleInSale(itemId);</div><div class=\"line\">    notifyAdmins(itemId);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/payments/listeners.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\">Emitter.on(Events.ITEM_CREATED, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">&#123;itemId&#125;</span>) </span>&#123; </div><div class=\"line\">    processCharging(itemId);</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>What do we exactly gain by using this strategy ?</p>\n<ul>\n<li>You can plug-in additional functionality by listening to events</li>\n<li>If item creation is done from multiple places, if you want to remove/add functionality you do it in one place</li>\n<li>It’s easy to find what listeners you have if you respect the pattern, simply searching for <code>Events.ITEM_CREATED</code> in your project finds you everything you need (listeners, emitters)</li>\n<li>The code is independent and doesn’t know about other functionality, which is the way it should be</li>\n</ul>\n<p>Watch the pattern: <code>MODEL_ACTION: &#39;model_action&#39;</code>. Begin all your event names with the subject of interest, and if the event name\nalso needs to contain the one who did an action, like the admin for example: <code>MODEL_ACTION_BY_ADMIN</code></p>\n<p>Be very careful with verb tenses, if it’s present, then it’s before the item creation, if it’s past-tense it’s after that action has been made:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Emitter.emit(Events.ITEM_CREATE, &#123;item&#125;);</div><div class=\"line\"><span class=\"keyword\">const</span> _id = Items.insert(item);</div><div class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123;_id, item&#125;);</div></pre></td></tr></table></figure>\n<p><strong>Bottom line</strong>\nWhen we are doing non-related logic inside the service, just dispatch an event and hook in a listener. You are doing yourself a big favor!</p>\n<h2 id=\"Event-Params\"><a href=\"#Event-Params\" class=\"headerlink\" title=\"Event Params\"></a>Event Params</h2><p>When you emit an event, send an object as a single parameter, instead of multiple parameters or other types.\nThis gives verbosity to the code.</p>\n<p>A common mistake is the fact that when you dispatch an event, you tend to send data,\nwhich would help the listener, especially if it’s your first one.</p>\n<p>For example, you dispatch something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">Emitter.emit(Events.ITEM_CREATED, &#123;</div><div class=\"line\">    itemPrice: X,</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>Because you want this data to be used in the payment processor. However, this is a bad way of sending events, events should be dispatched with object or objectId of their interest and other data\nrelated to the Event itself.</p>\n<p>Basically the rule is: when you dispatch events, imagine that you don’t know about who is going to use them. There aren’t any strict rules here.</p>\n<p>When item is created I want to send:</p>\n<ul>\n<li>Item identification</li>\n<li>Who added this item</li>\n</ul>\n<p>It’s not bad to send the full item, it’s up to you, my personal preference is to send ids as much as I can, but there\nare ofcourse scenarios where I’d rather send the full <code>item</code> object, because I know a lot of listeners will need it.</p>\n<p>Doesn’t matter if you do 3 additional finds in your listeners. Most of the times when you do the finds, you will use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"external\">Grapher</a>,\nand fetch only the fields you need. </p>\n<p>Aren’t Events just great ?</p>\n<h2 id=\"When-to-use\"><a href=\"#When-to-use\" class=\"headerlink\" title=\"When to use\"></a>When to use</h2><p>You can use them in most situations but I strongly recommend using them when:</p>\n<ul>\n<li>You have to create notifications of any kind (push, app, emails)</li>\n<li>You have a service that knows too much </li>\n<li>You want to have something easily pluggable and upluggable in your system</li>\n</ul>\n<h2 id=\"Validation-amp-Maintenance\"><a href=\"#Validation-amp-Maintenance\" class=\"headerlink\" title=\"Validation &amp; Maintenance\"></a>Validation &amp; Maintenance</h2><p>How do I enforce validation for events parameters ?</p>\n<p>Again, you have to keep things simple, but if your code-base grows a lot, this will be needed,\nespecially if events are dispatched from multiple places. You need to be sure that the events receive valid parameters.</p>\n<p>Just a simple way to architect this:\n<code>/imports/api/events.js</code> -&gt; <code>/imports/api/events/index.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/events.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    ITEM_CREATED: &#123;</div><div class=\"line\">        key: <span class=\"string\">'item_created'</span>,</div><div class=\"line\">        schema: &#123;</div><div class=\"line\">            itemId: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Events;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/events.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'underscore'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    ITEM_CREATED: &#123;</div><div class=\"line\">        key: <span class=\"string\">'item_created'</span>,</div><div class=\"line\">        schema: &#123;</div><div class=\"line\">            itemId: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// put this in a separate module, it's for demo here</span></div><div class=\"line\"><span class=\"comment\">// we create SimpleSchema validator function for each event with schema </span></div><div class=\"line\">_.each(Events, (value, key) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!Events[key].schema) &#123;</div><div class=\"line\">        <span class=\"keyword\">return</span>;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    Events[key][<span class=\"string\">'validator'</span>] = <span class=\"keyword\">new</span> SimpleSchema(Events[key].schema).validator();</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// we also need the old simple Events style so we can easily use it in our app</span></div><div class=\"line\"><span class=\"comment\">// so we don't have to do Events.ITEM_CREATED.key when dispatching or listening</span></div><div class=\"line\"><span class=\"keyword\">let</span> SimpleEventsMap = &#123;&#125;;</div><div class=\"line\">_.each(Events, (value, key) =&gt; &#123;</div><div class=\"line\">    SimpleEventsMap[key] = value.key;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> SimpleEventsMap;</div><div class=\"line\"><span class=\"keyword\">export</span> &#123;Events&#125;;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/extendForValidation.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'./events'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> (emitter) =&gt; &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> oldEmit = emitter.emit;</div><div class=\"line\">    <span class=\"keyword\">const</span> newEmit = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event, data</span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">if</span> (!Events[event]) &#123;</div><div class=\"line\">            <span class=\"keyword\">return</span>;</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">if</span> (Events[event].validator) &#123;</div><div class=\"line\">            Events[event].validator.validate(data);</div><div class=\"line\">        &#125;</div><div class=\"line\">        </div><div class=\"line\">        oldEmit(event, data);</div><div class=\"line\">    &#125;;</div><div class=\"line\">    </div><div class=\"line\">    emitter.emit = newEmit.bind(emitter);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> emitter;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/events/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> Events <span class=\"keyword\">from</span> <span class=\"string\">'./events'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> extendForValidation <span class=\"keyword\">from</span> <span class=\"string\">'./extendForValidation'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Emitter = extendForValidation(</div><div class=\"line\">    <span class=\"keyword\">new</span> EventEmitter()</div><div class=\"line\">);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Emitter;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;Emitter, Events&#125;;</div></pre></td></tr></table></figure>\n<h2 id=\"Testing\"><a href=\"#Testing\" class=\"headerlink\" title=\"Testing\"></a>Testing</h2><p>Event listeners <strong>must</strong> delegate their job to services directly, they are proxies. Event Listeners should not contain any logic. Create unit-tests for services,\nand then you can run an integration test easily.</p>\n<p>If you do want to test them, use the strategy in the <a href=\"/chapters/3/services.html#Dependency-Injection\"><strong>Services - Dependency Injection</strong></a> and make your listener a class,\nand inject the services it uses.</p>\n"},{"title":"Overall Structure","description":"Let's bring it to a degree of order","disqusPage":"Chapter 3: Structure","_content":"\nSo, we discussed about many concepts and we described where to put them. But the thing is,\nit doesn't really matter that much, what we describe here are a set of practices, there's no such thing\nas the best way, or the way. Whatever you choose, be consistent and try to document it.\n\nTo give you an overall image, it will look something like this:\n\n## Standalone\n\n```bash\nserver\n    # This is where you import everything you need on server to start\n    # Most likely it will be just: import '/imports/api/server'\n    main.js\nclient\n    # This is where you import everything you need on client to start\n    # Most likely it will be just: import '/imports/client/init'\n    main.js\nimports\n    # This is where our logic belongs\n    api\n        # We import all the \"/server\" folders from our modules\n        server.js\n        # For emitter and events (you can also make it a folder with index.js if you need decoupling)\n        events.js\n        # For securing your app (you can also make it a folder with index.js if you need decoupling)\n        security.js\n        emails\n            send.js\n            listeners.js\n            templates\n                {Module}NewEmail.jsx\n        # We couple code based on different modules\n        {module}\n            # Here we store things that need to run only on the server\n            server\n                exposures\n                    get{Module}.expose.js\n                    index.js # Here we import them all\n                listeners.js\n                methods.js\n                publications.js\n                # Here we import all of them (including ./exposures)\n                index.js\n            # Here we decouple our logic\n            services\n                {Module}Service.js\n            testing\n                server\n                    {Module}Service.test.js\n            \n    client # Outside this scope (This will be treated in another chapter)\n    # This is where our persistence layer is. Including external APIs\n    db\n        # Here we import and export all collections for easy usage\n        index.js\n        {module}\n            # Nice grapher queries\n            queries\n                get{Module}.js\n            aggregations\n                getGroupedElementsByEmail.js\n                testing\n                    server\n                        getGroupedElementsByEmail.test.js\n            collection.js\n            schema.js\n            hooks.js\n            links.js\n    # For dummy data\n    fixtures\n        createUsers.js\n        config.js\n        index.js\n```\n\n## Microservice\n\n```bash\ncore\n    # For emitter and events (you can also make it a folder with index.js if you need decoupling)\n    events.js\n    # For securing your app (you can also make it a folder with index.js if you need decoupling)\n    security.js\n    emails\n        send.js\n        listeners.js\n        templates\n            {Module}NewEmail.jsx\n    services\n        {module}\n            {Module}Service.js\n            testing\n                server\n                    {Module}Service.test.js\n    # This is where our persistence layer is. Including external APIs\n    db\n        # Here we import and export all collections for easy usage\n        index.js \n        {module}\n            # Nice grapher queries\n            queries\n                get{Module}.js\n            aggregations\n                getGroupedElementsByEmail.js\n                testing\n                    server\n                        getGroupedElementsByEmail.test.js\n            collection.js\n            schema.js\n            links.js\n    # For dummy data\n    fixtures\n        createUsers.js\n        config.js\n        index.js\n{microservice}\n    server\n        main.js\n    client\n        main.js\n    imports\n        api\n            # We import all the \"/server\" folders from our modules\n            server.js\n            # We have the bridge between Meteor and our core\n            {module}\n                # Here we store things that need to run only on the server\n                server\n                    exposures\n                       get{Module}.expose.js\n                       index.js # Which imports all\n                    listeners.js\n                    methods.js\n                    publications.js\n                    # Here we import all the files (including ./exposures)\n                    index.js\n        client # Outside this scope (This will be treated in another chapter)\n```\n\n","source":"chapters/3/structure.md","raw":"---\ntitle: 'Overall Structure'\ndescription: Let's bring it to a degree of order\ndisqusPage: 'Chapter 3: Structure'\n---\n\nSo, we discussed about many concepts and we described where to put them. But the thing is,\nit doesn't really matter that much, what we describe here are a set of practices, there's no such thing\nas the best way, or the way. Whatever you choose, be consistent and try to document it.\n\nTo give you an overall image, it will look something like this:\n\n## Standalone\n\n```bash\nserver\n    # This is where you import everything you need on server to start\n    # Most likely it will be just: import '/imports/api/server'\n    main.js\nclient\n    # This is where you import everything you need on client to start\n    # Most likely it will be just: import '/imports/client/init'\n    main.js\nimports\n    # This is where our logic belongs\n    api\n        # We import all the \"/server\" folders from our modules\n        server.js\n        # For emitter and events (you can also make it a folder with index.js if you need decoupling)\n        events.js\n        # For securing your app (you can also make it a folder with index.js if you need decoupling)\n        security.js\n        emails\n            send.js\n            listeners.js\n            templates\n                {Module}NewEmail.jsx\n        # We couple code based on different modules\n        {module}\n            # Here we store things that need to run only on the server\n            server\n                exposures\n                    get{Module}.expose.js\n                    index.js # Here we import them all\n                listeners.js\n                methods.js\n                publications.js\n                # Here we import all of them (including ./exposures)\n                index.js\n            # Here we decouple our logic\n            services\n                {Module}Service.js\n            testing\n                server\n                    {Module}Service.test.js\n            \n    client # Outside this scope (This will be treated in another chapter)\n    # This is where our persistence layer is. Including external APIs\n    db\n        # Here we import and export all collections for easy usage\n        index.js\n        {module}\n            # Nice grapher queries\n            queries\n                get{Module}.js\n            aggregations\n                getGroupedElementsByEmail.js\n                testing\n                    server\n                        getGroupedElementsByEmail.test.js\n            collection.js\n            schema.js\n            hooks.js\n            links.js\n    # For dummy data\n    fixtures\n        createUsers.js\n        config.js\n        index.js\n```\n\n## Microservice\n\n```bash\ncore\n    # For emitter and events (you can also make it a folder with index.js if you need decoupling)\n    events.js\n    # For securing your app (you can also make it a folder with index.js if you need decoupling)\n    security.js\n    emails\n        send.js\n        listeners.js\n        templates\n            {Module}NewEmail.jsx\n    services\n        {module}\n            {Module}Service.js\n            testing\n                server\n                    {Module}Service.test.js\n    # This is where our persistence layer is. Including external APIs\n    db\n        # Here we import and export all collections for easy usage\n        index.js \n        {module}\n            # Nice grapher queries\n            queries\n                get{Module}.js\n            aggregations\n                getGroupedElementsByEmail.js\n                testing\n                    server\n                        getGroupedElementsByEmail.test.js\n            collection.js\n            schema.js\n            links.js\n    # For dummy data\n    fixtures\n        createUsers.js\n        config.js\n        index.js\n{microservice}\n    server\n        main.js\n    client\n        main.js\n    imports\n        api\n            # We import all the \"/server\" folders from our modules\n            server.js\n            # We have the bridge between Meteor and our core\n            {module}\n                # Here we store things that need to run only on the server\n                server\n                    exposures\n                       get{Module}.expose.js\n                       index.js # Which imports all\n                    listeners.js\n                    methods.js\n                    publications.js\n                    # Here we import all the files (including ./exposures)\n                    index.js\n        client # Outside this scope (This will be treated in another chapter)\n```\n\n","date":"2017-10-25T11:09:23.022Z","updated":"2017-10-25T11:09:23.021Z","path":"chapters/3/structure.html","_id":"cj8zm7nr60003qmu5022spovx","comments":1,"layout":"page","content":"<p>So, we discussed about many concepts and we described where to put them. But the thing is,\nit doesn’t really matter that much, what we describe here are a set of practices, there’s no such thing\nas the best way, or the way. Whatever you choose, be consistent and try to document it.</p>\n<p>To give you an overall image, it will look something like this:</p>\n<h2 id=\"Standalone\"><a href=\"#Standalone\" class=\"headerlink\" title=\"Standalone\"></a>Standalone</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">server</div><div class=\"line\">    <span class=\"comment\"># This is where you import everything you need on server to start</span></div><div class=\"line\">    <span class=\"comment\"># Most likely it will be just: import '/imports/api/server'</span></div><div class=\"line\">    main.js</div><div class=\"line\">client</div><div class=\"line\">    <span class=\"comment\"># This is where you import everything you need on client to start</span></div><div class=\"line\">    <span class=\"comment\"># Most likely it will be just: import '/imports/client/init'</span></div><div class=\"line\">    main.js</div><div class=\"line\">imports</div><div class=\"line\">    <span class=\"comment\"># This is where our logic belongs</span></div><div class=\"line\">    api</div><div class=\"line\">        <span class=\"comment\"># We import all the \"/server\" folders from our modules</span></div><div class=\"line\">        server.js</div><div class=\"line\">        <span class=\"comment\"># For emitter and events (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">        events.js</div><div class=\"line\">        <span class=\"comment\"># For securing your app (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">        security.js</div><div class=\"line\">        emails</div><div class=\"line\">            send.js</div><div class=\"line\">            listeners.js</div><div class=\"line\">            templates</div><div class=\"line\">                &#123;Module&#125;NewEmail.jsx</div><div class=\"line\">        <span class=\"comment\"># We couple code based on different modules</span></div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            <span class=\"comment\"># Here we store things that need to run only on the server</span></div><div class=\"line\">            server</div><div class=\"line\">                exposures</div><div class=\"line\">                    get&#123;Module&#125;.expose.js</div><div class=\"line\">                    index.js <span class=\"comment\"># Here we import them all</span></div><div class=\"line\">                listeners.js</div><div class=\"line\">                methods.js</div><div class=\"line\">                publications.js</div><div class=\"line\">                <span class=\"comment\"># Here we import all of them (including ./exposures)</span></div><div class=\"line\">                index.js</div><div class=\"line\">            <span class=\"comment\"># Here we decouple our logic</span></div><div class=\"line\">            services</div><div class=\"line\">                &#123;Module&#125;Service.js</div><div class=\"line\">            testing</div><div class=\"line\">                server</div><div class=\"line\">                    &#123;Module&#125;Service.test.js</div><div class=\"line\">            </div><div class=\"line\">    client <span class=\"comment\"># Outside this scope (This will be treated in another chapter)</span></div><div class=\"line\">    <span class=\"comment\"># This is where our persistence layer is. Including external APIs</span></div><div class=\"line\">    db</div><div class=\"line\">        <span class=\"comment\"># Here we import and export all collections for easy usage</span></div><div class=\"line\">        index.js</div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            <span class=\"comment\"># Nice grapher queries</span></div><div class=\"line\">            queries</div><div class=\"line\">                get&#123;Module&#125;.js</div><div class=\"line\">            aggregations</div><div class=\"line\">                getGroupedElementsByEmail.js</div><div class=\"line\">                testing</div><div class=\"line\">                    server</div><div class=\"line\">                        getGroupedElementsByEmail.test.js</div><div class=\"line\">            collection.js</div><div class=\"line\">            schema.js</div><div class=\"line\">            hooks.js</div><div class=\"line\">            links.js</div><div class=\"line\">    <span class=\"comment\"># For dummy data</span></div><div class=\"line\">    fixtures</div><div class=\"line\">        createUsers.js</div><div class=\"line\">        config.js</div><div class=\"line\">        index.js</div></pre></td></tr></table></figure>\n<h2 id=\"Microservice\"><a href=\"#Microservice\" class=\"headerlink\" title=\"Microservice\"></a>Microservice</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">core</div><div class=\"line\">    <span class=\"comment\"># For emitter and events (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">    events.js</div><div class=\"line\">    <span class=\"comment\"># For securing your app (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">    security.js</div><div class=\"line\">    emails</div><div class=\"line\">        send.js</div><div class=\"line\">        listeners.js</div><div class=\"line\">        templates</div><div class=\"line\">            &#123;Module&#125;NewEmail.jsx</div><div class=\"line\">    services</div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            &#123;Module&#125;Service.js</div><div class=\"line\">            testing</div><div class=\"line\">                server</div><div class=\"line\">                    &#123;Module&#125;Service.test.js</div><div class=\"line\">    <span class=\"comment\"># This is where our persistence layer is. Including external APIs</span></div><div class=\"line\">    db</div><div class=\"line\">        <span class=\"comment\"># Here we import and export all collections for easy usage</span></div><div class=\"line\">        index.js </div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            <span class=\"comment\"># Nice grapher queries</span></div><div class=\"line\">            queries</div><div class=\"line\">                get&#123;Module&#125;.js</div><div class=\"line\">            aggregations</div><div class=\"line\">                getGroupedElementsByEmail.js</div><div class=\"line\">                testing</div><div class=\"line\">                    server</div><div class=\"line\">                        getGroupedElementsByEmail.test.js</div><div class=\"line\">            collection.js</div><div class=\"line\">            schema.js</div><div class=\"line\">            links.js</div><div class=\"line\">    <span class=\"comment\"># For dummy data</span></div><div class=\"line\">    fixtures</div><div class=\"line\">        createUsers.js</div><div class=\"line\">        config.js</div><div class=\"line\">        index.js</div><div class=\"line\">&#123;microservice&#125;</div><div class=\"line\">    server</div><div class=\"line\">        main.js</div><div class=\"line\">    client</div><div class=\"line\">        main.js</div><div class=\"line\">    imports</div><div class=\"line\">        api</div><div class=\"line\">            <span class=\"comment\"># We import all the \"/server\" folders from our modules</span></div><div class=\"line\">            server.js</div><div class=\"line\">            <span class=\"comment\"># We have the bridge between Meteor and our core</span></div><div class=\"line\">            &#123;module&#125;</div><div class=\"line\">                <span class=\"comment\"># Here we store things that need to run only on the server</span></div><div class=\"line\">                server</div><div class=\"line\">                    exposures</div><div class=\"line\">                       get&#123;Module&#125;.expose.js</div><div class=\"line\">                       index.js <span class=\"comment\"># Which imports all</span></div><div class=\"line\">                    listeners.js</div><div class=\"line\">                    methods.js</div><div class=\"line\">                    publications.js</div><div class=\"line\">                    <span class=\"comment\"># Here we import all the files (including ./exposures)</span></div><div class=\"line\">                    index.js</div><div class=\"line\">        client <span class=\"comment\"># Outside this scope (This will be treated in another chapter)</span></div></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>So, we discussed about many concepts and we described where to put them. But the thing is,\nit doesn’t really matter that much, what we describe here are a set of practices, there’s no such thing\nas the best way, or the way. Whatever you choose, be consistent and try to document it.</p>\n<p>To give you an overall image, it will look something like this:</p>\n<h2 id=\"Standalone\"><a href=\"#Standalone\" class=\"headerlink\" title=\"Standalone\"></a>Standalone</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div></pre></td><td class=\"code\"><pre><div class=\"line\">server</div><div class=\"line\">    <span class=\"comment\"># This is where you import everything you need on server to start</span></div><div class=\"line\">    <span class=\"comment\"># Most likely it will be just: import '/imports/api/server'</span></div><div class=\"line\">    main.js</div><div class=\"line\">client</div><div class=\"line\">    <span class=\"comment\"># This is where you import everything you need on client to start</span></div><div class=\"line\">    <span class=\"comment\"># Most likely it will be just: import '/imports/client/init'</span></div><div class=\"line\">    main.js</div><div class=\"line\">imports</div><div class=\"line\">    <span class=\"comment\"># This is where our logic belongs</span></div><div class=\"line\">    api</div><div class=\"line\">        <span class=\"comment\"># We import all the \"/server\" folders from our modules</span></div><div class=\"line\">        server.js</div><div class=\"line\">        <span class=\"comment\"># For emitter and events (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">        events.js</div><div class=\"line\">        <span class=\"comment\"># For securing your app (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">        security.js</div><div class=\"line\">        emails</div><div class=\"line\">            send.js</div><div class=\"line\">            listeners.js</div><div class=\"line\">            templates</div><div class=\"line\">                &#123;Module&#125;NewEmail.jsx</div><div class=\"line\">        <span class=\"comment\"># We couple code based on different modules</span></div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            <span class=\"comment\"># Here we store things that need to run only on the server</span></div><div class=\"line\">            server</div><div class=\"line\">                exposures</div><div class=\"line\">                    get&#123;Module&#125;.expose.js</div><div class=\"line\">                    index.js <span class=\"comment\"># Here we import them all</span></div><div class=\"line\">                listeners.js</div><div class=\"line\">                methods.js</div><div class=\"line\">                publications.js</div><div class=\"line\">                <span class=\"comment\"># Here we import all of them (including ./exposures)</span></div><div class=\"line\">                index.js</div><div class=\"line\">            <span class=\"comment\"># Here we decouple our logic</span></div><div class=\"line\">            services</div><div class=\"line\">                &#123;Module&#125;Service.js</div><div class=\"line\">            testing</div><div class=\"line\">                server</div><div class=\"line\">                    &#123;Module&#125;Service.test.js</div><div class=\"line\">            </div><div class=\"line\">    client <span class=\"comment\"># Outside this scope (This will be treated in another chapter)</span></div><div class=\"line\">    <span class=\"comment\"># This is where our persistence layer is. Including external APIs</span></div><div class=\"line\">    db</div><div class=\"line\">        <span class=\"comment\"># Here we import and export all collections for easy usage</span></div><div class=\"line\">        index.js</div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            <span class=\"comment\"># Nice grapher queries</span></div><div class=\"line\">            queries</div><div class=\"line\">                get&#123;Module&#125;.js</div><div class=\"line\">            aggregations</div><div class=\"line\">                getGroupedElementsByEmail.js</div><div class=\"line\">                testing</div><div class=\"line\">                    server</div><div class=\"line\">                        getGroupedElementsByEmail.test.js</div><div class=\"line\">            collection.js</div><div class=\"line\">            schema.js</div><div class=\"line\">            hooks.js</div><div class=\"line\">            links.js</div><div class=\"line\">    <span class=\"comment\"># For dummy data</span></div><div class=\"line\">    fixtures</div><div class=\"line\">        createUsers.js</div><div class=\"line\">        config.js</div><div class=\"line\">        index.js</div></pre></td></tr></table></figure>\n<h2 id=\"Microservice\"><a href=\"#Microservice\" class=\"headerlink\" title=\"Microservice\"></a>Microservice</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div></pre></td><td class=\"code\"><pre><div class=\"line\">core</div><div class=\"line\">    <span class=\"comment\"># For emitter and events (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">    events.js</div><div class=\"line\">    <span class=\"comment\"># For securing your app (you can also make it a folder with index.js if you need decoupling)</span></div><div class=\"line\">    security.js</div><div class=\"line\">    emails</div><div class=\"line\">        send.js</div><div class=\"line\">        listeners.js</div><div class=\"line\">        templates</div><div class=\"line\">            &#123;Module&#125;NewEmail.jsx</div><div class=\"line\">    services</div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            &#123;Module&#125;Service.js</div><div class=\"line\">            testing</div><div class=\"line\">                server</div><div class=\"line\">                    &#123;Module&#125;Service.test.js</div><div class=\"line\">    <span class=\"comment\"># This is where our persistence layer is. Including external APIs</span></div><div class=\"line\">    db</div><div class=\"line\">        <span class=\"comment\"># Here we import and export all collections for easy usage</span></div><div class=\"line\">        index.js </div><div class=\"line\">        &#123;module&#125;</div><div class=\"line\">            <span class=\"comment\"># Nice grapher queries</span></div><div class=\"line\">            queries</div><div class=\"line\">                get&#123;Module&#125;.js</div><div class=\"line\">            aggregations</div><div class=\"line\">                getGroupedElementsByEmail.js</div><div class=\"line\">                testing</div><div class=\"line\">                    server</div><div class=\"line\">                        getGroupedElementsByEmail.test.js</div><div class=\"line\">            collection.js</div><div class=\"line\">            schema.js</div><div class=\"line\">            links.js</div><div class=\"line\">    <span class=\"comment\"># For dummy data</span></div><div class=\"line\">    fixtures</div><div class=\"line\">        createUsers.js</div><div class=\"line\">        config.js</div><div class=\"line\">        index.js</div><div class=\"line\">&#123;microservice&#125;</div><div class=\"line\">    server</div><div class=\"line\">        main.js</div><div class=\"line\">    client</div><div class=\"line\">        main.js</div><div class=\"line\">    imports</div><div class=\"line\">        api</div><div class=\"line\">            <span class=\"comment\"># We import all the \"/server\" folders from our modules</span></div><div class=\"line\">            server.js</div><div class=\"line\">            <span class=\"comment\"># We have the bridge between Meteor and our core</span></div><div class=\"line\">            &#123;module&#125;</div><div class=\"line\">                <span class=\"comment\"># Here we store things that need to run only on the server</span></div><div class=\"line\">                server</div><div class=\"line\">                    exposures</div><div class=\"line\">                       get&#123;Module&#125;.expose.js</div><div class=\"line\">                       index.js <span class=\"comment\"># Which imports all</span></div><div class=\"line\">                    listeners.js</div><div class=\"line\">                    methods.js</div><div class=\"line\">                    publications.js</div><div class=\"line\">                    <span class=\"comment\"># Here we import all the files (including ./exposures)</span></div><div class=\"line\">                    index.js</div><div class=\"line\">        client <span class=\"comment\"># Outside this scope (This will be treated in another chapter)</span></div></pre></td></tr></table></figure>\n"},{"title":"Testing","description":"Writing Tests is so joyful!","disqusPage":"Chapter 3: Testing","_content":"\n## Why\n\nBecause your code grows and you make less mistakes.\nBecause it's often faster for you to write a service and test it in a simple unit-test, rather then going on browser for manual testing.\n\nThere are so many articles about why testing is mandatory. Just take my word for it.\n\n## Configuration \nThis article assumes you thoroughly read: https://guide.meteor.com/testing.html \n\nIf you decoupled your code nicely, it's so easy to write tests:\n\n```\nmeteor add practicalmeteor:mocha\nmeteor npm i --save-dev chai sinon\n```\n\n```\n// package.json\n{\n  \"scripts\": {\n     \"test\": \"meteor test --driver-package practicalmeteor:mocha --port 3050\"\n  }\n}\n```\n\nNow you can easily do in your terminal: `npm run test`. Then open your browser on http://localhost:3050 to see the results,\nthey will be updated live as you write your tests or update your files.\n\nTest files should end in `*.test.js` and they should have a parent (not necessarily direct) with name `client` or `server`\ndepending where we want to run them.\n\n```js\n// file: /imports/api/posts/testing/server/PostService.test.js\n\nimport {assert} from 'chai';\nimport PostService from '/imports/api/posts/services/PostService';\n\ndescribe('Post Service', function () {\n    it('Should be able to create a post', function () {\n        const postId = PostService.createPost({title: 'Hello'})\n        \n        assert.isString(postId);\n    })\n})\n```\n\n## Utilities\n\n- https://github.com/xolvio/cleaner\n- https://github.com/versolearning/meteor-factory/\n- http://sinonjs.org/releases/v4.0.1/\n- http://chaijs.com/api/assert/\n\n## Continous Integration\n\nWhenever someone does a Pull-Request, you can see if the code breaks some tests or not. This is invaluable, and so easy to implement.\nReally!\n\nSome good CI tools:\n\n- https://circleci.com/docs/1.0/getting-started/ \n- https://travis-ci.org/\n\n","source":"chapters/3/testing.md","raw":"---\ntitle: 'Testing'\ndescription: Writing Tests is so joyful!\ndisqusPage: 'Chapter 3: Testing'\n---\n\n## Why\n\nBecause your code grows and you make less mistakes.\nBecause it's often faster for you to write a service and test it in a simple unit-test, rather then going on browser for manual testing.\n\nThere are so many articles about why testing is mandatory. Just take my word for it.\n\n## Configuration \nThis article assumes you thoroughly read: https://guide.meteor.com/testing.html \n\nIf you decoupled your code nicely, it's so easy to write tests:\n\n```\nmeteor add practicalmeteor:mocha\nmeteor npm i --save-dev chai sinon\n```\n\n```\n// package.json\n{\n  \"scripts\": {\n     \"test\": \"meteor test --driver-package practicalmeteor:mocha --port 3050\"\n  }\n}\n```\n\nNow you can easily do in your terminal: `npm run test`. Then open your browser on http://localhost:3050 to see the results,\nthey will be updated live as you write your tests or update your files.\n\nTest files should end in `*.test.js` and they should have a parent (not necessarily direct) with name `client` or `server`\ndepending where we want to run them.\n\n```js\n// file: /imports/api/posts/testing/server/PostService.test.js\n\nimport {assert} from 'chai';\nimport PostService from '/imports/api/posts/services/PostService';\n\ndescribe('Post Service', function () {\n    it('Should be able to create a post', function () {\n        const postId = PostService.createPost({title: 'Hello'})\n        \n        assert.isString(postId);\n    })\n})\n```\n\n## Utilities\n\n- https://github.com/xolvio/cleaner\n- https://github.com/versolearning/meteor-factory/\n- http://sinonjs.org/releases/v4.0.1/\n- http://chaijs.com/api/assert/\n\n## Continous Integration\n\nWhenever someone does a Pull-Request, you can see if the code breaks some tests or not. This is invaluable, and so easy to implement.\nReally!\n\nSome good CI tools:\n\n- https://circleci.com/docs/1.0/getting-started/ \n- https://travis-ci.org/\n\n","date":"2017-10-25T16:31:43.624Z","updated":"2017-10-25T16:31:43.623Z","path":"chapters/3/testing.html","_id":"cj8zm95c80005qmu5w7ofp8wl","comments":1,"layout":"page","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>Because your code grows and you make less mistakes.\nBecause it’s often faster for you to write a service and test it in a simple unit-test, rather then going on browser for manual testing.</p>\n<p>There are so many articles about why testing is mandatory. Just take my word for it.</p>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>This article assumes you thoroughly read: <a href=\"https://guide.meteor.com/testing.html\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/testing.html</a> </p>\n<p>If you decoupled your code nicely, it’s so easy to write tests:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> practicalmeteor:mocha</span></div><div class=\"line\"><span class=\"bash\">meteor npm i --save-dev chai sinon</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">     <span class=\"string\">\"test\"</span>: <span class=\"string\">\"meteor test --driver-package practicalmeteor:mocha --port 3050\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now you can easily do in your terminal: <code>npm run test</code>. Then open your browser on <a href=\"http://localhost:3050\" target=\"_blank\" rel=\"external\">http://localhost:3050</a> to see the results,\nthey will be updated live as you write your tests or update your files.</p>\n<p>Test files should end in <code>*.test.js</code> and they should have a parent (not necessarily direct) with name <code>client</code> or <code>server</code>\ndepending where we want to run them.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/testing/server/PostService.test.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;assert&#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> PostService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/posts/services/PostService'</span>;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'Post Service'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    it(<span class=\"string\">'Should be able to create a post'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> postId = PostService.createPost(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'Hello'</span>&#125;)</div><div class=\"line\">        </div><div class=\"line\">        assert.isString(postId);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h2><ul>\n<li><a href=\"https://github.com/xolvio/cleaner\" target=\"_blank\" rel=\"external\">https://github.com/xolvio/cleaner</a></li>\n<li><a href=\"https://github.com/versolearning/meteor-factory/\" target=\"_blank\" rel=\"external\">https://github.com/versolearning/meteor-factory/</a></li>\n<li><a href=\"http://sinonjs.org/releases/v4.0.1/\" target=\"_blank\" rel=\"external\">http://sinonjs.org/releases/v4.0.1/</a></li>\n<li><a href=\"http://chaijs.com/api/assert/\" target=\"_blank\" rel=\"external\">http://chaijs.com/api/assert/</a></li>\n</ul>\n<h2 id=\"Continous-Integration\"><a href=\"#Continous-Integration\" class=\"headerlink\" title=\"Continous Integration\"></a>Continous Integration</h2><p>Whenever someone does a Pull-Request, you can see if the code breaks some tests or not. This is invaluable, and so easy to implement.\nReally!</p>\n<p>Some good CI tools:</p>\n<ul>\n<li><a href=\"https://circleci.com/docs/1.0/getting-started/\" target=\"_blank\" rel=\"external\">https://circleci.com/docs/1.0/getting-started/</a> </li>\n<li><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">https://travis-ci.org/</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why\"></a>Why</h2><p>Because your code grows and you make less mistakes.\nBecause it’s often faster for you to write a service and test it in a simple unit-test, rather then going on browser for manual testing.</p>\n<p>There are so many articles about why testing is mandatory. Just take my word for it.</p>\n<h2 id=\"Configuration\"><a href=\"#Configuration\" class=\"headerlink\" title=\"Configuration\"></a>Configuration</h2><p>This article assumes you thoroughly read: <a href=\"https://guide.meteor.com/testing.html\" target=\"_blank\" rel=\"external\">https://guide.meteor.com/testing.html</a> </p>\n<p>If you decoupled your code nicely, it’s so easy to write tests:</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor <span class=\"keyword\">add</span><span class=\"bash\"> practicalmeteor:mocha</span></div><div class=\"line\"><span class=\"bash\">meteor npm i --save-dev chai sinon</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight xquery\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">// package.json</div><div class=\"line\">&#123;</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">     <span class=\"string\">\"test\"</span>: <span class=\"string\">\"meteor test --driver-package practicalmeteor:mocha --port 3050\"</span></div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Now you can easily do in your terminal: <code>npm run test</code>. Then open your browser on <a href=\"http://localhost:3050\" target=\"_blank\" rel=\"external\">http://localhost:3050</a> to see the results,\nthey will be updated live as you write your tests or update your files.</p>\n<p>Test files should end in <code>*.test.js</code> and they should have a parent (not necessarily direct) with name <code>client</code> or <code>server</code>\ndepending where we want to run them.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/testing/server/PostService.test.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;assert&#125; <span class=\"keyword\">from</span> <span class=\"string\">'chai'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> PostService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/posts/services/PostService'</span>;</div><div class=\"line\"></div><div class=\"line\">describe(<span class=\"string\">'Post Service'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    it(<span class=\"string\">'Should be able to create a post'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> postId = PostService.createPost(&#123;<span class=\"attr\">title</span>: <span class=\"string\">'Hello'</span>&#125;)</div><div class=\"line\">        </div><div class=\"line\">        assert.isString(postId);</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Utilities\"><a href=\"#Utilities\" class=\"headerlink\" title=\"Utilities\"></a>Utilities</h2><ul>\n<li><a href=\"https://github.com/xolvio/cleaner\" target=\"_blank\" rel=\"external\">https://github.com/xolvio/cleaner</a></li>\n<li><a href=\"https://github.com/versolearning/meteor-factory/\" target=\"_blank\" rel=\"external\">https://github.com/versolearning/meteor-factory/</a></li>\n<li><a href=\"http://sinonjs.org/releases/v4.0.1/\" target=\"_blank\" rel=\"external\">http://sinonjs.org/releases/v4.0.1/</a></li>\n<li><a href=\"http://chaijs.com/api/assert/\" target=\"_blank\" rel=\"external\">http://chaijs.com/api/assert/</a></li>\n</ul>\n<h2 id=\"Continous-Integration\"><a href=\"#Continous-Integration\" class=\"headerlink\" title=\"Continous Integration\"></a>Continous Integration</h2><p>Whenever someone does a Pull-Request, you can see if the code breaks some tests or not. This is invaluable, and so easy to implement.\nReally!</p>\n<p>Some good CI tools:</p>\n<ul>\n<li><a href=\"https://circleci.com/docs/1.0/getting-started/\" target=\"_blank\" rel=\"external\">https://circleci.com/docs/1.0/getting-started/</a> </li>\n<li><a href=\"https://travis-ci.org/\" target=\"_blank\" rel=\"external\">https://travis-ci.org/</a></li>\n</ul>\n"},{"title":"Services","description":"Using services to decouple your code","disqusPage":"Chapter 3: Services","_content":"\n## What is a service? \nA service is a unit of work (a function) or a group of very related functionality (a class)\n\nUsing services is linked to the [Single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle)\n\n```simple-text\nQ: So when do we need to use services?\nA: Everytime!\nQ: Where do we use services?\nA: Everywhere!\n```\n\nOk we're done here, everything is clear now, right?\n\nJokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use *Email.send*. Well, *Email* is actually a service, but now how you send it in your app ?\n\nLet's say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a Meteor method ? Inside a function ? Inside a class ?\n\nThe answer is: **NOT inside the Meteor method**\n\nUsually, you tend to couple logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the *C* (Controller) in *MVC*, \nthe *C* does not contain logic, the *C* is a boss that delegates work to *M* (Services aka Models)\n\nIt is also bad because methods are a communication layer between the client and the server, they shouldn't store business logic, or logic of any kind, imagine them as proxies that communicate with your services.\n\nLet's start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.\n\nDon't forget to read: https://github.com/ryanmcdermott/clean-code-javascript \n\n## Sample\n```js\nclass ItemService {\n    static createItem() {\n        // put logic here for item creation\n    }\n    \n    static updateItem(id, data) {\n        const item = this._getItem(id)\n        // do something with it\n    }\n    \n    static _getItem(itemId) {\n        // returns the item from database or throws an exception\n    }\n}\n\nexport default ItemService;\n```\n\nIn most cases, you want your services to be a class with static methods, and not an instance of that class `new ItemService()`, however\nwe'll see below why in some cases using the instance makes more sense.\n\n## Structuring\n\nBy default we are going to put them inside:\n`/imports/api/{module}/services`\n\nUsually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.\n\nIf your services need more decoupling feel free to nest them:\n`/imports/api/{module}/services/{submodule}`\n\nIf you are writing HTTP APIs separate the Service of fetching/persisting data and put it in `/imports/db/{module}` and\nthe one that does include the app/business logic keep it in `/imports/api/{module}`. The one inside `/imports/api` should instantiate the one from `/imports/db` with the correct API keys (most likely retrieved from `Meteor.settings`)\n\nName your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it's a function, make the sure the filename is a verb.\n\nInside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class with static methods.\n\n## Creating Services\n\nGo API first. Don't try to think about the logic, try to think about how you are going to use it. This is why [**TDD**](https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/) works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.\n\nSo, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!\n\n#### Helpful questions:\n1. What would be the cleanest, easiest way to use this Service?\n2. How can I make it so it's easier to understand by others?\n3. What comments can I leave so the next developer that comes in understands this?\n4. Does my service have a single responsability?\n5. Is there any functionality in my service that is outside its scope so I can decouple it?\n\n## Conventions\n\nAgain, don't forget to read: https://github.com/ryanmcdermott/clean-code-javascript. I'm not joking, read it! \n\n#### Functions should be actions or interrogations\n\nPlease favor longer names for small scope, lower names for large scopes.\n\n```js\n// BAD\nobject.author()\nobject.veryBad()\nobject.closing()\nobject.mkSmtGdAbtIt()\n```\n\n```js\n// GOOD\nobject.getAuthor()\nobject.isGood()\nobject.close()\nobject.makeSomethingGoodAboutIt()\n```\n\n#### Variable names should be substantives or interrogations\n\n```js\n// BAD\nlet making;\nlet made;\n```\n\n```js\n// GOOD\nlet isMaking;\nlet isMade;\n```\n\n#### Functions should be small\n\nA function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.\n\n#### Indent with 4 spaces\n\nWith JS and with JSX.\nWhy 4? Because it forces you to decouple and makes your spaghetti much more visible and annoying!\nPlus it feels that the code is more airy and readable.\n\nWhat about callback hell and stuff ?\n1. Use promises, or the sexy async/await syntax\n2. Decouple your callbacks\n\nThis is opinionated, there is no wrong way to indent, there are other factors far more important.\n\n#### Classes hide in large functions\n\nThere are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can't be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.\n\nThe rule is simple: when it's difficult to decouple a function, create a class. Because inside a class, each method\nhas access to `this` context, so you no longer need to pass variables along.\n\n#### Don't extend classes\n\nAnother opinionated advice, just don't use extend. The only exception is if the class you extend\nis abstract (you don't instantiate/use it stand-alone).\n\n#### Provide JSDoc and Comments\n\nWhenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for \nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it\nneeds and a description for them.\n\nIf you find a snippet, or something that describes a certain thing, don't be afraid to leave links,\nespecially if you're writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.\n\nLeave as much comments as you can, but don't go off the grid, stay to the point. And only leave comments when necessary:\n\n```js\n// BAD (The code already tells you what you do)\n// We are iterating through users \nusers.forEach(user => {});\n```\n```js\n// GOOD (Even if you can read it nicely, you need to understand the intention fast) \n// We are calculating the total cost of all products so we can use it in total calculation cost.\nlet totalCost = 0;\nproducts.forEach(product => {\n    totalCost += product.cost;\n})\n```\n\n\n## Dependency Injection\n\nI've looked around the NPM community and everything is too complex for what we really need.\n\nInversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.\n\nThe reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that `PaymentService.charge` is been called when something happens.\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n    static createItem(item) {\n        Items.insert(item);\n        PaymentService.charge(item.userId, 20.00);\n    }\n}\n\nexport default ItemService;\n```\n\nNow in my test how would I be sure that `PaymentService.charge` is called without actually altering `PaymentService`?\nThis requires a change in strategy, by injecting dependencies in the constructor:\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n    constructor({paymentService}) {\n        this.paymentService = paymentService;\n    }\n    \n    createItem(item) {\n        Items.insert(item);\n        this.paymentService.charge(item.userId, 20.00);\n    }\n}\n\nexport default new ItemService({\n    paymentService: PaymentService\n});\n\nexport {ItemService}\n```\n\nOk now if we would like to test it, we have access to the exported variable: `ItemService` and we can pass-in a [stub](http://sinonjs.org/releases/v4.0.1/stubs/) for `PaymentService` in its constructor.\n\nThe only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate `ServiceModel` file  (ItemServiceModel.js) and instantiate (and export) it inside `ItemService.js`, and when you test\nyou only need to play with `ItemServiceModel`\n\n\n\n\n \n \n\n\n","source":"chapters/3/services.md","raw":"---\ntitle: 'Services'\ndescription: Using services to decouple your code\ndisqusPage: 'Chapter 3: Services'\n---\n\n## What is a service? \nA service is a unit of work (a function) or a group of very related functionality (a class)\n\nUsing services is linked to the [Single responsibility principle](https://en.wikipedia.org/wiki/Single_responsibility_principle)\n\n```simple-text\nQ: So when do we need to use services?\nA: Everytime!\nQ: Where do we use services?\nA: Everywhere!\n```\n\nOk we're done here, everything is clear now, right?\n\nJokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use *Email.send*. Well, *Email* is actually a service, but now how you send it in your app ?\n\nLet's say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a Meteor method ? Inside a function ? Inside a class ?\n\nThe answer is: **NOT inside the Meteor method**\n\nUsually, you tend to couple logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the *C* (Controller) in *MVC*, \nthe *C* does not contain logic, the *C* is a boss that delegates work to *M* (Services aka Models)\n\nIt is also bad because methods are a communication layer between the client and the server, they shouldn't store business logic, or logic of any kind, imagine them as proxies that communicate with your services.\n\nLet's start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.\n\nDon't forget to read: https://github.com/ryanmcdermott/clean-code-javascript \n\n## Sample\n```js\nclass ItemService {\n    static createItem() {\n        // put logic here for item creation\n    }\n    \n    static updateItem(id, data) {\n        const item = this._getItem(id)\n        // do something with it\n    }\n    \n    static _getItem(itemId) {\n        // returns the item from database or throws an exception\n    }\n}\n\nexport default ItemService;\n```\n\nIn most cases, you want your services to be a class with static methods, and not an instance of that class `new ItemService()`, however\nwe'll see below why in some cases using the instance makes more sense.\n\n## Structuring\n\nBy default we are going to put them inside:\n`/imports/api/{module}/services`\n\nUsually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.\n\nIf your services need more decoupling feel free to nest them:\n`/imports/api/{module}/services/{submodule}`\n\nIf you are writing HTTP APIs separate the Service of fetching/persisting data and put it in `/imports/db/{module}` and\nthe one that does include the app/business logic keep it in `/imports/api/{module}`. The one inside `/imports/api` should instantiate the one from `/imports/db` with the correct API keys (most likely retrieved from `Meteor.settings`)\n\nName your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it's a function, make the sure the filename is a verb.\n\nInside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class with static methods.\n\n## Creating Services\n\nGo API first. Don't try to think about the logic, try to think about how you are going to use it. This is why [**TDD**](https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/) works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.\n\nSo, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!\n\n#### Helpful questions:\n1. What would be the cleanest, easiest way to use this Service?\n2. How can I make it so it's easier to understand by others?\n3. What comments can I leave so the next developer that comes in understands this?\n4. Does my service have a single responsability?\n5. Is there any functionality in my service that is outside its scope so I can decouple it?\n\n## Conventions\n\nAgain, don't forget to read: https://github.com/ryanmcdermott/clean-code-javascript. I'm not joking, read it! \n\n#### Functions should be actions or interrogations\n\nPlease favor longer names for small scope, lower names for large scopes.\n\n```js\n// BAD\nobject.author()\nobject.veryBad()\nobject.closing()\nobject.mkSmtGdAbtIt()\n```\n\n```js\n// GOOD\nobject.getAuthor()\nobject.isGood()\nobject.close()\nobject.makeSomethingGoodAboutIt()\n```\n\n#### Variable names should be substantives or interrogations\n\n```js\n// BAD\nlet making;\nlet made;\n```\n\n```js\n// GOOD\nlet isMaking;\nlet isMade;\n```\n\n#### Functions should be small\n\nA function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.\n\n#### Indent with 4 spaces\n\nWith JS and with JSX.\nWhy 4? Because it forces you to decouple and makes your spaghetti much more visible and annoying!\nPlus it feels that the code is more airy and readable.\n\nWhat about callback hell and stuff ?\n1. Use promises, or the sexy async/await syntax\n2. Decouple your callbacks\n\nThis is opinionated, there is no wrong way to indent, there are other factors far more important.\n\n#### Classes hide in large functions\n\nThere are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can't be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.\n\nThe rule is simple: when it's difficult to decouple a function, create a class. Because inside a class, each method\nhas access to `this` context, so you no longer need to pass variables along.\n\n#### Don't extend classes\n\nAnother opinionated advice, just don't use extend. The only exception is if the class you extend\nis abstract (you don't instantiate/use it stand-alone).\n\n#### Provide JSDoc and Comments\n\nWhenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for \nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it\nneeds and a description for them.\n\nIf you find a snippet, or something that describes a certain thing, don't be afraid to leave links,\nespecially if you're writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.\n\nLeave as much comments as you can, but don't go off the grid, stay to the point. And only leave comments when necessary:\n\n```js\n// BAD (The code already tells you what you do)\n// We are iterating through users \nusers.forEach(user => {});\n```\n```js\n// GOOD (Even if you can read it nicely, you need to understand the intention fast) \n// We are calculating the total cost of all products so we can use it in total calculation cost.\nlet totalCost = 0;\nproducts.forEach(product => {\n    totalCost += product.cost;\n})\n```\n\n\n## Dependency Injection\n\nI've looked around the NPM community and everything is too complex for what we really need.\n\nInversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.\n\nThe reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that `PaymentService.charge` is been called when something happens.\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n    static createItem(item) {\n        Items.insert(item);\n        PaymentService.charge(item.userId, 20.00);\n    }\n}\n\nexport default ItemService;\n```\n\nNow in my test how would I be sure that `PaymentService.charge` is called without actually altering `PaymentService`?\nThis requires a change in strategy, by injecting dependencies in the constructor:\n\n```js\nimport PaymentService from 'somewhere';\n\nclass ItemService {\n    constructor({paymentService}) {\n        this.paymentService = paymentService;\n    }\n    \n    createItem(item) {\n        Items.insert(item);\n        this.paymentService.charge(item.userId, 20.00);\n    }\n}\n\nexport default new ItemService({\n    paymentService: PaymentService\n});\n\nexport {ItemService}\n```\n\nOk now if we would like to test it, we have access to the exported variable: `ItemService` and we can pass-in a [stub](http://sinonjs.org/releases/v4.0.1/stubs/) for `PaymentService` in its constructor.\n\nThe only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate `ServiceModel` file  (ItemServiceModel.js) and instantiate (and export) it inside `ItemService.js`, and when you test\nyou only need to play with `ItemServiceModel`\n\n\n\n\n \n \n\n\n","date":"2019-10-04T12:00:07.765Z","updated":"2019-10-04T12:00:07.765Z","path":"chapters/3/services.html","_id":"cj8zm9abw0006qmu50wuzjozh","comments":1,"layout":"page","content":"<h2 id=\"What-is-a-service\"><a href=\"#What-is-a-service\" class=\"headerlink\" title=\"What is a service?\"></a>What is a service?</h2><p>A service is a unit of work (a function) or a group of very related functionality (a class)</p>\n<p>Using services is linked to the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"noopener\">Single responsibility principle</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q: So when do we need to use services?</div><div class=\"line\">A: Everytime!</div><div class=\"line\">Q: Where do we use services?</div><div class=\"line\">A: Everywhere!</div></pre></td></tr></table></figure>\n<p>Ok we’re done here, everything is clear now, right?</p>\n<p>Jokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use <em>Email.send</em>. Well, <em>Email</em> is actually a service, but now how you send it in your app ?</p>\n<p>Let’s say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a Meteor method ? Inside a function ? Inside a class ?</p>\n<p>The answer is: <strong>NOT inside the Meteor method</strong></p>\n<p>Usually, you tend to couple logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the <em>C</em> (Controller) in <em>MVC</em>, \nthe <em>C</em> does not contain logic, the <em>C</em> is a boss that delegates work to <em>M</em> (Services aka Models)</p>\n<p>It is also bad because methods are a communication layer between the client and the server, they shouldn’t store business logic, or logic of any kind, imagine them as proxies that communicate with your services.</p>\n<p>Let’s start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.</p>\n<p>Don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a> </p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> createItem() &#123;</div><div class=\"line\">        <span class=\"comment\">// put logic here for item creation</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> updateItem(id, data) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> item = <span class=\"keyword\">this</span>._getItem(id)</div><div class=\"line\">        <span class=\"comment\">// do something with it</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> _getItem(itemId) &#123;</div><div class=\"line\">        <span class=\"comment\">// returns the item from database or throws an exception</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</div></pre></td></tr></table></figure>\n<p>In most cases, you want your services to be a class with static methods, and not an instance of that class <code>new ItemService()</code>, however\nwe’ll see below why in some cases using the instance makes more sense.</p>\n<h2 id=\"Structuring\"><a href=\"#Structuring\" class=\"headerlink\" title=\"Structuring\"></a>Structuring</h2><p>By default we are going to put them inside:\n<code>/imports/api/{module}/services</code></p>\n<p>Usually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.</p>\n<p>If your services need more decoupling feel free to nest them:\n<code>/imports/api/{module}/services/{submodule}</code></p>\n<p>If you are writing HTTP APIs separate the Service of fetching/persisting data and put it in <code>/imports/db/{module}</code> and\nthe one that does include the app/business logic keep it in <code>/imports/api/{module}</code>. The one inside <code>/imports/api</code> should instantiate the one from <code>/imports/db</code> with the correct API keys (most likely retrieved from <code>Meteor.settings</code>)</p>\n<p>Name your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it’s a function, make the sure the filename is a verb.</p>\n<p>Inside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class with static methods.</p>\n<h2 id=\"Creating-Services\"><a href=\"#Creating-Services\" class=\"headerlink\" title=\"Creating Services\"></a>Creating Services</h2><p>Go API first. Don’t try to think about the logic, try to think about how you are going to use it. This is why <a href=\"https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\" target=\"_blank\" rel=\"noopener\"><strong>TDD</strong></a> works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.</p>\n<p>So, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!</p>\n<h4 id=\"Helpful-questions\"><a href=\"#Helpful-questions\" class=\"headerlink\" title=\"Helpful questions:\"></a>Helpful questions:</h4><ol>\n<li>What would be the cleanest, easiest way to use this Service?</li>\n<li>How can I make it so it’s easier to understand by others?</li>\n<li>What comments can I leave so the next developer that comes in understands this?</li>\n<li>Does my service have a single responsability?</li>\n<li>Is there any functionality in my service that is outside its scope so I can decouple it?</li>\n</ol>\n<h2 id=\"Conventions\"><a href=\"#Conventions\" class=\"headerlink\" title=\"Conventions\"></a>Conventions</h2><p>Again, don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a>. I’m not joking, read it! </p>\n<h4 id=\"Functions-should-be-actions-or-interrogations\"><a href=\"#Functions-should-be-actions-or-interrogations\" class=\"headerlink\" title=\"Functions should be actions or interrogations\"></a>Functions should be actions or interrogations</h4><p>Please favor longer names for small scope, lower names for large scopes.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD</span></div><div class=\"line\">object.author()</div><div class=\"line\">object.veryBad()</div><div class=\"line\">object.closing()</div><div class=\"line\">object.mkSmtGdAbtIt()</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD</span></div><div class=\"line\">object.getAuthor()</div><div class=\"line\">object.isGood()</div><div class=\"line\">object.close()</div><div class=\"line\">object.makeSomethingGoodAboutIt()</div></pre></td></tr></table></figure>\n<h4 id=\"Variable-names-should-be-substantives-or-interrogations\"><a href=\"#Variable-names-should-be-substantives-or-interrogations\" class=\"headerlink\" title=\"Variable names should be substantives or interrogations\"></a>Variable names should be substantives or interrogations</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD</span></div><div class=\"line\"><span class=\"keyword\">let</span> making;</div><div class=\"line\"><span class=\"keyword\">let</span> made;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD</span></div><div class=\"line\"><span class=\"keyword\">let</span> isMaking;</div><div class=\"line\"><span class=\"keyword\">let</span> isMade;</div></pre></td></tr></table></figure>\n<h4 id=\"Functions-should-be-small\"><a href=\"#Functions-should-be-small\" class=\"headerlink\" title=\"Functions should be small\"></a>Functions should be small</h4><p>A function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.</p>\n<h4 id=\"Indent-with-4-spaces\"><a href=\"#Indent-with-4-spaces\" class=\"headerlink\" title=\"Indent with 4 spaces\"></a>Indent with 4 spaces</h4><p>With JS and with JSX.\nWhy 4? Because it forces you to decouple and makes your spaghetti much more visible and annoying!\nPlus it feels that the code is more airy and readable.</p>\n<p>What about callback hell and stuff ?</p>\n<ol>\n<li>Use promises, or the sexy async/await syntax</li>\n<li>Decouple your callbacks</li>\n</ol>\n<p>This is opinionated, there is no wrong way to indent, there are other factors far more important.</p>\n<h4 id=\"Classes-hide-in-large-functions\"><a href=\"#Classes-hide-in-large-functions\" class=\"headerlink\" title=\"Classes hide in large functions\"></a>Classes hide in large functions</h4><p>There are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can’t be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.</p>\n<p>The rule is simple: when it’s difficult to decouple a function, create a class. Because inside a class, each method\nhas access to <code>this</code> context, so you no longer need to pass variables along.</p>\n<h4 id=\"Don’t-extend-classes\"><a href=\"#Don’t-extend-classes\" class=\"headerlink\" title=\"Don’t extend classes\"></a>Don’t extend classes</h4><p>Another opinionated advice, just don’t use extend. The only exception is if the class you extend\nis abstract (you don’t instantiate/use it stand-alone).</p>\n<h4 id=\"Provide-JSDoc-and-Comments\"><a href=\"#Provide-JSDoc-and-Comments\" class=\"headerlink\" title=\"Provide JSDoc and Comments\"></a>Provide JSDoc and Comments</h4><p>Whenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for \nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it\nneeds and a description for them.</p>\n<p>If you find a snippet, or something that describes a certain thing, don’t be afraid to leave links,\nespecially if you’re writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.</p>\n<p>Leave as much comments as you can, but don’t go off the grid, stay to the point. And only leave comments when necessary:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD (The code already tells you what you do)</span></div><div class=\"line\"><span class=\"comment\">// We are iterating through users </span></div><div class=\"line\">users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD (Even if you can read it nicely, you need to understand the intention fast) </span></div><div class=\"line\"><span class=\"comment\">// We are calculating the total cost of all products so we can use it in total calculation cost.</span></div><div class=\"line\"><span class=\"keyword\">let</span> totalCost = <span class=\"number\">0</span>;</div><div class=\"line\">products.forEach(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span> &#123;</div><div class=\"line\">    totalCost += product.cost;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h2><p>I’ve looked around the NPM community and everything is too complex for what we really need.</p>\n<p>Inversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.</p>\n<p>The reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that <code>PaymentService.charge</code> is been called when something happens.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> createItem(item) &#123;</div><div class=\"line\">        Items.insert(item);</div><div class=\"line\">        PaymentService.charge(item.userId, <span class=\"number\">20.00</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</div></pre></td></tr></table></figure>\n<p>Now in my test how would I be sure that <code>PaymentService.charge</code> is called without actually altering <code>PaymentService</code>?\nThis requires a change in strategy, by injecting dependencies in the constructor:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(&#123;paymentService&#125;) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.paymentService = paymentService;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    createItem(item) &#123;</div><div class=\"line\">        Items.insert(item);</div><div class=\"line\">        <span class=\"keyword\">this</span>.paymentService.charge(item.userId, <span class=\"number\">20.00</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> ItemService(&#123;</div><div class=\"line\">    paymentService: PaymentService</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;ItemService&#125;</div></pre></td></tr></table></figure>\n<p>Ok now if we would like to test it, we have access to the exported variable: <code>ItemService</code> and we can pass-in a <a href=\"http://sinonjs.org/releases/v4.0.1/stubs/\" target=\"_blank\" rel=\"noopener\">stub</a> for <code>PaymentService</code> in its constructor.</p>\n<p>The only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate <code>ServiceModel</code> file  (ItemServiceModel.js) and instantiate (and export) it inside <code>ItemService.js</code>, and when you test\nyou only need to play with <code>ItemServiceModel</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-is-a-service\"><a href=\"#What-is-a-service\" class=\"headerlink\" title=\"What is a service?\"></a>What is a service?</h2><p>A service is a unit of work (a function) or a group of very related functionality (a class)</p>\n<p>Using services is linked to the <a href=\"https://en.wikipedia.org/wiki/Single_responsibility_principle\" target=\"_blank\" rel=\"noopener\">Single responsibility principle</a></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">Q: So when do we need to use services?</div><div class=\"line\">A: Everytime!</div><div class=\"line\">Q: Where do we use services?</div><div class=\"line\">A: Everywhere!</div></pre></td></tr></table></figure>\n<p>Ok we’re done here, everything is clear now, right?</p>\n<p>Jokes aside, you should treat every functionality in your app as a service, for example:\nYou want to send an email, and ofcourse, you know how to do this, you use <em>Email.send</em>. Well, <em>Email</em> is actually a service, but now how you send it in your app ?</p>\n<p>Let’s say you create a Post, and you need to notify the Admin to approve it.\nWhere do you store that unit of logic ? Inside a Meteor method ? Inside a function ? Inside a class ?</p>\n<p>The answer is: <strong>NOT inside the Meteor method</strong></p>\n<p>Usually, you tend to couple logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the <em>C</em> (Controller) in <em>MVC</em>, \nthe <em>C</em> does not contain logic, the <em>C</em> is a boss that delegates work to <em>M</em> (Services aka Models)</p>\n<p>It is also bad because methods are a communication layer between the client and the server, they shouldn’t store business logic, or logic of any kind, imagine them as proxies that communicate with your services.</p>\n<p>Let’s start focusing about services in depth, and understand some nice principles about\ncrafting them in a nice way.</p>\n<p>Don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a> </p>\n<h2 id=\"Sample\"><a href=\"#Sample\" class=\"headerlink\" title=\"Sample\"></a>Sample</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> createItem() &#123;</div><div class=\"line\">        <span class=\"comment\">// put logic here for item creation</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> updateItem(id, data) &#123;</div><div class=\"line\">        <span class=\"keyword\">const</span> item = <span class=\"keyword\">this</span>._getItem(id)</div><div class=\"line\">        <span class=\"comment\">// do something with it</span></div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">static</span> _getItem(itemId) &#123;</div><div class=\"line\">        <span class=\"comment\">// returns the item from database or throws an exception</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</div></pre></td></tr></table></figure>\n<p>In most cases, you want your services to be a class with static methods, and not an instance of that class <code>new ItemService()</code>, however\nwe’ll see below why in some cases using the instance makes more sense.</p>\n<h2 id=\"Structuring\"><a href=\"#Structuring\" class=\"headerlink\" title=\"Structuring\"></a>Structuring</h2><p>By default we are going to put them inside:\n<code>/imports/api/{module}/services</code></p>\n<p>Usually {module} represents the collection name it handles it, but this is not always the case, it can represent something that is handling multiple collections to achieve its goal.</p>\n<p>If your services need more decoupling feel free to nest them:\n<code>/imports/api/{module}/services/{submodule}</code></p>\n<p>If you are writing HTTP APIs separate the Service of fetching/persisting data and put it in <code>/imports/db/{module}</code> and\nthe one that does include the app/business logic keep it in <code>/imports/api/{module}</code>. The one inside <code>/imports/api</code> should instantiate the one from <code>/imports/db</code> with the correct API keys (most likely retrieved from <code>Meteor.settings</code>)</p>\n<p>Name your services with uppercase if classes (ItemService), or lowercase if functions (doSomething).\nIf your service is a class, suffix it with service, if it’s a function, make the sure the filename is a verb.</p>\n<p>Inside a function service module, you can create additional functions, but you must export only one, if you need to\nexport multiple functions, it will become a service class with static methods.</p>\n<h2 id=\"Creating-Services\"><a href=\"#Creating-Services\" class=\"headerlink\" title=\"Creating Services\"></a>Creating Services</h2><p>Go API first. Don’t try to think about the logic, try to think about how you are going to use it. This is why <a href=\"https://technologyconversations.com/2013/12/20/test-driven-development-tdd-example-walkthrough/\" target=\"_blank\" rel=\"noopener\"><strong>TDD</strong></a> works so well, because\nit lets you think about the API and you also write a test, and passing tests means you finished implementation.</p>\n<p>So, instead of patterns, try to think about how you would use it, and just write a test for it first. You will notice that your development speed will increase dramatically (after first tries). No kidding!</p>\n<h4 id=\"Helpful-questions\"><a href=\"#Helpful-questions\" class=\"headerlink\" title=\"Helpful questions:\"></a>Helpful questions:</h4><ol>\n<li>What would be the cleanest, easiest way to use this Service?</li>\n<li>How can I make it so it’s easier to understand by others?</li>\n<li>What comments can I leave so the next developer that comes in understands this?</li>\n<li>Does my service have a single responsability?</li>\n<li>Is there any functionality in my service that is outside its scope so I can decouple it?</li>\n</ol>\n<h2 id=\"Conventions\"><a href=\"#Conventions\" class=\"headerlink\" title=\"Conventions\"></a>Conventions</h2><p>Again, don’t forget to read: <a href=\"https://github.com/ryanmcdermott/clean-code-javascript\" target=\"_blank\" rel=\"noopener\">https://github.com/ryanmcdermott/clean-code-javascript</a>. I’m not joking, read it! </p>\n<h4 id=\"Functions-should-be-actions-or-interrogations\"><a href=\"#Functions-should-be-actions-or-interrogations\" class=\"headerlink\" title=\"Functions should be actions or interrogations\"></a>Functions should be actions or interrogations</h4><p>Please favor longer names for small scope, lower names for large scopes.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD</span></div><div class=\"line\">object.author()</div><div class=\"line\">object.veryBad()</div><div class=\"line\">object.closing()</div><div class=\"line\">object.mkSmtGdAbtIt()</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD</span></div><div class=\"line\">object.getAuthor()</div><div class=\"line\">object.isGood()</div><div class=\"line\">object.close()</div><div class=\"line\">object.makeSomethingGoodAboutIt()</div></pre></td></tr></table></figure>\n<h4 id=\"Variable-names-should-be-substantives-or-interrogations\"><a href=\"#Variable-names-should-be-substantives-or-interrogations\" class=\"headerlink\" title=\"Variable names should be substantives or interrogations\"></a>Variable names should be substantives or interrogations</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD</span></div><div class=\"line\"><span class=\"keyword\">let</span> making;</div><div class=\"line\"><span class=\"keyword\">let</span> made;</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD</span></div><div class=\"line\"><span class=\"keyword\">let</span> isMaking;</div><div class=\"line\"><span class=\"keyword\">let</span> isMade;</div></pre></td></tr></table></figure>\n<h4 id=\"Functions-should-be-small\"><a href=\"#Functions-should-be-small\" class=\"headerlink\" title=\"Functions should be small\"></a>Functions should be small</h4><p>A function should not be larger than 10 lines. Honestly, if you have that, then it must be refactored. Exceptions being, large switch cases, Pure Components and render() functions from React.</p>\n<h4 id=\"Indent-with-4-spaces\"><a href=\"#Indent-with-4-spaces\" class=\"headerlink\" title=\"Indent with 4 spaces\"></a>Indent with 4 spaces</h4><p>With JS and with JSX.\nWhy 4? Because it forces you to decouple and makes your spaghetti much more visible and annoying!\nPlus it feels that the code is more airy and readable.</p>\n<p>What about callback hell and stuff ?</p>\n<ol>\n<li>Use promises, or the sexy async/await syntax</li>\n<li>Decouple your callbacks</li>\n</ol>\n<p>This is opinionated, there is no wrong way to indent, there are other factors far more important.</p>\n<h4 id=\"Classes-hide-in-large-functions\"><a href=\"#Classes-hide-in-large-functions\" class=\"headerlink\" title=\"Classes hide in large functions\"></a>Classes hide in large functions</h4><p>There are cases where you have a single function as service, and that function begins to grow,\nand you find that decoupling it in multiple functions gets tedious because you will need to pass\nmany variables along, and you realize that those variables are strings or numbers and can’t be properly modified,\nso you need to return them, and even if your intentions are pure, your code will become\nmore messy.</p>\n<p>The rule is simple: when it’s difficult to decouple a function, create a class. Because inside a class, each method\nhas access to <code>this</code> context, so you no longer need to pass variables along.</p>\n<h4 id=\"Don’t-extend-classes\"><a href=\"#Don’t-extend-classes\" class=\"headerlink\" title=\"Don’t extend classes\"></a>Don’t extend classes</h4><p>Another opinionated advice, just don’t use extend. The only exception is if the class you extend\nis abstract (you don’t instantiate/use it stand-alone).</p>\n<h4 id=\"Provide-JSDoc-and-Comments\"><a href=\"#Provide-JSDoc-and-Comments\" class=\"headerlink\" title=\"Provide JSDoc and Comments\"></a>Provide JSDoc and Comments</h4><p>Whenever you feel like you are doing something that is not verbose, leave a comment, and also leave JSDoc, especially for \nvariables. It becomes truly helpful when you are using an API written by someone else and the IDE shows you which variables it\nneeds and a description for them.</p>\n<p>If you find a snippet, or something that describes a certain thing, don’t be afraid to leave links,\nespecially if you’re writing an facade to an external API, leave link to the docs, it will save you and other devs\ntime.</p>\n<p>Leave as much comments as you can, but don’t go off the grid, stay to the point. And only leave comments when necessary:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD (The code already tells you what you do)</span></div><div class=\"line\"><span class=\"comment\">// We are iterating through users </span></div><div class=\"line\">users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD (Even if you can read it nicely, you need to understand the intention fast) </span></div><div class=\"line\"><span class=\"comment\">// We are calculating the total cost of all products so we can use it in total calculation cost.</span></div><div class=\"line\"><span class=\"keyword\">let</span> totalCost = <span class=\"number\">0</span>;</div><div class=\"line\">products.forEach(<span class=\"function\"><span class=\"params\">product</span> =&gt;</span> &#123;</div><div class=\"line\">    totalCost += product.cost;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"Dependency-Injection\"><a href=\"#Dependency-Injection\" class=\"headerlink\" title=\"Dependency Injection\"></a>Dependency Injection</h2><p>I’ve looked around the NPM community and everything is too complex for what we really need.</p>\n<p>Inversion principle is simple, let the service decide what dependencies it has. We are kinda doing this already\nbecause each module imports what it needs in order to execute properly.</p>\n<p>The reason for changing it a bit is the fact that it will allow easy testing. For example, we want to test that <code>PaymentService.charge</code> is been called when something happens.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">static</span> createItem(item) &#123;</div><div class=\"line\">        Items.insert(item);</div><div class=\"line\">        PaymentService.charge(item.userId, <span class=\"number\">20.00</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> ItemService;</div></pre></td></tr></table></figure>\n<p>Now in my test how would I be sure that <code>PaymentService.charge</code> is called without actually altering <code>PaymentService</code>?\nThis requires a change in strategy, by injecting dependencies in the constructor:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'somewhere'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ItemService</span> </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">constructor</span>(&#123;paymentService&#125;) &#123;</div><div class=\"line\">        <span class=\"keyword\">this</span>.paymentService = paymentService;</div><div class=\"line\">    &#125;</div><div class=\"line\">    </div><div class=\"line\">    createItem(item) &#123;</div><div class=\"line\">        Items.insert(item);</div><div class=\"line\">        <span class=\"keyword\">this</span>.paymentService.charge(item.userId, <span class=\"number\">20.00</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> ItemService(&#123;</div><div class=\"line\">    paymentService: PaymentService</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;ItemService&#125;</div></pre></td></tr></table></figure>\n<p>Ok now if we would like to test it, we have access to the exported variable: <code>ItemService</code> and we can pass-in a <a href=\"http://sinonjs.org/releases/v4.0.1/stubs/\" target=\"_blank\" rel=\"noopener\">stub</a> for <code>PaymentService</code> in its constructor.</p>\n<p>The only problem with this pattern is the fact that it creates an instance without you wanting to,\ntherefore you can create a separate <code>ServiceModel</code> file  (ItemServiceModel.js) and instantiate (and export) it inside <code>ItemService.js</code>, and when you test\nyou only need to play with <code>ItemServiceModel</code></p>\n"},{"title":"Microservices","description":"Microservices - Decouple & Scale","disqusPage":"Chapter 3: Microservices","_content":"\n## What?\nThis does not relate to \"services\" term we used previously, when we regarded it as an unit of logic.\n\n`The term \"Microservice Architecture\" has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services.`\n\nIndepenently deployable, so basically it means that we need to have multiple meteor apps, but how to manage and allow them to re-use code ?\nIt's quite easy.\n\n\n## Why?\n\nFor example you have an app, and you have to manage the users and control the content. Doing it in the same app may be a wrong approach, either your bundle size will increase, you may\nuse modules that you don't need. And to use dynamic imports everywhere may be too much. Instead just separate the concerns, and move your admin app into a separate microservice.\n\n## Solution\n\nFirst of all, understand the fact that we can have multiple Meteor apps inside the same git repository:\n\n```js\nmkdir myapp\ngit init .\nmeteor create --bare admin\nmeteor create --bare web\n```\n\nThat's it, you began your microservice architecture. Now if you want to re-use code, we use symlinks. Sorry Windows users, for you it will not work.\n```\ncd admin/imports\nln -s ../../web/imports app\n```\n\nNow look at this example:\n```js\n// file: ./admin/imports/api/posts/server/methods.js\nimport {Meteor} from 'meteor/meteor';\nimport {Posts} from '/imports/app/db';\n\nMeteor.methods({\n    'posts.approve'({postId}) {\n        // ...\n    }\n})\n```\n\nThat's it. If you plan on only using the db models, and not interact with other services, than just do:\n\n```\ncd admin/imports\nln -s ../../web/imports/db db\n```\n\nand use it naturally in your admin microservice:\n\n```js\n// file: ./admin/imports/api/posts/methods.js\nimport {Meteor} from 'meteor/meteor';\nimport {Posts} from '/imports/db';\n\nMeteor.methods({\n    'posts.approve'({postId}) {\n        // ...\n    }\n})\n```\n\nSo nice!\nNote that if you use WebStorm, make sure to mark both \"admin\" and \"web\" folders as Resource Root (By right clicking on the folder), so you have autocomplete on absolute imports properly.\n\n## Local Database\n\nIn order for this to work nicely, you would have to configure them to open on different ports and connect to the same database.\n\nNote that when you start a meteor app, it opens it's own mongodb on PORT+1 (3001 in most cases).\n\nBut if we want the two microservices to work together, either install a docker mongodb locally, either [install mongodb directly](https://docs.mongodb.com/manual/installation/).\n\n```js\n// file: app/package.json\n  \"scripts\": {\n    \"start\": \"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3000\",\n  },\n```\n```js\n// file: admin/package.json\n  \"scripts\": {\n    \"start\": \"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3050\",\n  },\n```\n\nNow you can start them both:\n```\ncd admin\nnpm start\n```\n\n```\ncd web\nnpm start\n```\n\n## Deployment\n\nEach individual microservice will have it's own `.deploy` folder inside it with the proper configuration of deployment, depending on which tool you use to do so.\nThe production bundle will be properly generated.\n\n## A better strategy\n\nYou will most likely head into this issue, especially if you decide to microservicify your already existing app:\n\nFor example:\n```js\n// file: /web/imports/api/posts/services/PostService.js\nimport PaymentService from '/imports/api/payments/services/PaymentService.js';\n// ...\n```\n\nThis will fail if you want to use the PostService inside `admin` microservice! Because it doesn't have that file in that absolute path. \n\nThe initial solution would be to use `imports PaymentService from '../../payments/services/PaymentService'`\n\nAnother great solution is to begin thinking about it as a [reusable module](/chapters/3/reusable-modules.html). Which you can store in `/modules` folder directly.\nAnd create the following symlinks:\n```bash\n/web/imports/modules -> /modules\n/admin/imports/modules -> /modules\n```\n\nIf your module depends on things outside it, simply create a config inside it, and inject what you need inside it, keep it simple or make it as complex as you wish.\n```js\n// file: /modules/chat/config.js\nexport default {}\n```\n\nBut there will be cases where you can't make everything completely independent, as they interact with many other system components,\nthis would require a change in strategy:\n\nWe have our `App Logic Layer` our `Persistence Layer` and our `Event System`\n\nLet's work with the following architecture:\n\n```bash\n/core/services\n/core/events.js\n/core/security.js\n/core/db\n```\n\nNow let's symlink it:\n```bash\n/web/imports/core -- /core\n/admin/imports/core -- /core\n```\n\nSample:\n```js\n// file: /web/imports/api/posts/server/methods.js\n\nimport PostService from '/imports/core/services/posts/PostService.js';\n\nMeteor.methods({})\n```\n\nI personally don't recommend you using absolute imports any longer inside `/core`, even though you can do it if it starts with `/imports/core`.\n\n## Conclusion\n\nThis \"better\" strategy would require you to do some refactoring to ensure it works properly provided you have an existing app already. However, if you don't have an existing app and you know \nyou will have microservices, start with this approach right from the beginning.\n\n \n \n\n\n","source":"chapters/3/microservices.md","raw":"---\ntitle: 'Microservices'\ndescription: Microservices - Decouple & Scale\ndisqusPage: 'Chapter 3: Microservices'\n---\n\n## What?\nThis does not relate to \"services\" term we used previously, when we regarded it as an unit of logic.\n\n`The term \"Microservice Architecture\" has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services.`\n\nIndepenently deployable, so basically it means that we need to have multiple meteor apps, but how to manage and allow them to re-use code ?\nIt's quite easy.\n\n\n## Why?\n\nFor example you have an app, and you have to manage the users and control the content. Doing it in the same app may be a wrong approach, either your bundle size will increase, you may\nuse modules that you don't need. And to use dynamic imports everywhere may be too much. Instead just separate the concerns, and move your admin app into a separate microservice.\n\n## Solution\n\nFirst of all, understand the fact that we can have multiple Meteor apps inside the same git repository:\n\n```js\nmkdir myapp\ngit init .\nmeteor create --bare admin\nmeteor create --bare web\n```\n\nThat's it, you began your microservice architecture. Now if you want to re-use code, we use symlinks. Sorry Windows users, for you it will not work.\n```\ncd admin/imports\nln -s ../../web/imports app\n```\n\nNow look at this example:\n```js\n// file: ./admin/imports/api/posts/server/methods.js\nimport {Meteor} from 'meteor/meteor';\nimport {Posts} from '/imports/app/db';\n\nMeteor.methods({\n    'posts.approve'({postId}) {\n        // ...\n    }\n})\n```\n\nThat's it. If you plan on only using the db models, and not interact with other services, than just do:\n\n```\ncd admin/imports\nln -s ../../web/imports/db db\n```\n\nand use it naturally in your admin microservice:\n\n```js\n// file: ./admin/imports/api/posts/methods.js\nimport {Meteor} from 'meteor/meteor';\nimport {Posts} from '/imports/db';\n\nMeteor.methods({\n    'posts.approve'({postId}) {\n        // ...\n    }\n})\n```\n\nSo nice!\nNote that if you use WebStorm, make sure to mark both \"admin\" and \"web\" folders as Resource Root (By right clicking on the folder), so you have autocomplete on absolute imports properly.\n\n## Local Database\n\nIn order for this to work nicely, you would have to configure them to open on different ports and connect to the same database.\n\nNote that when you start a meteor app, it opens it's own mongodb on PORT+1 (3001 in most cases).\n\nBut if we want the two microservices to work together, either install a docker mongodb locally, either [install mongodb directly](https://docs.mongodb.com/manual/installation/).\n\n```js\n// file: app/package.json\n  \"scripts\": {\n    \"start\": \"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3000\",\n  },\n```\n```js\n// file: admin/package.json\n  \"scripts\": {\n    \"start\": \"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3050\",\n  },\n```\n\nNow you can start them both:\n```\ncd admin\nnpm start\n```\n\n```\ncd web\nnpm start\n```\n\n## Deployment\n\nEach individual microservice will have it's own `.deploy` folder inside it with the proper configuration of deployment, depending on which tool you use to do so.\nThe production bundle will be properly generated.\n\n## A better strategy\n\nYou will most likely head into this issue, especially if you decide to microservicify your already existing app:\n\nFor example:\n```js\n// file: /web/imports/api/posts/services/PostService.js\nimport PaymentService from '/imports/api/payments/services/PaymentService.js';\n// ...\n```\n\nThis will fail if you want to use the PostService inside `admin` microservice! Because it doesn't have that file in that absolute path. \n\nThe initial solution would be to use `imports PaymentService from '../../payments/services/PaymentService'`\n\nAnother great solution is to begin thinking about it as a [reusable module](/chapters/3/reusable-modules.html). Which you can store in `/modules` folder directly.\nAnd create the following symlinks:\n```bash\n/web/imports/modules -> /modules\n/admin/imports/modules -> /modules\n```\n\nIf your module depends on things outside it, simply create a config inside it, and inject what you need inside it, keep it simple or make it as complex as you wish.\n```js\n// file: /modules/chat/config.js\nexport default {}\n```\n\nBut there will be cases where you can't make everything completely independent, as they interact with many other system components,\nthis would require a change in strategy:\n\nWe have our `App Logic Layer` our `Persistence Layer` and our `Event System`\n\nLet's work with the following architecture:\n\n```bash\n/core/services\n/core/events.js\n/core/security.js\n/core/db\n```\n\nNow let's symlink it:\n```bash\n/web/imports/core -- /core\n/admin/imports/core -- /core\n```\n\nSample:\n```js\n// file: /web/imports/api/posts/server/methods.js\n\nimport PostService from '/imports/core/services/posts/PostService.js';\n\nMeteor.methods({})\n```\n\nI personally don't recommend you using absolute imports any longer inside `/core`, even though you can do it if it starts with `/imports/core`.\n\n## Conclusion\n\nThis \"better\" strategy would require you to do some refactoring to ensure it works properly provided you have an existing app already. However, if you don't have an existing app and you know \nyou will have microservices, start with this approach right from the beginning.\n\n \n \n\n\n","date":"2017-11-01T17:26:49.988Z","updated":"2017-11-01T17:26:49.987Z","path":"chapters/3/microservices.html","_id":"cj8zm9jgt0007qmu5ta77jb3c","comments":1,"layout":"page","content":"<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What?\"></a>What?</h2><p>This does not relate to “services” term we used previously, when we regarded it as an unit of logic.</p>\n<p><code>The term &quot;Microservice Architecture&quot; has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services.</code></p>\n<p>Indepenently deployable, so basically it means that we need to have multiple meteor apps, but how to manage and allow them to re-use code ?\nIt’s quite easy.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>For example you have an app, and you have to manage the users and control the content. Doing it in the same app may be a wrong approach, either your bundle size will increase, you may\nuse modules that you don’t need. And to use dynamic imports everywhere may be too much. Instead just separate the concerns, and move your admin app into a separate microservice.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>First of all, understand the fact that we can have multiple Meteor apps inside the same git repository:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir myapp</div><div class=\"line\">git init .</div><div class=\"line\">meteor create --bare admin</div><div class=\"line\">meteor create --bare web</div></pre></td></tr></table></figure>\n<p>That’s it, you began your microservice architecture. Now if you want to re-use code, we use symlinks. Sorry Windows users, for you it will not work.\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd admin/imports</div><div class=\"line\">ln -s ../../web/imports app</div></pre></td></tr></table></figure></p>\n<p>Now look at this example:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: ./admin/imports/api/posts/server/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Posts&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/app/db'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(&#123;postId&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>That’s it. If you plan on only using the db models, and not interact with other services, than just do:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd admin/imports</div><div class=\"line\"><span class=\"built_in\">ln</span> -s ../../web/imports/<span class=\"built_in\">db</span> <span class=\"built_in\">db</span></div></pre></td></tr></table></figure>\n<p>and use it naturally in your admin microservice:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: ./admin/imports/api/posts/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Posts&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(&#123;postId&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>So nice!\nNote that if you use WebStorm, make sure to mark both “admin” and “web” folders as Resource Root (By right clicking on the folder), so you have autocomplete on absolute imports properly.</p>\n<h2 id=\"Local-Database\"><a href=\"#Local-Database\" class=\"headerlink\" title=\"Local Database\"></a>Local Database</h2><p>In order for this to work nicely, you would have to configure them to open on different ports and connect to the same database.</p>\n<p>Note that when you start a meteor app, it opens it’s own mongodb on PORT+1 (3001 in most cases).</p>\n<p>But if we want the two microservices to work together, either install a docker mongodb locally, either <a href=\"https://docs.mongodb.com/manual/installation/\" target=\"_blank\" rel=\"external\">install mongodb directly</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: app/package.json</span></div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3000\"</span>,</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: admin/package.json</span></div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3050\"</span>,</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>\n<p>Now you can start them both:\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> admin</div><div class=\"line\">npm <span class=\"built_in\">start</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> web</div><div class=\"line\">npm <span class=\"built_in\">start</span></div></pre></td></tr></table></figure>\n<h2 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h2><p>Each individual microservice will have it’s own <code>.deploy</code> folder inside it with the proper configuration of deployment, depending on which tool you use to do so.\nThe production bundle will be properly generated.</p>\n<h2 id=\"A-better-strategy\"><a href=\"#A-better-strategy\" class=\"headerlink\" title=\"A better strategy\"></a>A better strategy</h2><p>You will most likely head into this issue, especially if you decide to microservicify your already existing app:</p>\n<p>For example:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /web/imports/api/posts/services/PostService.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/payments/services/PaymentService.js'</span>;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>This will fail if you want to use the PostService inside <code>admin</code> microservice! Because it doesn’t have that file in that absolute path. </p>\n<p>The initial solution would be to use <code>imports PaymentService from &#39;../../payments/services/PaymentService&#39;</code></p>\n<p>Another great solution is to begin thinking about it as a <a href=\"/chapters/3/reusable-modules.html\">reusable module</a>. Which you can store in <code>/modules</code> folder directly.\nAnd create the following symlinks:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/web/imports/modules -&gt; /modules</div><div class=\"line\">/admin/imports/modules -&gt; /modules</div></pre></td></tr></table></figure></p>\n<p>If your module depends on things outside it, simply create a config inside it, and inject what you need inside it, keep it simple or make it as complex as you wish.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /modules/chat/config.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>But there will be cases where you can’t make everything completely independent, as they interact with many other system components,\nthis would require a change in strategy:</p>\n<p>We have our <code>App Logic Layer</code> our <code>Persistence Layer</code> and our <code>Event System</code></p>\n<p>Let’s work with the following architecture:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/core/services</div><div class=\"line\">/core/events.js</div><div class=\"line\">/core/security.js</div><div class=\"line\">/core/db</div></pre></td></tr></table></figure>\n<p>Now let’s symlink it:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/web/imports/core -- /core</div><div class=\"line\">/admin/imports/core -- /core</div></pre></td></tr></table></figure></p>\n<p>Sample:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /web/imports/api/posts/server/methods.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> PostService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/core/services/posts/PostService.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;&#125;)</div></pre></td></tr></table></figure></p>\n<p>I personally don’t recommend you using absolute imports any longer inside <code>/core</code>, even though you can do it if it starts with <code>/imports/core</code>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This “better” strategy would require you to do some refactoring to ensure it works properly provided you have an existing app already. However, if you don’t have an existing app and you know \nyou will have microservices, start with this approach right from the beginning.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What\"><a href=\"#What\" class=\"headerlink\" title=\"What?\"></a>What?</h2><p>This does not relate to “services” term we used previously, when we regarded it as an unit of logic.</p>\n<p><code>The term &quot;Microservice Architecture&quot; has sprung up over the last few years to describe a particular way of designing software applications as suites of independently deployable services.</code></p>\n<p>Indepenently deployable, so basically it means that we need to have multiple meteor apps, but how to manage and allow them to re-use code ?\nIt’s quite easy.</p>\n<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>For example you have an app, and you have to manage the users and control the content. Doing it in the same app may be a wrong approach, either your bundle size will increase, you may\nuse modules that you don’t need. And to use dynamic imports everywhere may be too much. Instead just separate the concerns, and move your admin app into a separate microservice.</p>\n<h2 id=\"Solution\"><a href=\"#Solution\" class=\"headerlink\" title=\"Solution\"></a>Solution</h2><p>First of all, understand the fact that we can have multiple Meteor apps inside the same git repository:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkdir myapp</div><div class=\"line\">git init .</div><div class=\"line\">meteor create --bare admin</div><div class=\"line\">meteor create --bare web</div></pre></td></tr></table></figure>\n<p>That’s it, you began your microservice architecture. Now if you want to re-use code, we use symlinks. Sorry Windows users, for you it will not work.\n<figure class=\"highlight clean\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd admin/imports</div><div class=\"line\">ln -s ../../web/imports app</div></pre></td></tr></table></figure></p>\n<p>Now look at this example:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: ./admin/imports/api/posts/server/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Posts&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/app/db'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(&#123;postId&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>That’s it. If you plan on only using the db models, and not interact with other services, than just do:</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">cd admin/imports</div><div class=\"line\"><span class=\"built_in\">ln</span> -s ../../web/imports/<span class=\"built_in\">db</span> <span class=\"built_in\">db</span></div></pre></td></tr></table></figure>\n<p>and use it naturally in your admin microservice:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: ./admin/imports/api/posts/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Posts&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.approve'</span>(&#123;postId&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>So nice!\nNote that if you use WebStorm, make sure to mark both “admin” and “web” folders as Resource Root (By right clicking on the folder), so you have autocomplete on absolute imports properly.</p>\n<h2 id=\"Local-Database\"><a href=\"#Local-Database\" class=\"headerlink\" title=\"Local Database\"></a>Local Database</h2><p>In order for this to work nicely, you would have to configure them to open on different ports and connect to the same database.</p>\n<p>Note that when you start a meteor app, it opens it’s own mongodb on PORT+1 (3001 in most cases).</p>\n<p>But if we want the two microservices to work together, either install a docker mongodb locally, either <a href=\"https://docs.mongodb.com/manual/installation/\" target=\"_blank\" rel=\"external\">install mongodb directly</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: app/package.json</span></div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3000\"</span>,</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: admin/package.json</span></div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"MONGO_URL=mongodb://localhost:27017/web meteor run --port 3050\"</span>,</div><div class=\"line\">  &#125;,</div></pre></td></tr></table></figure>\n<p>Now you can start them both:\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> admin</div><div class=\"line\">npm <span class=\"built_in\">start</span></div></pre></td></tr></table></figure></p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"built_in\">cd</span> web</div><div class=\"line\">npm <span class=\"built_in\">start</span></div></pre></td></tr></table></figure>\n<h2 id=\"Deployment\"><a href=\"#Deployment\" class=\"headerlink\" title=\"Deployment\"></a>Deployment</h2><p>Each individual microservice will have it’s own <code>.deploy</code> folder inside it with the proper configuration of deployment, depending on which tool you use to do so.\nThe production bundle will be properly generated.</p>\n<h2 id=\"A-better-strategy\"><a href=\"#A-better-strategy\" class=\"headerlink\" title=\"A better strategy\"></a>A better strategy</h2><p>You will most likely head into this issue, especially if you decide to microservicify your already existing app:</p>\n<p>For example:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /web/imports/api/posts/services/PostService.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> PaymentService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/payments/services/PaymentService.js'</span>;</div><div class=\"line\"><span class=\"comment\">// ...</span></div></pre></td></tr></table></figure></p>\n<p>This will fail if you want to use the PostService inside <code>admin</code> microservice! Because it doesn’t have that file in that absolute path. </p>\n<p>The initial solution would be to use <code>imports PaymentService from &#39;../../payments/services/PaymentService&#39;</code></p>\n<p>Another great solution is to begin thinking about it as a <a href=\"/chapters/3/reusable-modules.html\">reusable module</a>. Which you can store in <code>/modules</code> folder directly.\nAnd create the following symlinks:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/web/imports/modules -&gt; /modules</div><div class=\"line\">/admin/imports/modules -&gt; /modules</div></pre></td></tr></table></figure></p>\n<p>If your module depends on things outside it, simply create a config inside it, and inject what you need inside it, keep it simple or make it as complex as you wish.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /modules/chat/config.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;&#125;</div></pre></td></tr></table></figure></p>\n<p>But there will be cases where you can’t make everything completely independent, as they interact with many other system components,\nthis would require a change in strategy:</p>\n<p>We have our <code>App Logic Layer</code> our <code>Persistence Layer</code> and our <code>Event System</code></p>\n<p>Let’s work with the following architecture:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">/core/services</div><div class=\"line\">/core/events.js</div><div class=\"line\">/core/security.js</div><div class=\"line\">/core/db</div></pre></td></tr></table></figure>\n<p>Now let’s symlink it:\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">/web/imports/core -- /core</div><div class=\"line\">/admin/imports/core -- /core</div></pre></td></tr></table></figure></p>\n<p>Sample:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /web/imports/api/posts/server/methods.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> PostService <span class=\"keyword\">from</span> <span class=\"string\">'/imports/core/services/posts/PostService.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;&#125;)</div></pre></td></tr></table></figure></p>\n<p>I personally don’t recommend you using absolute imports any longer inside <code>/core</code>, even though you can do it if it starts with <code>/imports/core</code>.</p>\n<h2 id=\"Conclusion\"><a href=\"#Conclusion\" class=\"headerlink\" title=\"Conclusion\"></a>Conclusion</h2><p>This “better” strategy would require you to do some refactoring to ensure it works properly provided you have an existing app already. However, if you don’t have an existing app and you know \nyou will have microservices, start with this approach right from the beginning.</p>\n"},{"title":"Emails","description":"How to work with emails","disqusPage":"Chapter 3: Emails","_content":"\nMost of the apps send out emails, but what is the best way to do it ?\n\nWell, I don't know about the best, but let's explore this solution.\n\nWe want emails to:\n- Be able to be found easily in a centralized place. It's very important they are not spread all over the app so we have control over them.\n- Be able to have a nice layout for everyone of them\n- Be easy to develop and easy to maintain\n\nSo, if we want to keep them centralized, it's clear that we must use [Events](/chapters/3/events.html). Therefore,\nwhenever we want to send an email we need to dispatch an event.\n\nSo, how do we render our emails ? React baby!\n\nSo we want to create a service that sends an email based on a React template. Let's see how it would look like:\n\n```js\n// file: /imports/api/emails/send.js\nimport {Email} from 'meteor/email';\nimport {Meteor} from 'meteor/meteor';\nimport React from 'react';\nimport ReactDOM from 'react-dom/server';\n\nconst debug = Meteor.isDevelopment;\n// const debug = false;\n\n/**\n * React Email Sender\n */\nexport default function (mailConfig, Component, props) {\n    const element = React.createElement(Component, props);\n    \n    let options = _.extend({}, {\n        from: 'notifications@app.com', // or get it from Meteor.settings\n        html: ReactDOM.renderToString(element)\n    }, mailConfig);\n\n    if (debug) {\n        console.log(options);\n    } else {\n        // so it won't lag your methods\n        Meteor.defer(() => {\n            Email.send(options);\n        })\n    }\n}\n```\n\nCool I think it's self descriptive what this function does, here is how it would look in a real-life scenario:\n\n```bash\n// file: /imports/api/emails/templates/NewItemCreated.jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewItem = ({item}) {\n    return (\n        <div>This is your new {item.title}</div>\n    )\n}\n\nNewItem.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default NewItem;\n```\n\nAnd to actually send it:\n\n```js\n// file: /imports/api/emails/listeners.js\nimport send from './send';\nimport {Items} from '/imports/db';\nimport {Emitter, Events} from '/imports/api/events';\n\nimport ItemNewEmail from '/imports/api/emails/templates/NewItemCreated.jsx'\n\nEmitter.on(Events.ITEM_NEW, function ({itemId}) {\n    const item = Items.findOne(itemId);\n    \n    send({\n        to: 'rick.astley@never-gonna-give-you-up.com',\n        subject: 'Never gonna let you down!'\n    }, ItemNewEmail, {item})\n});\n```\n\nNow if you want to create a layout enveloping your template it's quite easy, you would do something like:\n\n```bash\n// ...\nconst Layout = function({children, header}) {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td>{headerText}</td>\n                </tr>\n                <tr>\n                    <td>{children}</td>\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n```\n\nAnd because we want to keep the send email as flexible as possible we will use the layout inside our templates:\n\n```bash\n// ...\nconst ItemNewEmail = ({item}) {\n    return (\n        <Layout headerText={'You received a new item'}>\n            This is your new item: <strong>{item.title}</strong>\n        </Layout>\n    );\n}\n```\n\nBoth `Layout` and `ItemNewEmail` can change in anyway you like, depending on your context. \nOf course you can have multiple layouts, or no layout, it's up to the **email template to decide, not the send function**, don't forget this.\n\nIsn't this easy and clean ?","source":"chapters/3/emails.md","raw":"---\ntitle: 'Emails'\ndescription: How to work with emails\ndisqusPage: 'Chapter 3: Emails'\n---\n\nMost of the apps send out emails, but what is the best way to do it ?\n\nWell, I don't know about the best, but let's explore this solution.\n\nWe want emails to:\n- Be able to be found easily in a centralized place. It's very important they are not spread all over the app so we have control over them.\n- Be able to have a nice layout for everyone of them\n- Be easy to develop and easy to maintain\n\nSo, if we want to keep them centralized, it's clear that we must use [Events](/chapters/3/events.html). Therefore,\nwhenever we want to send an email we need to dispatch an event.\n\nSo, how do we render our emails ? React baby!\n\nSo we want to create a service that sends an email based on a React template. Let's see how it would look like:\n\n```js\n// file: /imports/api/emails/send.js\nimport {Email} from 'meteor/email';\nimport {Meteor} from 'meteor/meteor';\nimport React from 'react';\nimport ReactDOM from 'react-dom/server';\n\nconst debug = Meteor.isDevelopment;\n// const debug = false;\n\n/**\n * React Email Sender\n */\nexport default function (mailConfig, Component, props) {\n    const element = React.createElement(Component, props);\n    \n    let options = _.extend({}, {\n        from: 'notifications@app.com', // or get it from Meteor.settings\n        html: ReactDOM.renderToString(element)\n    }, mailConfig);\n\n    if (debug) {\n        console.log(options);\n    } else {\n        // so it won't lag your methods\n        Meteor.defer(() => {\n            Email.send(options);\n        })\n    }\n}\n```\n\nCool I think it's self descriptive what this function does, here is how it would look in a real-life scenario:\n\n```bash\n// file: /imports/api/emails/templates/NewItemCreated.jsx\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst NewItem = ({item}) {\n    return (\n        <div>This is your new {item.title}</div>\n    )\n}\n\nNewItem.propTypes = {\n    item: PropTypes.object,\n};\n\nexport default NewItem;\n```\n\nAnd to actually send it:\n\n```js\n// file: /imports/api/emails/listeners.js\nimport send from './send';\nimport {Items} from '/imports/db';\nimport {Emitter, Events} from '/imports/api/events';\n\nimport ItemNewEmail from '/imports/api/emails/templates/NewItemCreated.jsx'\n\nEmitter.on(Events.ITEM_NEW, function ({itemId}) {\n    const item = Items.findOne(itemId);\n    \n    send({\n        to: 'rick.astley@never-gonna-give-you-up.com',\n        subject: 'Never gonna let you down!'\n    }, ItemNewEmail, {item})\n});\n```\n\nNow if you want to create a layout enveloping your template it's quite easy, you would do something like:\n\n```bash\n// ...\nconst Layout = function({children, header}) {\n    return (\n        <table>\n            <tbody>\n                <tr>\n                    <td>{headerText}</td>\n                </tr>\n                <tr>\n                    <td>{children}</td>\n                </tr>\n            </tbody>\n        </table>\n    )\n}\n```\n\nAnd because we want to keep the send email as flexible as possible we will use the layout inside our templates:\n\n```bash\n// ...\nconst ItemNewEmail = ({item}) {\n    return (\n        <Layout headerText={'You received a new item'}>\n            This is your new item: <strong>{item.title}</strong>\n        </Layout>\n    );\n}\n```\n\nBoth `Layout` and `ItemNewEmail` can change in anyway you like, depending on your context. \nOf course you can have multiple layouts, or no layout, it's up to the **email template to decide, not the send function**, don't forget this.\n\nIsn't this easy and clean ?","date":"2017-10-25T11:14:13.436Z","updated":"2017-10-25T11:14:13.435Z","path":"chapters/3/emails.html","_id":"cj8zmb2xe0009qmu528uh1toy","comments":1,"layout":"page","content":"<p>Most of the apps send out emails, but what is the best way to do it ?</p>\n<p>Well, I don’t know about the best, but let’s explore this solution.</p>\n<p>We want emails to:</p>\n<ul>\n<li>Be able to be found easily in a centralized place. It’s very important they are not spread all over the app so we have control over them.</li>\n<li>Be able to have a nice layout for everyone of them</li>\n<li>Be easy to develop and easy to maintain</li>\n</ul>\n<p>So, if we want to keep them centralized, it’s clear that we must use <a href=\"/chapters/3/events.html\">Events</a>. Therefore,\nwhenever we want to send an email we need to dispatch an event.</p>\n<p>So, how do we render our emails ? React baby!</p>\n<p>So we want to create a service that sends an email based on a React template. Let’s see how it would look like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/emails/send.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Email&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> debug = Meteor.isDevelopment;</div><div class=\"line\"><span class=\"comment\">// const debug = false;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * React Email Sender</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mailConfig, Component, props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> element = React.createElement(Component, props);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> options = _.extend(&#123;&#125;, &#123;</div><div class=\"line\">        <span class=\"keyword\">from</span>: <span class=\"string\">'notifications@app.com'</span>, <span class=\"comment\">// or get it from Meteor.settings</span></div><div class=\"line\">        html: ReactDOM.renderToString(element)</div><div class=\"line\">    &#125;, mailConfig);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// so it won't lag your methods</span></div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(options);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Cool I think it’s self descriptive what this function does, here is how it would look in a real-life scenario:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: /imports/api/emails/templates/NewItemCreated.jsx</div><div class=\"line\">import React from <span class=\"string\">'react'</span>;</div><div class=\"line\">import PropTypes from <span class=\"string\">'prop-types'</span>;</div><div class=\"line\"></div><div class=\"line\">const NewItem = (&#123;item&#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> (</div><div class=\"line\">        &lt;div&gt;This is your new &#123;item.title&#125;&lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewItem.propTypes = &#123;</div><div class=\"line\">    item: PropTypes.object,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> default NewItem;</div></pre></td></tr></table></figure>\n<p>And to actually send it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/emails/listeners.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> send <span class=\"keyword\">from</span> <span class=\"string\">'./send'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Items&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> ItemNewEmail <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/emails/templates/NewItemCreated.jsx'</span></div><div class=\"line\"></div><div class=\"line\">Emitter.on(Events.ITEM_NEW, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123;itemId&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> item = Items.findOne(itemId);</div><div class=\"line\">    </div><div class=\"line\">    send(&#123;</div><div class=\"line\">        to: <span class=\"string\">'rick.astley@never-gonna-give-you-up.com'</span>,</div><div class=\"line\">        subject: <span class=\"string\">'Never gonna let you down!'</span></div><div class=\"line\">    &#125;, ItemNewEmail, &#123;item&#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Now if you want to create a layout enveloping your template it’s quite easy, you would do something like:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ...</div><div class=\"line\">const Layout = <span class=\"keyword\">function</span>(&#123;children, header&#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> (</div><div class=\"line\">        &lt;table&gt;</div><div class=\"line\">            &lt;tbody&gt;</div><div class=\"line\">                &lt;tr&gt;</div><div class=\"line\">                    &lt;td&gt;&#123;headerText&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">                &lt;tr&gt;</div><div class=\"line\">                    &lt;td&gt;&#123;children&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">            &lt;/tbody&gt;</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And because we want to keep the send email as flexible as possible we will use the layout inside our templates:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ...</div><div class=\"line\">const ItemNewEmail = (&#123;item&#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> (</div><div class=\"line\">        &lt;Layout headerText=&#123;<span class=\"string\">'You received a new item'</span>&#125;&gt;</div><div class=\"line\">            This is your new item: &lt;strong&gt;&#123;item.title&#125;&lt;/strong&gt;</div><div class=\"line\">        &lt;/Layout&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Both <code>Layout</code> and <code>ItemNewEmail</code> can change in anyway you like, depending on your context. \nOf course you can have multiple layouts, or no layout, it’s up to the <strong>email template to decide, not the send function</strong>, don’t forget this.</p>\n<p>Isn’t this easy and clean ?</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Most of the apps send out emails, but what is the best way to do it ?</p>\n<p>Well, I don’t know about the best, but let’s explore this solution.</p>\n<p>We want emails to:</p>\n<ul>\n<li>Be able to be found easily in a centralized place. It’s very important they are not spread all over the app so we have control over them.</li>\n<li>Be able to have a nice layout for everyone of them</li>\n<li>Be easy to develop and easy to maintain</li>\n</ul>\n<p>So, if we want to keep them centralized, it’s clear that we must use <a href=\"/chapters/3/events.html\">Events</a>. Therefore,\nwhenever we want to send an email we need to dispatch an event.</p>\n<p>So, how do we render our emails ? React baby!</p>\n<p>So we want to create a service that sends an email based on a React template. Let’s see how it would look like:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/emails/send.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Email&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/email'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">'react-dom/server'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> debug = Meteor.isDevelopment;</div><div class=\"line\"><span class=\"comment\">// const debug = false;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"><span class=\"comment\"> * React Email Sender</span></div><div class=\"line\"><span class=\"comment\"> */</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">mailConfig, Component, props</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> element = React.createElement(Component, props);</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">let</span> options = _.extend(&#123;&#125;, &#123;</div><div class=\"line\">        <span class=\"keyword\">from</span>: <span class=\"string\">'notifications@app.com'</span>, <span class=\"comment\">// or get it from Meteor.settings</span></div><div class=\"line\">        html: ReactDOM.renderToString(element)</div><div class=\"line\">    &#125;, mailConfig);</div><div class=\"line\"></div><div class=\"line\">    <span class=\"keyword\">if</span> (debug) &#123;</div><div class=\"line\">        <span class=\"built_in\">console</span>.log(options);</div><div class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</div><div class=\"line\">        <span class=\"comment\">// so it won't lag your methods</span></div><div class=\"line\">        Meteor.defer(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</div><div class=\"line\">            Email.send(options);</div><div class=\"line\">        &#125;)</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Cool I think it’s self descriptive what this function does, here is how it would look in a real-life scenario:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: /imports/api/emails/templates/NewItemCreated.jsx</div><div class=\"line\">import React from <span class=\"string\">'react'</span>;</div><div class=\"line\">import PropTypes from <span class=\"string\">'prop-types'</span>;</div><div class=\"line\"></div><div class=\"line\">const NewItem = (&#123;item&#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> (</div><div class=\"line\">        &lt;div&gt;This is your new &#123;item.title&#125;&lt;/div&gt;</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">NewItem.propTypes = &#123;</div><div class=\"line\">    item: PropTypes.object,</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">export</span> default NewItem;</div></pre></td></tr></table></figure>\n<p>And to actually send it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/emails/listeners.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> send <span class=\"keyword\">from</span> <span class=\"string\">'./send'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Items&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Emitter, Events&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/events'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> ItemNewEmail <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/emails/templates/NewItemCreated.jsx'</span></div><div class=\"line\"></div><div class=\"line\">Emitter.on(Events.ITEM_NEW, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">&#123;itemId&#125;</span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> item = Items.findOne(itemId);</div><div class=\"line\">    </div><div class=\"line\">    send(&#123;</div><div class=\"line\">        to: <span class=\"string\">'rick.astley@never-gonna-give-you-up.com'</span>,</div><div class=\"line\">        subject: <span class=\"string\">'Never gonna let you down!'</span></div><div class=\"line\">    &#125;, ItemNewEmail, &#123;item&#125;)</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<p>Now if you want to create a layout enveloping your template it’s quite easy, you would do something like:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ...</div><div class=\"line\">const Layout = <span class=\"keyword\">function</span>(&#123;children, header&#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> (</div><div class=\"line\">        &lt;table&gt;</div><div class=\"line\">            &lt;tbody&gt;</div><div class=\"line\">                &lt;tr&gt;</div><div class=\"line\">                    &lt;td&gt;&#123;headerText&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">                &lt;tr&gt;</div><div class=\"line\">                    &lt;td&gt;&#123;children&#125;&lt;/td&gt;</div><div class=\"line\">                &lt;/tr&gt;</div><div class=\"line\">            &lt;/tbody&gt;</div><div class=\"line\">        &lt;/table&gt;</div><div class=\"line\">    )</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And because we want to keep the send email as flexible as possible we will use the layout inside our templates:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">// ...</div><div class=\"line\">const ItemNewEmail = (&#123;item&#125;) &#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> (</div><div class=\"line\">        &lt;Layout headerText=&#123;<span class=\"string\">'You received a new item'</span>&#125;&gt;</div><div class=\"line\">            This is your new item: &lt;strong&gt;&#123;item.title&#125;&lt;/strong&gt;</div><div class=\"line\">        &lt;/Layout&gt;</div><div class=\"line\">    );</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Both <code>Layout</code> and <code>ItemNewEmail</code> can change in anyway you like, depending on your context. \nOf course you can have multiple layouts, or no layout, it’s up to the <strong>email template to decide, not the send function</strong>, don’t forget this.</p>\n<p>Isn’t this easy and clean ?</p>\n"},{"title":"Methods & Structure","description":"How to architect methods","disqusPage":"Chapter 3: Methods","_content":"\nUsually, you tend to put logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the *C* (Controller) in *MVC*, \nthe *C* does not contain logic, the *C* is a boss that delegates work to *M* (Services aka Models)\n\nIt is also bad because methods are a communication layer between the client and the server, they shouldn't store business logic, or logic of any kind, imagine them as proxies that communicate with your services.\n\n## Folder Structure\n\nKeep your methods inside a `/server` folder, this will allow Meteor to only refresh the server, without refreshing your browser,\nif you make a change inside a method.\n\nTake this scenario for example:\n- You have a form you click submit\n- An error happens server-side because of your fault\n- You go in the code, you fix the error, and you save the file\n- Meteor refreshes and it also refreshes your browser, loosing the form data\n\nBy coupling server-only logic under `/server` folder you will benefit a faster development speed.\n\nSo, I suggest the following design:\n\n```js\n// file: /imports/api/posts/server/methods.js\nimport {Meteor} from 'meteor/meteor';\n\nMeteor.methods({\n    'posts.create'() { ... }\n})\n```\n\n```js\n// file: /imports/api/posts/server/index.js\nimport './methods';\nimport './publications'; // You can also import your publications\nimport './listeners'; // And also your listeners in here!\n```\n\n```js\n// file: /imports/api/server.js\nimport './posts/server';\nimport './comments/server';\nimport './items/server';\n\n// And don't forget to import this in your main startup script in /server/main.js\n```\n\n## Method Naming\n\nUse `{module}.{submodule[1..n]}?.{action}`\nI recommend lowercase and plural form and camelCase for multi-words. Whatever you choose, just stick to it!\n\nExamples:\n\n```\nposts.create\nposts.comments.create\nposts.comments.impression.create\n```\n\n## Method Calls\n\nWhenever you do a method call I recommend sending an object, rather than multiple arguments.\n\nFor example instead of:\n```js\n// BAD\nMeteor.call('posts.edit', postId, postData)\n```\n\n```js\n// GOOD\nMeteor.call('posts.edit', {\n    postId,\n    postData\n})\n```\n\nThe reason is simple: easier inspection on the server and in the websocket frames. Plus, it's easier to validate. You validate against one object.\n\nIf your method is heavily used, ok, I agree use arguments because they cost less, but I highly doubt you will need this. Don't micro-optimize. \n\n## Method Body\n\nA method should do the following:\n1. **Validate** - Check that the request is valid\n2. **Secure** - Check user permissions\n3. **Delegate** - Delegate job to services\n\nWe can do #1 by using `check` but I'd rather use SimpleSchema:\n```js\n// ...\nMeteor.methods({\n    'posts.edit'(data) {\n        new SimpleSchema({\n            postId: {type: String},\n            postData: {type: Object, blackbox: true},\n        }).validate(data);\n        // it will throw an exception if it's not good\n        \n        const {postId, postData} = data;\n        // ...   \n    }\n})\n```\n\nFor #2, always use a Security service, which you either store at top level in `/imports/api/security.js` or locally in `posts` module folder,\nor you could use both, why not?\n\n```js\nimport PostSecurity from '/imports/api/posts/security.js';\nimport Security from '/imports/api/security.js';\n\nMeteor.methods({\n    'posts.edit'({postId, postData}) {\n        // ...\n        Security.checkLoggedIn(this.userId);\n        PostSecurity.checkAllowedToEdit(this.userId, postId);\n        // ...\n    }\n})\n```\n\nThese security checks must throw a `Meteor.Error` if the check does not pass.\n\nFor #3, you know it, we [use a service](/chapters/3/services.html).\n\n## Optimistic UI\n\nSometimes you need that when you do an action which updates a local collection (meaning you observe reactive data) and\nyou have a form that does an insert, you want it to immediately appear on your view. (not wait for the publication to send it to you)\n\nThe best way to do this is to use ValidatedMethod: https://github.com/meteor/validated-method\n\nStore them inside: `/imports/api/{module}/optimistic/methodName.js`\nImport them all in: `/imports/api/{module}/optimistic/methods.js`\nAnd if you have `imports/api/{module}/server/index.js` make sure to `import ../optimistic` inside `/imports/api/{module}/server/methods.js`\n\nIn most cases you won't use this, but it's a very nice feature when you need to.\n\n## Mixins\n\nThere will be scenarios where all your methods defined need a logged in user, or a user with a certain role, it can become tedious and repetitive, that \ninside every method you do this check, you need to do it once and keep your code [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\n\n```js\n// file: /imports/api/mixins/index.js\nimport _ from 'underscore';\n\nconst mix = function(mixins, methods) {\n    _.each(methods, (value, key) => {\n        methods[key] = function (...args) {\n            mixins.forEach(mixin => mixin.call(this, ...args));\n            return value.call(this, ...args);\n        }\n    })\n}\n\nconst checkLoggedIn = function () {\n    if (!this.userId) {\n        throw new Meteor.Error('not-allowed');\n    }\n};\n\nexport {mix, checkLoggedIn};\n```\n\nAnd where you define your methods:\n```js\nimport {mix, checkLoggedIn} from '/imports/api/mixins';\n\nconst methods = mix([checkLoggedIn], {\n    'posts.create'() {\n        // do something;\n    }\n});\n\nMeteor.methods(methods);\n```\n\nThese few lines of code can have great impact on readability and elegance of your code. Feel free to use them!\n\n\n\n\n","source":"chapters/3/methods.md","raw":"---\ntitle: 'Methods & Structure'\ndescription: How to architect methods\ndisqusPage: 'Chapter 3: Methods'\n---\n\nUsually, you tend to put logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the *C* (Controller) in *MVC*, \nthe *C* does not contain logic, the *C* is a boss that delegates work to *M* (Services aka Models)\n\nIt is also bad because methods are a communication layer between the client and the server, they shouldn't store business logic, or logic of any kind, imagine them as proxies that communicate with your services.\n\n## Folder Structure\n\nKeep your methods inside a `/server` folder, this will allow Meteor to only refresh the server, without refreshing your browser,\nif you make a change inside a method.\n\nTake this scenario for example:\n- You have a form you click submit\n- An error happens server-side because of your fault\n- You go in the code, you fix the error, and you save the file\n- Meteor refreshes and it also refreshes your browser, loosing the form data\n\nBy coupling server-only logic under `/server` folder you will benefit a faster development speed.\n\nSo, I suggest the following design:\n\n```js\n// file: /imports/api/posts/server/methods.js\nimport {Meteor} from 'meteor/meteor';\n\nMeteor.methods({\n    'posts.create'() { ... }\n})\n```\n\n```js\n// file: /imports/api/posts/server/index.js\nimport './methods';\nimport './publications'; // You can also import your publications\nimport './listeners'; // And also your listeners in here!\n```\n\n```js\n// file: /imports/api/server.js\nimport './posts/server';\nimport './comments/server';\nimport './items/server';\n\n// And don't forget to import this in your main startup script in /server/main.js\n```\n\n## Method Naming\n\nUse `{module}.{submodule[1..n]}?.{action}`\nI recommend lowercase and plural form and camelCase for multi-words. Whatever you choose, just stick to it!\n\nExamples:\n\n```\nposts.create\nposts.comments.create\nposts.comments.impression.create\n```\n\n## Method Calls\n\nWhenever you do a method call I recommend sending an object, rather than multiple arguments.\n\nFor example instead of:\n```js\n// BAD\nMeteor.call('posts.edit', postId, postData)\n```\n\n```js\n// GOOD\nMeteor.call('posts.edit', {\n    postId,\n    postData\n})\n```\n\nThe reason is simple: easier inspection on the server and in the websocket frames. Plus, it's easier to validate. You validate against one object.\n\nIf your method is heavily used, ok, I agree use arguments because they cost less, but I highly doubt you will need this. Don't micro-optimize. \n\n## Method Body\n\nA method should do the following:\n1. **Validate** - Check that the request is valid\n2. **Secure** - Check user permissions\n3. **Delegate** - Delegate job to services\n\nWe can do #1 by using `check` but I'd rather use SimpleSchema:\n```js\n// ...\nMeteor.methods({\n    'posts.edit'(data) {\n        new SimpleSchema({\n            postId: {type: String},\n            postData: {type: Object, blackbox: true},\n        }).validate(data);\n        // it will throw an exception if it's not good\n        \n        const {postId, postData} = data;\n        // ...   \n    }\n})\n```\n\nFor #2, always use a Security service, which you either store at top level in `/imports/api/security.js` or locally in `posts` module folder,\nor you could use both, why not?\n\n```js\nimport PostSecurity from '/imports/api/posts/security.js';\nimport Security from '/imports/api/security.js';\n\nMeteor.methods({\n    'posts.edit'({postId, postData}) {\n        // ...\n        Security.checkLoggedIn(this.userId);\n        PostSecurity.checkAllowedToEdit(this.userId, postId);\n        // ...\n    }\n})\n```\n\nThese security checks must throw a `Meteor.Error` if the check does not pass.\n\nFor #3, you know it, we [use a service](/chapters/3/services.html).\n\n## Optimistic UI\n\nSometimes you need that when you do an action which updates a local collection (meaning you observe reactive data) and\nyou have a form that does an insert, you want it to immediately appear on your view. (not wait for the publication to send it to you)\n\nThe best way to do this is to use ValidatedMethod: https://github.com/meteor/validated-method\n\nStore them inside: `/imports/api/{module}/optimistic/methodName.js`\nImport them all in: `/imports/api/{module}/optimistic/methods.js`\nAnd if you have `imports/api/{module}/server/index.js` make sure to `import ../optimistic` inside `/imports/api/{module}/server/methods.js`\n\nIn most cases you won't use this, but it's a very nice feature when you need to.\n\n## Mixins\n\nThere will be scenarios where all your methods defined need a logged in user, or a user with a certain role, it can become tedious and repetitive, that \ninside every method you do this check, you need to do it once and keep your code [DRY](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself).\n\n\n```js\n// file: /imports/api/mixins/index.js\nimport _ from 'underscore';\n\nconst mix = function(mixins, methods) {\n    _.each(methods, (value, key) => {\n        methods[key] = function (...args) {\n            mixins.forEach(mixin => mixin.call(this, ...args));\n            return value.call(this, ...args);\n        }\n    })\n}\n\nconst checkLoggedIn = function () {\n    if (!this.userId) {\n        throw new Meteor.Error('not-allowed');\n    }\n};\n\nexport {mix, checkLoggedIn};\n```\n\nAnd where you define your methods:\n```js\nimport {mix, checkLoggedIn} from '/imports/api/mixins';\n\nconst methods = mix([checkLoggedIn], {\n    'posts.create'() {\n        // do something;\n    }\n});\n\nMeteor.methods(methods);\n```\n\nThese few lines of code can have great impact on readability and elegance of your code. Feel free to use them!\n\n\n\n\n","date":"2019-10-04T12:00:07.763Z","updated":"2019-10-04T12:00:07.763Z","path":"chapters/3/methods.html","_id":"cj8zmc4ob000aqmu55p9n0jyo","comments":1,"layout":"page","content":"<p>Usually, you tend to put logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the <em>C</em> (Controller) in <em>MVC</em>, \nthe <em>C</em> does not contain logic, the <em>C</em> is a boss that delegates work to <em>M</em> (Services aka Models)</p>\n<p>It is also bad because methods are a communication layer between the client and the server, they shouldn’t store business logic, or logic of any kind, imagine them as proxies that communicate with your services.</p>\n<h2 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h2><p>Keep your methods inside a <code>/server</code> folder, this will allow Meteor to only refresh the server, without refreshing your browser,\nif you make a change inside a method.</p>\n<p>Take this scenario for example:</p>\n<ul>\n<li>You have a form you click submit</li>\n<li>An error happens server-side because of your fault</li>\n<li>You go in the code, you fix the error, and you save the file</li>\n<li>Meteor refreshes and it also refreshes your browser, loosing the form data</li>\n</ul>\n<p>By coupling server-only logic under <code>/server</code> folder you will benefit a faster development speed.</p>\n<p>So, I suggest the following design:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/server/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>() &#123; ... &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/server/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./methods'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./publications'</span>; <span class=\"comment\">// You can also import your publications</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./listeners'</span>; <span class=\"comment\">// And also your listeners in here!</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/server.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./comments/server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./items/server'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// And don't forget to import this in your main startup script in /server/main.js</span></div></pre></td></tr></table></figure>\n<h2 id=\"Method-Naming\"><a href=\"#Method-Naming\" class=\"headerlink\" title=\"Method Naming\"></a>Method Naming</h2><p>Use <code>{module}.{submodule[1..n]}?.{action}</code>\nI recommend lowercase and plural form and camelCase for multi-words. Whatever you choose, just stick to it!</p>\n<p>Examples:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">posts.create</div><div class=\"line\">posts<span class=\"selector-class\">.comments</span><span class=\"selector-class\">.create</span></div><div class=\"line\">posts<span class=\"selector-class\">.comments</span><span class=\"selector-class\">.impression</span><span class=\"selector-class\">.create</span></div></pre></td></tr></table></figure>\n<h2 id=\"Method-Calls\"><a href=\"#Method-Calls\" class=\"headerlink\" title=\"Method Calls\"></a>Method Calls</h2><p>Whenever you do a method call I recommend sending an object, rather than multiple arguments.</p>\n<p>For example instead of:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'posts.edit'</span>, postId, postData)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'posts.edit'</span>, &#123;</div><div class=\"line\">    postId,</div><div class=\"line\">    postData</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The reason is simple: easier inspection on the server and in the websocket frames. Plus, it’s easier to validate. You validate against one object.</p>\n<p>If your method is heavily used, ok, I agree use arguments because they cost less, but I highly doubt you will need this. Don’t micro-optimize. </p>\n<h2 id=\"Method-Body\"><a href=\"#Method-Body\" class=\"headerlink\" title=\"Method Body\"></a>Method Body</h2><p>A method should do the following:</p>\n<ol>\n<li><strong>Validate</strong> - Check that the request is valid</li>\n<li><strong>Secure</strong> - Check user permissions</li>\n<li><strong>Delegate</strong> - Delegate job to services</li>\n</ol>\n<p>We can do #1 by using <code>check</code> but I’d rather use SimpleSchema:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.edit'</span>(data) &#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> SimpleSchema(&#123;</div><div class=\"line\">            postId: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</div><div class=\"line\">            postData: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>, <span class=\"attr\">blackbox</span>: <span class=\"literal\">true</span>&#125;,</div><div class=\"line\">        &#125;).validate(data);</div><div class=\"line\">        <span class=\"comment\">// it will throw an exception if it's not good</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;postId, postData&#125; = data;</div><div class=\"line\">        <span class=\"comment\">// ...   </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>For #2, always use a Security service, which you either store at top level in <code>/imports/api/security.js</code> or locally in <code>posts</code> module folder,\nor you could use both, why not?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PostSecurity <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/posts/security.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.edit'</span>(&#123;postId, postData&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        PostSecurity.checkAllowedToEdit(<span class=\"keyword\">this</span>.userId, postId);</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>These security checks must throw a <code>Meteor.Error</code> if the check does not pass.</p>\n<p>For #3, you know it, we <a href=\"/chapters/3/services.html\">use a service</a>.</p>\n<h2 id=\"Optimistic-UI\"><a href=\"#Optimistic-UI\" class=\"headerlink\" title=\"Optimistic UI\"></a>Optimistic UI</h2><p>Sometimes you need that when you do an action which updates a local collection (meaning you observe reactive data) and\nyou have a form that does an insert, you want it to immediately appear on your view. (not wait for the publication to send it to you)</p>\n<p>The best way to do this is to use ValidatedMethod: <a href=\"https://github.com/meteor/validated-method\" target=\"_blank\" rel=\"noopener\">https://github.com/meteor/validated-method</a></p>\n<p>Store them inside: <code>/imports/api/{module}/optimistic/methodName.js</code>\nImport them all in: <code>/imports/api/{module}/optimistic/methods.js</code>\nAnd if you have <code>imports/api/{module}/server/index.js</code> make sure to <code>import ../optimistic</code> inside <code>/imports/api/{module}/server/methods.js</code></p>\n<p>In most cases you won’t use this, but it’s a very nice feature when you need to.</p>\n<h2 id=\"Mixins\"><a href=\"#Mixins\" class=\"headerlink\" title=\"Mixins\"></a>Mixins</h2><p>There will be scenarios where all your methods defined need a logged in user, or a user with a certain role, it can become tedious and repetitive, that \ninside every method you do this check, you need to do it once and keep your code <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" target=\"_blank\" rel=\"noopener\">DRY</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/mixins/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'underscore'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mixins, methods</span>) </span>&#123;</div><div class=\"line\">    _.each(methods, (value, key) =&gt; &#123;</div><div class=\"line\">        methods[key] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">            mixins.forEach(<span class=\"function\"><span class=\"params\">mixin</span> =&gt;</span> mixin.call(<span class=\"keyword\">this</span>, ...args));</div><div class=\"line\">            <span class=\"keyword\">return</span> value.call(<span class=\"keyword\">this</span>, ...args);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> checkLoggedIn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;mix, checkLoggedIn&#125;;</div></pre></td></tr></table></figure>\n<p>And where you define your methods:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;mix, checkLoggedIn&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/mixins'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> methods = mix([checkLoggedIn], &#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// do something;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(methods);</div></pre></td></tr></table></figure></p>\n<p>These few lines of code can have great impact on readability and elegance of your code. Feel free to use them!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Usually, you tend to put logic in your Meteor methods which is a very very bad terrible thing, because Meteor methods act as server-side routes, they act as the <em>C</em> (Controller) in <em>MVC</em>, \nthe <em>C</em> does not contain logic, the <em>C</em> is a boss that delegates work to <em>M</em> (Services aka Models)</p>\n<p>It is also bad because methods are a communication layer between the client and the server, they shouldn’t store business logic, or logic of any kind, imagine them as proxies that communicate with your services.</p>\n<h2 id=\"Folder-Structure\"><a href=\"#Folder-Structure\" class=\"headerlink\" title=\"Folder Structure\"></a>Folder Structure</h2><p>Keep your methods inside a <code>/server</code> folder, this will allow Meteor to only refresh the server, without refreshing your browser,\nif you make a change inside a method.</p>\n<p>Take this scenario for example:</p>\n<ul>\n<li>You have a form you click submit</li>\n<li>An error happens server-side because of your fault</li>\n<li>You go in the code, you fix the error, and you save the file</li>\n<li>Meteor refreshes and it also refreshes your browser, loosing the form data</li>\n</ul>\n<p>By coupling server-only logic under <code>/server</code> folder you will benefit a faster development speed.</p>\n<p>So, I suggest the following design:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/server/methods.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>() &#123; ... &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/server/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./methods'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./publications'</span>; <span class=\"comment\">// You can also import your publications</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./listeners'</span>; <span class=\"comment\">// And also your listeners in here!</span></div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/server.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./comments/server'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./items/server'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// And don't forget to import this in your main startup script in /server/main.js</span></div></pre></td></tr></table></figure>\n<h2 id=\"Method-Naming\"><a href=\"#Method-Naming\" class=\"headerlink\" title=\"Method Naming\"></a>Method Naming</h2><p>Use <code>{module}.{submodule[1..n]}?.{action}</code>\nI recommend lowercase and plural form and camelCase for multi-words. Whatever you choose, just stick to it!</p>\n<p>Examples:</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">posts.create</div><div class=\"line\">posts<span class=\"selector-class\">.comments</span><span class=\"selector-class\">.create</span></div><div class=\"line\">posts<span class=\"selector-class\">.comments</span><span class=\"selector-class\">.impression</span><span class=\"selector-class\">.create</span></div></pre></td></tr></table></figure>\n<h2 id=\"Method-Calls\"><a href=\"#Method-Calls\" class=\"headerlink\" title=\"Method Calls\"></a>Method Calls</h2><p>Whenever you do a method call I recommend sending an object, rather than multiple arguments.</p>\n<p>For example instead of:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// BAD</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'posts.edit'</span>, postId, postData)</div></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// GOOD</span></div><div class=\"line\">Meteor.call(<span class=\"string\">'posts.edit'</span>, &#123;</div><div class=\"line\">    postId,</div><div class=\"line\">    postData</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The reason is simple: easier inspection on the server and in the websocket frames. Plus, it’s easier to validate. You validate against one object.</p>\n<p>If your method is heavily used, ok, I agree use arguments because they cost less, but I highly doubt you will need this. Don’t micro-optimize. </p>\n<h2 id=\"Method-Body\"><a href=\"#Method-Body\" class=\"headerlink\" title=\"Method Body\"></a>Method Body</h2><p>A method should do the following:</p>\n<ol>\n<li><strong>Validate</strong> - Check that the request is valid</li>\n<li><strong>Secure</strong> - Check user permissions</li>\n<li><strong>Delegate</strong> - Delegate job to services</li>\n</ol>\n<p>We can do #1 by using <code>check</code> but I’d rather use SimpleSchema:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// ...</span></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.edit'</span>(data) &#123;</div><div class=\"line\">        <span class=\"keyword\">new</span> SimpleSchema(&#123;</div><div class=\"line\">            postId: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</div><div class=\"line\">            postData: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>, <span class=\"attr\">blackbox</span>: <span class=\"literal\">true</span>&#125;,</div><div class=\"line\">        &#125;).validate(data);</div><div class=\"line\">        <span class=\"comment\">// it will throw an exception if it's not good</span></div><div class=\"line\">        </div><div class=\"line\">        <span class=\"keyword\">const</span> &#123;postId, postData&#125; = data;</div><div class=\"line\">        <span class=\"comment\">// ...   </span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure></p>\n<p>For #2, always use a Security service, which you either store at top level in <code>/imports/api/security.js</code> or locally in <code>posts</code> module folder,\nor you could use both, why not?</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> PostSecurity <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/posts/security.js'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> Security <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/security.js'</span>;</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(&#123;</div><div class=\"line\">    <span class=\"string\">'posts.edit'</span>(&#123;postId, postData&#125;) &#123;</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">        Security.checkLoggedIn(<span class=\"keyword\">this</span>.userId);</div><div class=\"line\">        PostSecurity.checkAllowedToEdit(<span class=\"keyword\">this</span>.userId, postId);</div><div class=\"line\">        <span class=\"comment\">// ...</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>These security checks must throw a <code>Meteor.Error</code> if the check does not pass.</p>\n<p>For #3, you know it, we <a href=\"/chapters/3/services.html\">use a service</a>.</p>\n<h2 id=\"Optimistic-UI\"><a href=\"#Optimistic-UI\" class=\"headerlink\" title=\"Optimistic UI\"></a>Optimistic UI</h2><p>Sometimes you need that when you do an action which updates a local collection (meaning you observe reactive data) and\nyou have a form that does an insert, you want it to immediately appear on your view. (not wait for the publication to send it to you)</p>\n<p>The best way to do this is to use ValidatedMethod: <a href=\"https://github.com/meteor/validated-method\" target=\"_blank\" rel=\"noopener\">https://github.com/meteor/validated-method</a></p>\n<p>Store them inside: <code>/imports/api/{module}/optimistic/methodName.js</code>\nImport them all in: <code>/imports/api/{module}/optimistic/methods.js</code>\nAnd if you have <code>imports/api/{module}/server/index.js</code> make sure to <code>import ../optimistic</code> inside <code>/imports/api/{module}/server/methods.js</code></p>\n<p>In most cases you won’t use this, but it’s a very nice feature when you need to.</p>\n<h2 id=\"Mixins\"><a href=\"#Mixins\" class=\"headerlink\" title=\"Mixins\"></a>Mixins</h2><p>There will be scenarios where all your methods defined need a logged in user, or a user with a certain role, it can become tedious and repetitive, that \ninside every method you do this check, you need to do it once and keep your code <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" target=\"_blank\" rel=\"noopener\">DRY</a>.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/mixins/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'underscore'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> mix = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">mixins, methods</span>) </span>&#123;</div><div class=\"line\">    _.each(methods, (value, key) =&gt; &#123;</div><div class=\"line\">        methods[key] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">...args</span>) </span>&#123;</div><div class=\"line\">            mixins.forEach(<span class=\"function\"><span class=\"params\">mixin</span> =&gt;</span> mixin.call(<span class=\"keyword\">this</span>, ...args));</div><div class=\"line\">            <span class=\"keyword\">return</span> value.call(<span class=\"keyword\">this</span>, ...args);</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> checkLoggedIn = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"keyword\">this</span>.userId) &#123;</div><div class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-allowed'</span>);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> &#123;mix, checkLoggedIn&#125;;</div></pre></td></tr></table></figure>\n<p>And where you define your methods:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;mix, checkLoggedIn&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/api/mixins'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> methods = mix([checkLoggedIn], &#123;</div><div class=\"line\">    <span class=\"string\">'posts.create'</span>() &#123;</div><div class=\"line\">        <span class=\"comment\">// do something;</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div><div class=\"line\"></div><div class=\"line\">Meteor.methods(methods);</div></pre></td></tr></table></figure></p>\n<p>These few lines of code can have great impact on readability and elegance of your code. Feel free to use them!</p>\n"},{"title":"Linting","description":"Keeping your code standards high","disqusPage":"Chapter 3: Linting","_content":"\n## Why?\n\nBecause it takes you 2 minutes to set up, and the code quality respects the standards. Also you make it easier for code-reviewers, to spend time\non thinking about what you did, rather than your coding standards mistakes.\n\nThe thing is we need to automate this process, so we need to run the linting *before we commit*.\nAnd not allow a commits with bad code, this will force you to write beautiful code.\n\n## Install\n\nAlso, try integrating it with your IDE, for WebStorm look here: https://www.jetbrains.com/help/webstorm/eslint.html \n\n```js\nmeteor npm i --save-dev babel-eslint eslint eslint-plugin-import eslint-plugin-meteor eslint-plugin-react eslint-import-resolver-meteor lint-staged pre-commit\n```\n\n## Config \n\nThis is an opionated configuration.\n\nCreate `.eslintrc.js` file inside your project root:\n```\nmodule.exports = {\n  parserOptions: {\n    allowImportExportEverywhere: true,\n    ecmaFeatures: {\n      jsx: true\n    }\n  },\n  env: {\n    es6: true,\n    browser: true,\n    node: true\n  },\n  plugins: [\"meteor\", \"react\"],\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:meteor/recommended\",\n    \"plugin:react/recommended\"\n  ],\n  settings: {\n    \"import/resolver\": \"meteor\"\n  },\n  rules: {\n    \"react/jsx-filename-extension\": [\n      1,\n      {\n        extensions: [\".jsx\"]\n      }\n    ],\n    \"react/jsx-no-bind\": [\n      2,\n      {\n        ignoreRefs: false,\n        allowArrowFunctions: false,\n        allowFunctions: false,\n        allowBind: false\n      }\n    ],\n    \"max-len\": [0, { code: 100 }],\n    \"import/no-absolute-path\": [0],\n    \"meteor/audit-argument-checks\": [0],\n    indent: [\"error\", 4],\n    \"switch-colon-spacing\": [0],\n    \"no-invalid-this\": [0],\n    \"new-cap\": [1],\n    \"no-trailing-spaces\": [\n      2,\n      {\n        skipBlankLines: true\n      }\n    ]\n  },\n  overrides: [{ files: [\"*.js\", \"*.jsx\"] }]\n};\n```\n\nIn your `package.json` file add the following:\n\n```\n{\n  ...\n  \"scripts\": {\n    \"start\": \"meteor run --settings settings.json\",\n    \"test\": \"meteor test --driver-package practicalmeteor:mocha --settings settings.json\",\n    \"lint\": \"eslint . --ext .jsx --fix\"\n  },\n  \"lint-staged\": {\n    \"*.js\": \"eslint --fix\",\n    \"*.jsx\": \"eslint --fix\"\n  },\n  \"pre-commit\": \"lint-staged\"\n}\n```\n\nNice, now if you want to commit, it will try to lint your code first. And if any errors happen, it will not allow you to do so.\n\nIf by any chance you are in a rush and you have a production bug and the whole world is burning! Try running:\n```\ngit commit -m \"xxx\" -n\n```\n\nUsing `-n` will bypass the linting and it will allow you to commit directly.","source":"chapters/3/linting.md","raw":"---\ntitle: 'Linting'\ndescription: Keeping your code standards high\ndisqusPage: 'Chapter 3: Linting'\n---\n\n## Why?\n\nBecause it takes you 2 minutes to set up, and the code quality respects the standards. Also you make it easier for code-reviewers, to spend time\non thinking about what you did, rather than your coding standards mistakes.\n\nThe thing is we need to automate this process, so we need to run the linting *before we commit*.\nAnd not allow a commits with bad code, this will force you to write beautiful code.\n\n## Install\n\nAlso, try integrating it with your IDE, for WebStorm look here: https://www.jetbrains.com/help/webstorm/eslint.html \n\n```js\nmeteor npm i --save-dev babel-eslint eslint eslint-plugin-import eslint-plugin-meteor eslint-plugin-react eslint-import-resolver-meteor lint-staged pre-commit\n```\n\n## Config \n\nThis is an opionated configuration.\n\nCreate `.eslintrc.js` file inside your project root:\n```\nmodule.exports = {\n  parserOptions: {\n    allowImportExportEverywhere: true,\n    ecmaFeatures: {\n      jsx: true\n    }\n  },\n  env: {\n    es6: true,\n    browser: true,\n    node: true\n  },\n  plugins: [\"meteor\", \"react\"],\n  extends: [\n    \"eslint:recommended\",\n    \"plugin:meteor/recommended\",\n    \"plugin:react/recommended\"\n  ],\n  settings: {\n    \"import/resolver\": \"meteor\"\n  },\n  rules: {\n    \"react/jsx-filename-extension\": [\n      1,\n      {\n        extensions: [\".jsx\"]\n      }\n    ],\n    \"react/jsx-no-bind\": [\n      2,\n      {\n        ignoreRefs: false,\n        allowArrowFunctions: false,\n        allowFunctions: false,\n        allowBind: false\n      }\n    ],\n    \"max-len\": [0, { code: 100 }],\n    \"import/no-absolute-path\": [0],\n    \"meteor/audit-argument-checks\": [0],\n    indent: [\"error\", 4],\n    \"switch-colon-spacing\": [0],\n    \"no-invalid-this\": [0],\n    \"new-cap\": [1],\n    \"no-trailing-spaces\": [\n      2,\n      {\n        skipBlankLines: true\n      }\n    ]\n  },\n  overrides: [{ files: [\"*.js\", \"*.jsx\"] }]\n};\n```\n\nIn your `package.json` file add the following:\n\n```\n{\n  ...\n  \"scripts\": {\n    \"start\": \"meteor run --settings settings.json\",\n    \"test\": \"meteor test --driver-package practicalmeteor:mocha --settings settings.json\",\n    \"lint\": \"eslint . --ext .jsx --fix\"\n  },\n  \"lint-staged\": {\n    \"*.js\": \"eslint --fix\",\n    \"*.jsx\": \"eslint --fix\"\n  },\n  \"pre-commit\": \"lint-staged\"\n}\n```\n\nNice, now if you want to commit, it will try to lint your code first. And if any errors happen, it will not allow you to do so.\n\nIf by any chance you are in a rush and you have a production bug and the whole world is burning! Try running:\n```\ngit commit -m \"xxx\" -n\n```\n\nUsing `-n` will bypass the linting and it will allow you to commit directly.","date":"2019-10-04T12:00:07.763Z","updated":"2019-10-04T12:00:07.763Z","path":"chapters/3/linting.html","_id":"cj8zmde48000bqmu5hmutzyrm","comments":1,"layout":"page","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Because it takes you 2 minutes to set up, and the code quality respects the standards. Also you make it easier for code-reviewers, to spend time\non thinking about what you did, rather than your coding standards mistakes.</p>\n<p>The thing is we need to automate this process, so we need to run the linting <em>before we commit</em>.\nAnd not allow a commits with bad code, this will force you to write beautiful code.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Also, try integrating it with your IDE, for WebStorm look here: <a href=\"https://www.jetbrains.com/help/webstorm/eslint.html\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/help/webstorm/eslint.html</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor npm i --save-dev babel-eslint eslint eslint-plugin-<span class=\"keyword\">import</span> eslint-plugin-meteor eslint-plugin-react eslint-<span class=\"keyword\">import</span>-resolver-meteor lint-staged pre-commit</div></pre></td></tr></table></figure>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>This is an opionated configuration.</p>\n<p>Create <code>.eslintrc.js</code> file inside your project root:\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">  parserOptions:</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">    allowImportExportEverywhere:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">    ecmaFeatures:</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">      jsx:</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"string\">&#125;</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  env:</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">    es6:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">    browser:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">    node:</span> <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  plugins:</span> <span class=\"string\">[\"meteor\",</span> <span class=\"string\">\"react\"</span><span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">  extends:</span> <span class=\"string\">[</span></div><div class=\"line\">    <span class=\"string\">\"eslint:recommended\"</span><span class=\"string\">,</span></div><div class=\"line\">    <span class=\"string\">\"plugin:meteor/recommended\"</span><span class=\"string\">,</span></div><div class=\"line\">    <span class=\"string\">\"plugin:react/recommended\"</span></div><div class=\"line\">  <span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">  settings:</span> <span class=\"string\">&#123;</span></div><div class=\"line\">    <span class=\"string\">\"import/resolver\"</span><span class=\"string\">:</span> <span class=\"string\">\"meteor\"</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  rules:</span> <span class=\"string\">&#123;</span></div><div class=\"line\">    <span class=\"string\">\"react/jsx-filename-extension\"</span><span class=\"string\">:</span> <span class=\"string\">[</span></div><div class=\"line\">      <span class=\"number\">1</span><span class=\"string\">,</span></div><div class=\"line\">      <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">        extensions:</span> <span class=\"string\">[\".jsx\"]</span></div><div class=\"line\">      <span class=\"string\">&#125;</span></div><div class=\"line\">    <span class=\"string\">],</span></div><div class=\"line\">    <span class=\"string\">\"react/jsx-no-bind\"</span><span class=\"string\">:</span> <span class=\"string\">[</span></div><div class=\"line\">      <span class=\"number\">2</span><span class=\"string\">,</span></div><div class=\"line\">      <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">        ignoreRefs:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">        allowArrowFunctions:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">        allowFunctions:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">        allowBind:</span> <span class=\"literal\">false</span></div><div class=\"line\">      <span class=\"string\">&#125;</span></div><div class=\"line\">    <span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">    \"max-len\":</span> <span class=\"string\">[0,</span> <span class=\"string\">&#123;</span> <span class=\"attr\">code:</span> <span class=\"number\">100</span> <span class=\"string\">&#125;],</span></div><div class=\"line\">    <span class=\"string\">\"import/no-absolute-path\"</span><span class=\"string\">:</span> <span class=\"string\">[0],</span></div><div class=\"line\">    <span class=\"string\">\"meteor/audit-argument-checks\"</span><span class=\"string\">:</span> <span class=\"string\">[0],</span></div><div class=\"line\"><span class=\"attr\">    indent:</span> <span class=\"string\">[\"error\",</span> <span class=\"number\">4</span><span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">    \"switch-colon-spacing\":</span> <span class=\"string\">[0],</span></div><div class=\"line\"><span class=\"attr\">    \"no-invalid-this\":</span> <span class=\"string\">[0],</span></div><div class=\"line\"><span class=\"attr\">    \"new-cap\":</span> <span class=\"string\">[1],</span></div><div class=\"line\"><span class=\"attr\">    \"no-trailing-spaces\":</span> <span class=\"string\">[</span></div><div class=\"line\">      <span class=\"number\">2</span><span class=\"string\">,</span></div><div class=\"line\">      <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">        skipBlankLines:</span> <span class=\"literal\">true</span></div><div class=\"line\">      <span class=\"string\">&#125;</span></div><div class=\"line\">    <span class=\"string\">]</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  overrides:</span> <span class=\"string\">[&#123;</span> <span class=\"attr\">files:</span> <span class=\"string\">[\"*.js\",</span> <span class=\"string\">\"*.jsx\"</span><span class=\"string\">]</span> <span class=\"string\">&#125;]</span></div><div class=\"line\"><span class=\"string\">&#125;;</span></div></pre></td></tr></table></figure></p>\n<p>In your <code>package.json</code> file add the following:</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"meteor run --settings settings.json\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"meteor test --driver-package practicalmeteor:mocha --settings settings.json\"</span>,</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint . --ext .jsx --fix\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"lint-staged\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"*.js\"</span>: <span class=\"string\">\"eslint --fix\"</span>,</div><div class=\"line\">    <span class=\"string\">\"*.jsx\"</span>: <span class=\"string\">\"eslint --fix\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Nice, now if you want to commit, it will try to lint your code first. And if any errors happen, it will not allow you to do so.</p>\n<p>If by any chance you are in a rush and you have a production bug and the whole world is burning! Try running:\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m <span class=\"string\">\"xxx\"</span> -<span class=\"built_in\">n</span></div></pre></td></tr></table></figure></p>\n<p>Using <code>-n</code> will bypass the linting and it will allow you to commit directly.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Because it takes you 2 minutes to set up, and the code quality respects the standards. Also you make it easier for code-reviewers, to spend time\non thinking about what you did, rather than your coding standards mistakes.</p>\n<p>The thing is we need to automate this process, so we need to run the linting <em>before we commit</em>.\nAnd not allow a commits with bad code, this will force you to write beautiful code.</p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><p>Also, try integrating it with your IDE, for WebStorm look here: <a href=\"https://www.jetbrains.com/help/webstorm/eslint.html\" target=\"_blank\" rel=\"noopener\">https://www.jetbrains.com/help/webstorm/eslint.html</a> </p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor npm i --save-dev babel-eslint eslint eslint-plugin-<span class=\"keyword\">import</span> eslint-plugin-meteor eslint-plugin-react eslint-<span class=\"keyword\">import</span>-resolver-meteor lint-staged pre-commit</div></pre></td></tr></table></figure>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>This is an opionated configuration.</p>\n<p>Create <code>.eslintrc.js</code> file inside your project root:\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">  parserOptions:</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">    allowImportExportEverywhere:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">    ecmaFeatures:</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">      jsx:</span> <span class=\"literal\">true</span></div><div class=\"line\">    <span class=\"string\">&#125;</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  env:</span> <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">    es6:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">    browser:</span> <span class=\"literal\">true</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">    node:</span> <span class=\"literal\">true</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  plugins:</span> <span class=\"string\">[\"meteor\",</span> <span class=\"string\">\"react\"</span><span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">  extends:</span> <span class=\"string\">[</span></div><div class=\"line\">    <span class=\"string\">\"eslint:recommended\"</span><span class=\"string\">,</span></div><div class=\"line\">    <span class=\"string\">\"plugin:meteor/recommended\"</span><span class=\"string\">,</span></div><div class=\"line\">    <span class=\"string\">\"plugin:react/recommended\"</span></div><div class=\"line\">  <span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">  settings:</span> <span class=\"string\">&#123;</span></div><div class=\"line\">    <span class=\"string\">\"import/resolver\"</span><span class=\"string\">:</span> <span class=\"string\">\"meteor\"</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  rules:</span> <span class=\"string\">&#123;</span></div><div class=\"line\">    <span class=\"string\">\"react/jsx-filename-extension\"</span><span class=\"string\">:</span> <span class=\"string\">[</span></div><div class=\"line\">      <span class=\"number\">1</span><span class=\"string\">,</span></div><div class=\"line\">      <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">        extensions:</span> <span class=\"string\">[\".jsx\"]</span></div><div class=\"line\">      <span class=\"string\">&#125;</span></div><div class=\"line\">    <span class=\"string\">],</span></div><div class=\"line\">    <span class=\"string\">\"react/jsx-no-bind\"</span><span class=\"string\">:</span> <span class=\"string\">[</span></div><div class=\"line\">      <span class=\"number\">2</span><span class=\"string\">,</span></div><div class=\"line\">      <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">        ignoreRefs:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">        allowArrowFunctions:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">        allowFunctions:</span> <span class=\"literal\">false</span><span class=\"string\">,</span></div><div class=\"line\"><span class=\"attr\">        allowBind:</span> <span class=\"literal\">false</span></div><div class=\"line\">      <span class=\"string\">&#125;</span></div><div class=\"line\">    <span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">    \"max-len\":</span> <span class=\"string\">[0,</span> <span class=\"string\">&#123;</span> <span class=\"attr\">code:</span> <span class=\"number\">100</span> <span class=\"string\">&#125;],</span></div><div class=\"line\">    <span class=\"string\">\"import/no-absolute-path\"</span><span class=\"string\">:</span> <span class=\"string\">[0],</span></div><div class=\"line\">    <span class=\"string\">\"meteor/audit-argument-checks\"</span><span class=\"string\">:</span> <span class=\"string\">[0],</span></div><div class=\"line\"><span class=\"attr\">    indent:</span> <span class=\"string\">[\"error\",</span> <span class=\"number\">4</span><span class=\"string\">],</span></div><div class=\"line\"><span class=\"attr\">    \"switch-colon-spacing\":</span> <span class=\"string\">[0],</span></div><div class=\"line\"><span class=\"attr\">    \"no-invalid-this\":</span> <span class=\"string\">[0],</span></div><div class=\"line\"><span class=\"attr\">    \"new-cap\":</span> <span class=\"string\">[1],</span></div><div class=\"line\"><span class=\"attr\">    \"no-trailing-spaces\":</span> <span class=\"string\">[</span></div><div class=\"line\">      <span class=\"number\">2</span><span class=\"string\">,</span></div><div class=\"line\">      <span class=\"string\">&#123;</span></div><div class=\"line\"><span class=\"attr\">        skipBlankLines:</span> <span class=\"literal\">true</span></div><div class=\"line\">      <span class=\"string\">&#125;</span></div><div class=\"line\">    <span class=\"string\">]</span></div><div class=\"line\">  <span class=\"string\">&#125;,</span></div><div class=\"line\"><span class=\"attr\">  overrides:</span> <span class=\"string\">[&#123;</span> <span class=\"attr\">files:</span> <span class=\"string\">[\"*.js\",</span> <span class=\"string\">\"*.jsx\"</span><span class=\"string\">]</span> <span class=\"string\">&#125;]</span></div><div class=\"line\"><span class=\"string\">&#125;;</span></div></pre></td></tr></table></figure></p>\n<p>In your <code>package.json</code> file add the following:</p>\n<figure class=\"highlight clojure\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">&#123;</div><div class=\"line\">  ...</div><div class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"meteor run --settings settings.json\"</span>,</div><div class=\"line\">    <span class=\"string\">\"test\"</span>: <span class=\"string\">\"meteor test --driver-package practicalmeteor:mocha --settings settings.json\"</span>,</div><div class=\"line\">    <span class=\"string\">\"lint\"</span>: <span class=\"string\">\"eslint . --ext .jsx --fix\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"lint-staged\"</span>: &#123;</div><div class=\"line\">    <span class=\"string\">\"*.js\"</span>: <span class=\"string\">\"eslint --fix\"</span>,</div><div class=\"line\">    <span class=\"string\">\"*.jsx\"</span>: <span class=\"string\">\"eslint --fix\"</span></div><div class=\"line\">  &#125;,</div><div class=\"line\">  <span class=\"string\">\"pre-commit\"</span>: <span class=\"string\">\"lint-staged\"</span></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Nice, now if you want to commit, it will try to lint your code first. And if any errors happen, it will not allow you to do so.</p>\n<p>If by any chance you are in a rush and you have a production bug and the whole world is burning! Try running:\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git commit -m <span class=\"string\">\"xxx\"</span> -<span class=\"built_in\">n</span></div></pre></td></tr></table></figure></p>\n<p>Using <code>-n</code> will bypass the linting and it will allow you to commit directly.</p>\n"},{"title":"Reusable Modules","description":"How to create pieces of code designed for reusability","disqusPage":"Chapter 3: Reusable Modules","_content":"\n## Why?\n\nLet's say you want to create a chat thingie, and you want to decouple it, because\nyou think that in the future you will definitely use it in some other project.\n\nYou need to treat it separately as a module:\n\nCreate a new folder `/imports/modules/chat/`\n\n```js\n// file: /imports/modules/chat/client.js\n// Do things related to client initialization (if necessary)\n\n// file: /imports/modules/chat/server.js\n// Do things related to server initialization, methods, listeners, etc (if necessary)\n\n// file: /imports/modules/chat/db\n// Apply the same principles\n\n// file: /imports/modules/chat/api\n// Apply the same principles\n\n// file: /imports/modules/chat/client\n// Store frontend stuff here.\n```\n\n## Imports\n\nInside your re-usable module, never use absolute paths, only relative paths when importing:\n\n```js\nimport {Threads, Messages} from ../../db\n```\n\n## README.md\n\nProvide a README that specifies the module this uses, so it can be nicely reused.\n\n```markdown\n// file: /imports/modules/chat/README.md\n// Store here the installation details and npm dependencies.\n// Describe in general terms how to use this module\n```\n\n## Event handling\n\nUse an independent event handler. Not the global one.\n\n```js\n// file: /imports/modules/chat/api/events.js\n\nimport EventEmitter from 'event-emitter';\n\nconst Events = {\n    CHAT_NEW: 'chat.new'\n}\n\nexport default new EventEmitter();\n```\n\nIf you want to unify emitters you can do so simply:\nhttps://www.npmjs.com/package/event-emitter#unifyemitter1-emitter2-event-emitterunify\n\nBut if you want to do app specific logic when something in this module happens, I recommend you use the EventEmitter from `chat` module to listen for events.\n\n\n## A git submodule\n\nOfcourse now that you have it as a module, you can make it a git-submodule, and make it re-usable in multiple projects and maintainable.\n\nRead more here:\nhttps://git-scm.com/book/en/v2/Git-Tools-Submodules \n\n## Caution\n\nThe problem is that this app is not so independent, so you may find yourself conflicting with some npm dependencies,\nso keep that in mind. It depends on your whole structure and how you use it.\n\nYou can avoid this by properly versioning your git submodule.\n\n\n","source":"chapters/3/reusable-modules.md","raw":"---\ntitle: 'Reusable Modules'\ndescription: How to create pieces of code designed for reusability\ndisqusPage: 'Chapter 3: Reusable Modules'\n---\n\n## Why?\n\nLet's say you want to create a chat thingie, and you want to decouple it, because\nyou think that in the future you will definitely use it in some other project.\n\nYou need to treat it separately as a module:\n\nCreate a new folder `/imports/modules/chat/`\n\n```js\n// file: /imports/modules/chat/client.js\n// Do things related to client initialization (if necessary)\n\n// file: /imports/modules/chat/server.js\n// Do things related to server initialization, methods, listeners, etc (if necessary)\n\n// file: /imports/modules/chat/db\n// Apply the same principles\n\n// file: /imports/modules/chat/api\n// Apply the same principles\n\n// file: /imports/modules/chat/client\n// Store frontend stuff here.\n```\n\n## Imports\n\nInside your re-usable module, never use absolute paths, only relative paths when importing:\n\n```js\nimport {Threads, Messages} from ../../db\n```\n\n## README.md\n\nProvide a README that specifies the module this uses, so it can be nicely reused.\n\n```markdown\n// file: /imports/modules/chat/README.md\n// Store here the installation details and npm dependencies.\n// Describe in general terms how to use this module\n```\n\n## Event handling\n\nUse an independent event handler. Not the global one.\n\n```js\n// file: /imports/modules/chat/api/events.js\n\nimport EventEmitter from 'event-emitter';\n\nconst Events = {\n    CHAT_NEW: 'chat.new'\n}\n\nexport default new EventEmitter();\n```\n\nIf you want to unify emitters you can do so simply:\nhttps://www.npmjs.com/package/event-emitter#unifyemitter1-emitter2-event-emitterunify\n\nBut if you want to do app specific logic when something in this module happens, I recommend you use the EventEmitter from `chat` module to listen for events.\n\n\n## A git submodule\n\nOfcourse now that you have it as a module, you can make it a git-submodule, and make it re-usable in multiple projects and maintainable.\n\nRead more here:\nhttps://git-scm.com/book/en/v2/Git-Tools-Submodules \n\n## Caution\n\nThe problem is that this app is not so independent, so you may find yourself conflicting with some npm dependencies,\nso keep that in mind. It depends on your whole structure and how you use it.\n\nYou can avoid this by properly versioning your git submodule.\n\n\n","date":"2017-10-25T07:53:09.388Z","updated":"2017-10-25T07:53:09.387Z","path":"chapters/3/reusable-modules.html","_id":"cj8zmh8hd000dqmu56alfzarz","comments":1,"layout":"page","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Let’s say you want to create a chat thingie, and you want to decouple it, because\nyou think that in the future you will definitely use it in some other project.</p>\n<p>You need to treat it separately as a module:</p>\n<p>Create a new folder <code>/imports/modules/chat/</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/client.js</span></div><div class=\"line\"><span class=\"comment\">// Do things related to client initialization (if necessary)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/server.js</span></div><div class=\"line\"><span class=\"comment\">// Do things related to server initialization, methods, listeners, etc (if necessary)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/db</span></div><div class=\"line\"><span class=\"comment\">// Apply the same principles</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/api</span></div><div class=\"line\"><span class=\"comment\">// Apply the same principles</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/client</span></div><div class=\"line\"><span class=\"comment\">// Store frontend stuff here.</span></div></pre></td></tr></table></figure>\n<h2 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a>Imports</h2><p>Inside your re-usable module, never use absolute paths, only relative paths when importing:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Threads, Messages&#125; <span class=\"keyword\">from</span> ../../db</div></pre></td></tr></table></figure>\n<h2 id=\"README-md\"><a href=\"#README-md\" class=\"headerlink\" title=\"README.md\"></a>README.md</h2><p>Provide a README that specifies the module this uses, so it can be nicely reused.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: /imports/modules/chat/README.md</div><div class=\"line\">// Store here the installation details and npm dependencies.</div><div class=\"line\">// Describe in general terms how to use this module</div></pre></td></tr></table></figure>\n<h2 id=\"Event-handling\"><a href=\"#Event-handling\" class=\"headerlink\" title=\"Event handling\"></a>Event handling</h2><p>Use an independent event handler. Not the global one.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/api/events.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    CHAT_NEW: <span class=\"string\">'chat.new'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> EventEmitter();</div></pre></td></tr></table></figure>\n<p>If you want to unify emitters you can do so simply:\n<a href=\"https://www.npmjs.com/package/event-emitter#unifyemitter1-emitter2-event-emitterunify\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/event-emitter#unifyemitter1-emitter2-event-emitterunify</a></p>\n<p>But if you want to do app specific logic when something in this module happens, I recommend you use the EventEmitter from <code>chat</code> module to listen for events.</p>\n<h2 id=\"A-git-submodule\"><a href=\"#A-git-submodule\" class=\"headerlink\" title=\"A git submodule\"></a>A git submodule</h2><p>Ofcourse now that you have it as a module, you can make it a git-submodule, and make it re-usable in multiple projects and maintainable.</p>\n<p>Read more here:\n<a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\" target=\"_blank\" rel=\"external\">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a> </p>\n<h2 id=\"Caution\"><a href=\"#Caution\" class=\"headerlink\" title=\"Caution\"></a>Caution</h2><p>The problem is that this app is not so independent, so you may find yourself conflicting with some npm dependencies,\nso keep that in mind. It depends on your whole structure and how you use it.</p>\n<p>You can avoid this by properly versioning your git submodule.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Let’s say you want to create a chat thingie, and you want to decouple it, because\nyou think that in the future you will definitely use it in some other project.</p>\n<p>You need to treat it separately as a module:</p>\n<p>Create a new folder <code>/imports/modules/chat/</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/client.js</span></div><div class=\"line\"><span class=\"comment\">// Do things related to client initialization (if necessary)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/server.js</span></div><div class=\"line\"><span class=\"comment\">// Do things related to server initialization, methods, listeners, etc (if necessary)</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/db</span></div><div class=\"line\"><span class=\"comment\">// Apply the same principles</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/api</span></div><div class=\"line\"><span class=\"comment\">// Apply the same principles</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/client</span></div><div class=\"line\"><span class=\"comment\">// Store frontend stuff here.</span></div></pre></td></tr></table></figure>\n<h2 id=\"Imports\"><a href=\"#Imports\" class=\"headerlink\" title=\"Imports\"></a>Imports</h2><p>Inside your re-usable module, never use absolute paths, only relative paths when importing:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> &#123;Threads, Messages&#125; <span class=\"keyword\">from</span> ../../db</div></pre></td></tr></table></figure>\n<h2 id=\"README-md\"><a href=\"#README-md\" class=\"headerlink\" title=\"README.md\"></a>README.md</h2><p>Provide a README that specifies the module this uses, so it can be nicely reused.</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">// file: /imports/modules/chat/README.md</div><div class=\"line\">// Store here the installation details and npm dependencies.</div><div class=\"line\">// Describe in general terms how to use this module</div></pre></td></tr></table></figure>\n<h2 id=\"Event-handling\"><a href=\"#Event-handling\" class=\"headerlink\" title=\"Event handling\"></a>Event handling</h2><p>Use an independent event handler. Not the global one.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/modules/chat/api/events.js</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">import</span> EventEmitter <span class=\"keyword\">from</span> <span class=\"string\">'event-emitter'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> Events = &#123;</div><div class=\"line\">    CHAT_NEW: <span class=\"string\">'chat.new'</span></div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> EventEmitter();</div></pre></td></tr></table></figure>\n<p>If you want to unify emitters you can do so simply:\n<a href=\"https://www.npmjs.com/package/event-emitter#unifyemitter1-emitter2-event-emitterunify\" target=\"_blank\" rel=\"external\">https://www.npmjs.com/package/event-emitter#unifyemitter1-emitter2-event-emitterunify</a></p>\n<p>But if you want to do app specific logic when something in this module happens, I recommend you use the EventEmitter from <code>chat</code> module to listen for events.</p>\n<h2 id=\"A-git-submodule\"><a href=\"#A-git-submodule\" class=\"headerlink\" title=\"A git submodule\"></a>A git submodule</h2><p>Ofcourse now that you have it as a module, you can make it a git-submodule, and make it re-usable in multiple projects and maintainable.</p>\n<p>Read more here:\n<a href=\"https://git-scm.com/book/en/v2/Git-Tools-Submodules\" target=\"_blank\" rel=\"external\">https://git-scm.com/book/en/v2/Git-Tools-Submodules</a> </p>\n<h2 id=\"Caution\"><a href=\"#Caution\" class=\"headerlink\" title=\"Caution\"></a>Caution</h2><p>The problem is that this app is not so independent, so you may find yourself conflicting with some npm dependencies,\nso keep that in mind. It depends on your whole structure and how you use it.</p>\n<p>You can avoid this by properly versioning your git submodule.</p>\n"},{"title":"Persistence Layer","description":"Using collections the right way","disqusPage":"Chapter 3: Persistence Layer","_content":"\n## What is it ?\n\nThe Persistence Layer (PL) is that \"thingie\" in your app that communicates with another API to store the data we want.\nIn our case, we communicate with MongoDB for that. Therefore, an instance of `Mongo.Collection` is our API to communicate with the Persistence Layer, therefore in our app we can regard collections as the PL.\n\nWhat if at some point in the future, you decide that a certain\ncollection should not be kept in MongoDB but rather used via an external HTTP API? \n\nYour code architecture should try to be as independent as possible from the PL, because this opens the path for scaling and decoupling later on.\n\nJust try and think this way, and whenever you want to start a new project: disregard the way you are going to store the data, focus more on the app/business logic layer.\n\nThen build your database on top of it.\n\n## Structure\n\nSince we want to explicitly separate it, I propose that instead of storing collections inside `/imports/api`, we give them their own folder `/imports/db`\n\n`/imports/api/posts/collection.js` -> `/imports/db/posts/collection.js`\n\n\n```js\n// file: /imports/db/posts/collection.js\nimport {Mongo} from 'meteor/mongo';\n\nconst Posts = new Mongo.Collection('posts');\n\nexport default Posts;\n```\n\nNow let's assume you have a new collection for comments on posts, and it's used only for posts. What do we do ?\n\nShould we store it in `/imports/db/posts/comments/collection.js` or in `/imports/db/postComments/collection.js` ?\n\nIt's a matter of preference here. I prefer the first approach, but the collection's name I use is `PostComments` not `Comments`, so\nwe know it's context. But this only applies if my collection is coupled in a way to posts, if not, then go with second approach.\n\n## Validating Documents\n\nWe need to be able to validate easily the data we save in a collection to prevent bad things from happening.\n\nFor this we are going to use [`aldeed:collection2-core`](https://github.com/aldeed/meteor-collection2-core) and [`SimpleSchema`](https://www.npmjs.com/package/simpl-schema)\n\nRead more about it here: https://github.com/aldeed/meteor-collection2-core then come back!\n\n```js\nmeteor add aldeed:collection2-core\nmeteor npm i -S simpl-schema\n```\n\nNow let's create a schema for our `Post`:\n\n```js\n// file: /imports/db/posts/schema.js\nimport SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    title: {\n        type: String,\n    },\n    tags: {\n        type: Array,\n    },\n    'tags.$': {\n        type: String,\n    },\n    isApproved: {\n        type: Boolean,\n        defaultValue: false,\n    },\n    userId: {\n        type: String,\n    }\n})\n```\n\nNow let's attach it:\n```js\n// file: /imports/db/posts/collection.js\nimport {Mongo} from 'meteor/mongo';\nimport PostSchema from './schema';\n\nconst Posts = new Mongo.Collection('posts');\n\nPosts.attachSchema(PostSchema);\n\nexport default Posts;\n```\n\nNice! This structure works fine. This will never allow you to insert or update a document without validating it properly.\n\nBeautiful, but now we see those \"tags\" in there, and we know from our previous chapter, that we need a way to re-use them properly,\nthis is why we introduce here to concept of Enums.\n\n\n## Enums\n\nAn Enum is a set of constants, and they should be in their own module. Let's try an example\n\n```js\n// file: /imports/db/posts/enums/tags.js\n\nconst PostTagsEnum = {\n    PSYCHOLOGY: 'psychology', \n    PHILOSOPHY: 'philosophy',\n}\n\n// maybe you want to have them used as human readable \nconst PostTagsLabels = {\n    [PostTagsEnum.PSYCHOLOGY]: 'Psychology & Education',\n    [PostTagsEnum.PHILOSOPHY]: 'Philosophy & Arts',\n}\n\nexport default PostTagsEnum;\n\nexport {\n    PostTagsEnum,\n    PostTagsLabels,\n}\n```\n\nThe value of the enum, represents how you internally want to store it. Does not represent how you want to display it. Keep that in mind.\n\nAnd if we go back to our schema it can look something like:\n```js\nimport _ from 'underscore'; // don't forget to do meteor npm i -S underscore\nimport SimpleSchema from 'simpl-schema';\nimport PostTagsEnum from './enums/tags';\n\nexport default new SimpleSchema({\n    ...\n    'tags.$': {\n        type: String,\n        allowedValues: _.values(PostTagsEnum) // this returns ['psychology', 'philosophy']\n    },\n    ...\n})\n```\nAnother quick example to ilustrate their purpose, imagine a status of a Task:\n```js\n// /imports/db/tasks/enums/status.js\nexport default {\n    ACTIVE: 'active',\n    PENDING: 'pending',\n    COMPLETED: 'completed'\n}\n```\n\nThe rule using enums is that when you are dealing with them, you must never use the string/value itself.\n\nIn your code, client or server, when you have to see if a status is active:\n```js\n// VERY BAD\nif (object.status === 'active') {\n    // do something\n}\n```\n\n```js\nimport ObjectStatusEnum from '...';\n// OK\nif (object.status === ObjectStatusEnum.ACTIVE) {\n    // do something\n}\n```\n\nKeep in mind that you can use Enums anywhere, not only for storing stuff in your db. Whenever you find there's a list of constants needed,\nyou are looking at an enum. And ofcourse you can use them client-side or server-side.\n\n## Meteor.users\n\nThis collection feels like it is from another world, it's best that we standardize it as well, and also\ngive it a schema:\n\n```js\n// file: /imports/db/users/collection.js\nimport {Meteor} from 'meteor/meteor';\nimport UserSchema from './schema';\n\nconst Users = Meteor.users;\n\nUsers.attachSchema(UserSchema);\n\nexport default Users;\n```\n\nA sample schema that works with Accounts configuration:\n```js\n// file: /imports/db/users/schema.js\nimport SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    _id: {type: String},\n    username: {type: String, optional: true},\n    emails: {type: Array},\n    'emails.$': {type: Object},\n    'emails.$.address': {type: String},\n    'emails.$.verified': {type: Boolean},\n    createdAt: {type: Date},\n    services: {type: Object, blackbox: true},\n    roles: {\n        type: Array,\n        optional: true\n    },\n    \"roles.$\": {\n        type: String\n    },\n    profile: {\n        type: Object,\n        optional: true\n    },\n    'profile.firstName': {\n        type: String,\n        optional: true\n    },\n    'profile.lastName': {\n        type: String,\n        optional: true\n    },\n});\n```\n\nAnd don't forget about this nice package: https://github.com/alanning/meteor-roles. Allows you to nicely manage roles in the system.\n\n\n## Hooks\n\nYou may want to do something after an element is removed or updated or inserted from a certain collection.\n\nThe almost official way to do this is by using this awesome package: https://atmospherejs.com/matb33/collection-hooks\n \nGive it a read, you'll love it.\n\nMy recommendation here is to dispatch an event on a given hook ([event handling will be described a bit later](\"/chapters/3/events.html\")), and store the hooks inside `/imports/db/{collection}/hooks.js`,\nand the logic for handling the hooks should be inside `/imports/api`\n\n## Behaviours\n\nMost likely, your collections will store the user who created something, or store things like when it was created, or when it was updated.\n\nSo instead of creating hooks for every collection, it's easier to define a behaviour and re-use it.\n\nPlease read about it:\nhttps://github.com/zimme/meteor-collection-behaviours/\n\nI think it's fine to just attachBehaviours where you store the collection:\n\n```js\n// file: /imports/db/posts/collection.js\n\n// ...\nPosts.attachBehaviour('timestampable');\n```\n\n## Extensions\n\nDon't be afraid to extend your collection, especially when you need something that is specific to the collection. For example, you have the `_id` of an user,\nand you want to quickly get the email:\n\n```js\n// file: /imports/db/users/extensions.js\n\nexport default {\n    getEmailForUserId(userId) {\n        const user = this.findOne(userId, {\n            fields: {emails: 1}\n        });\n        \n        if (!user) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        return user.emails[0].address;\n    }\n}\n```\n\n```js\n// file: /imports/db/users/collection.js\nimport UsersExtension from './extensions';\n\n// ...\n_.extend(Users, UsersExtension);\n// ...\n```\n\n## Helpers\n\nWith the use of this package: https://github.com/dburles/meteor-collection-helpers you can make your documents smarter if they are fetched through your collections directly.\n```js\n// file: /imports/db/users/helpers.js\n\nexport default {\n    getEmail(userId) {\n        return this.emails[0].address;\n    }\n}\n```\n\n```js\n// file: /imports/db/users/collection.js\nimport UsersHelpers from './helpers';\n\n// ...\nUsers.helpers(UsersHelpers);\n// ...\n```\n\nThis will allow you to easily do:\n\n```js\nUsers.findOne(userId).getEmail()\n```\n\nIf you return them from a method call, you won't benefit from helpers. But what you can do is map it to the transform function on the client.\n```js\n// server\nMeteor.methods({\n    \"users.findAll\"() { \n        // returns an array of objects and strips out all the additional functionality\n        return Users.find().fetch(); \n    }\n})\n\n// client\nMeteor.call('users.findAll', function (err, res) {\n    const users = res.map(Users._transform);\n    // users[0].getEmail() will now work\n})\n```\n\n## Shortcuts\n \nCreate an index for your collections:\n\n```js\n// file: /imports/db/index.js\n\nimport Posts from './posts/collection';\nimport Comments from './comments/collection';\n\nexport {\n    Posts,\n    Comments\n}\n```\n\nThis will allow you to use it like this:\n\n```js\nimport {Posts, Comments} from '/imports/db';\n```\n\nYou can go ahead and even put enums inside index.js, but be very careful with their naming,\nas they need to be specific: `${collection}${enumName}Enum`, example:\n- TaskStatusEnum\n- PostTagsEnum \n- etc\n\n## Relations (Grapher)\n\nHow do we work with relations in a non-relational database? We use [Grapher](http://grapher.cultofcoders.com), ofcourse.\nAnd even if we don't have relations, we still should use [Grapher](http://grapher.cultofcoders.com) because of the way it works, as you will see below:\n\nHere's how simple it is:\n\n```bash\nmeteor add cultofcoders:grapher\n```\n\n```\n// file: /imports/db/posts/links.js\nimport {Posts, Users} from '/imports/db';\n\nPosts.addLinks({\n    author: {\n        type: 'one',\n        collection: Users,\n        field: 'authorId'\n    }\n})\n```\n\nWe need those links loaded, so aggregate all links importing into a single file. \nImport this file (`/imports/db/links`) in the `client` and `server` init scripts so they are loaded.\n\n```js\n// file: /imports/db/links.js\nimport './posts/links.js';\n```\n\nAnd when you want to get the post alongside with the user's profile for example:\n\n```js\nconst post = Posts.createQuery({\n    $filters: {\n        _id: postId,\n    },\n    title: 1,\n    author: {\n        profile: 1,\n    }\n}).fetchOne((err, post) => {\n    console.log(post.user.profile.firstName);\n});\n```\n\n[Grapher](http://grapher.cultofcoders.com) is a very complex tool and it can work with queries client-side as well. You can have reactive queries, there's simply a lot related to it,\nbut it's properly documented here: http://grapher.cultofcoders.com. \n\nBegin with the Guide, and patiently read through it. Once you read the guide you can understand the following patterns:\n\n### Creating a simple query\n\nThe recommended way of working with [Grapher](http://grapher.cultofcoders.com) is by working exclusively with NamedQueries.\nIf you would like to store and expose NamedQueries:\n\n```js\n// file: /imports/db/posts/queries/getPost.js\nimport Posts from '../collection';\n\nexport default Posts.createQuery('getPost', {\n    $filter({filters, params}) {\n        filters._id = params.postId;\n    },\n    title: 1,\n    user: {\n        profile: 1,\n    }\n});\n```\n\nDon't be afraid to create shortcuts for all your queries in one place:\n```js\n// file: /imports/db/queries.js\nimport getPost from './posts/queries/getPost',\n\nexport {\n    getPost\n}\n```\n\nNow that we created the query, we need to expose and secure it:\n\n```js\n// file: /imports/api/posts/queries/getPost.expose.js\n// if you don't expose it you can't work with it\nimport {getPost} from '/imports/db/queries'\n\ngetPost.expose({\n    firewall(userId, params) {\n        // you can manipulate params object here\n        if (isAllowed(userId)) {\n            // you can throw exceptions if he's not allowed access to this query\n        }\n        // the firewall can either: throw exception or modify params\n    }\n})\n```\n\nAggregate it in one file and import this file on server-side only.\n```js\n// file: /imports/api/exposures.js\nimport './posts/queries/getPost.expose.js';\n```\n\nNow from the client you can easily do something like:\n```js\n// barbaric (but it's also nice)\ncreateQuery({\n    getPost: {\n        postId: 'XXX'\n    }\n}).fetchOne((err, post) => {\n    console.log(post);\n    // you will also have access to post.users.name\n})\n\n// modular\nimport {getPost} from '/imports/db/queries'\n\ngetPost.clone({\n    postId: 'XXX'\n}).fetchOne((err, post) => { ... })\n```\n\nBy abstracting the data retrieval layer to [Grapher](http://grapher.cultofcoders.com) and allowing it to do the linking of collections for you, you will find yourself with so much less headache.\nBecause [Grapher](http://grapher.cultofcoders.com) forces you to specify only the fields you need, you will find your apps running fast and secure right from the start.\n\n### Separating concerns\n\nYou may feel that having your query in `/imports/db` and your exposure inside `/imports/api` to be a little odd. \nThis is why you can put your query inside `/imports/api` as well. But the reason for not putting exposure inside `/imports/db` is\nbecause it contains `App Logic`, and that layer it should be independent from the `Persistance Layer`\n\n\n\n\n\n","source":"chapters/3/persistence-layer.md","raw":"---\ntitle: 'Persistence Layer'\ndescription: Using collections the right way\ndisqusPage: 'Chapter 3: Persistence Layer'\n---\n\n## What is it ?\n\nThe Persistence Layer (PL) is that \"thingie\" in your app that communicates with another API to store the data we want.\nIn our case, we communicate with MongoDB for that. Therefore, an instance of `Mongo.Collection` is our API to communicate with the Persistence Layer, therefore in our app we can regard collections as the PL.\n\nWhat if at some point in the future, you decide that a certain\ncollection should not be kept in MongoDB but rather used via an external HTTP API? \n\nYour code architecture should try to be as independent as possible from the PL, because this opens the path for scaling and decoupling later on.\n\nJust try and think this way, and whenever you want to start a new project: disregard the way you are going to store the data, focus more on the app/business logic layer.\n\nThen build your database on top of it.\n\n## Structure\n\nSince we want to explicitly separate it, I propose that instead of storing collections inside `/imports/api`, we give them their own folder `/imports/db`\n\n`/imports/api/posts/collection.js` -> `/imports/db/posts/collection.js`\n\n\n```js\n// file: /imports/db/posts/collection.js\nimport {Mongo} from 'meteor/mongo';\n\nconst Posts = new Mongo.Collection('posts');\n\nexport default Posts;\n```\n\nNow let's assume you have a new collection for comments on posts, and it's used only for posts. What do we do ?\n\nShould we store it in `/imports/db/posts/comments/collection.js` or in `/imports/db/postComments/collection.js` ?\n\nIt's a matter of preference here. I prefer the first approach, but the collection's name I use is `PostComments` not `Comments`, so\nwe know it's context. But this only applies if my collection is coupled in a way to posts, if not, then go with second approach.\n\n## Validating Documents\n\nWe need to be able to validate easily the data we save in a collection to prevent bad things from happening.\n\nFor this we are going to use [`aldeed:collection2-core`](https://github.com/aldeed/meteor-collection2-core) and [`SimpleSchema`](https://www.npmjs.com/package/simpl-schema)\n\nRead more about it here: https://github.com/aldeed/meteor-collection2-core then come back!\n\n```js\nmeteor add aldeed:collection2-core\nmeteor npm i -S simpl-schema\n```\n\nNow let's create a schema for our `Post`:\n\n```js\n// file: /imports/db/posts/schema.js\nimport SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    title: {\n        type: String,\n    },\n    tags: {\n        type: Array,\n    },\n    'tags.$': {\n        type: String,\n    },\n    isApproved: {\n        type: Boolean,\n        defaultValue: false,\n    },\n    userId: {\n        type: String,\n    }\n})\n```\n\nNow let's attach it:\n```js\n// file: /imports/db/posts/collection.js\nimport {Mongo} from 'meteor/mongo';\nimport PostSchema from './schema';\n\nconst Posts = new Mongo.Collection('posts');\n\nPosts.attachSchema(PostSchema);\n\nexport default Posts;\n```\n\nNice! This structure works fine. This will never allow you to insert or update a document without validating it properly.\n\nBeautiful, but now we see those \"tags\" in there, and we know from our previous chapter, that we need a way to re-use them properly,\nthis is why we introduce here to concept of Enums.\n\n\n## Enums\n\nAn Enum is a set of constants, and they should be in their own module. Let's try an example\n\n```js\n// file: /imports/db/posts/enums/tags.js\n\nconst PostTagsEnum = {\n    PSYCHOLOGY: 'psychology', \n    PHILOSOPHY: 'philosophy',\n}\n\n// maybe you want to have them used as human readable \nconst PostTagsLabels = {\n    [PostTagsEnum.PSYCHOLOGY]: 'Psychology & Education',\n    [PostTagsEnum.PHILOSOPHY]: 'Philosophy & Arts',\n}\n\nexport default PostTagsEnum;\n\nexport {\n    PostTagsEnum,\n    PostTagsLabels,\n}\n```\n\nThe value of the enum, represents how you internally want to store it. Does not represent how you want to display it. Keep that in mind.\n\nAnd if we go back to our schema it can look something like:\n```js\nimport _ from 'underscore'; // don't forget to do meteor npm i -S underscore\nimport SimpleSchema from 'simpl-schema';\nimport PostTagsEnum from './enums/tags';\n\nexport default new SimpleSchema({\n    ...\n    'tags.$': {\n        type: String,\n        allowedValues: _.values(PostTagsEnum) // this returns ['psychology', 'philosophy']\n    },\n    ...\n})\n```\nAnother quick example to ilustrate their purpose, imagine a status of a Task:\n```js\n// /imports/db/tasks/enums/status.js\nexport default {\n    ACTIVE: 'active',\n    PENDING: 'pending',\n    COMPLETED: 'completed'\n}\n```\n\nThe rule using enums is that when you are dealing with them, you must never use the string/value itself.\n\nIn your code, client or server, when you have to see if a status is active:\n```js\n// VERY BAD\nif (object.status === 'active') {\n    // do something\n}\n```\n\n```js\nimport ObjectStatusEnum from '...';\n// OK\nif (object.status === ObjectStatusEnum.ACTIVE) {\n    // do something\n}\n```\n\nKeep in mind that you can use Enums anywhere, not only for storing stuff in your db. Whenever you find there's a list of constants needed,\nyou are looking at an enum. And ofcourse you can use them client-side or server-side.\n\n## Meteor.users\n\nThis collection feels like it is from another world, it's best that we standardize it as well, and also\ngive it a schema:\n\n```js\n// file: /imports/db/users/collection.js\nimport {Meteor} from 'meteor/meteor';\nimport UserSchema from './schema';\n\nconst Users = Meteor.users;\n\nUsers.attachSchema(UserSchema);\n\nexport default Users;\n```\n\nA sample schema that works with Accounts configuration:\n```js\n// file: /imports/db/users/schema.js\nimport SimpleSchema from 'simpl-schema';\n\nexport default new SimpleSchema({\n    _id: {type: String},\n    username: {type: String, optional: true},\n    emails: {type: Array},\n    'emails.$': {type: Object},\n    'emails.$.address': {type: String},\n    'emails.$.verified': {type: Boolean},\n    createdAt: {type: Date},\n    services: {type: Object, blackbox: true},\n    roles: {\n        type: Array,\n        optional: true\n    },\n    \"roles.$\": {\n        type: String\n    },\n    profile: {\n        type: Object,\n        optional: true\n    },\n    'profile.firstName': {\n        type: String,\n        optional: true\n    },\n    'profile.lastName': {\n        type: String,\n        optional: true\n    },\n});\n```\n\nAnd don't forget about this nice package: https://github.com/alanning/meteor-roles. Allows you to nicely manage roles in the system.\n\n\n## Hooks\n\nYou may want to do something after an element is removed or updated or inserted from a certain collection.\n\nThe almost official way to do this is by using this awesome package: https://atmospherejs.com/matb33/collection-hooks\n \nGive it a read, you'll love it.\n\nMy recommendation here is to dispatch an event on a given hook ([event handling will be described a bit later](\"/chapters/3/events.html\")), and store the hooks inside `/imports/db/{collection}/hooks.js`,\nand the logic for handling the hooks should be inside `/imports/api`\n\n## Behaviours\n\nMost likely, your collections will store the user who created something, or store things like when it was created, or when it was updated.\n\nSo instead of creating hooks for every collection, it's easier to define a behaviour and re-use it.\n\nPlease read about it:\nhttps://github.com/zimme/meteor-collection-behaviours/\n\nI think it's fine to just attachBehaviours where you store the collection:\n\n```js\n// file: /imports/db/posts/collection.js\n\n// ...\nPosts.attachBehaviour('timestampable');\n```\n\n## Extensions\n\nDon't be afraid to extend your collection, especially when you need something that is specific to the collection. For example, you have the `_id` of an user,\nand you want to quickly get the email:\n\n```js\n// file: /imports/db/users/extensions.js\n\nexport default {\n    getEmailForUserId(userId) {\n        const user = this.findOne(userId, {\n            fields: {emails: 1}\n        });\n        \n        if (!user) {\n            throw new Meteor.Error('not-found');\n        }\n        \n        return user.emails[0].address;\n    }\n}\n```\n\n```js\n// file: /imports/db/users/collection.js\nimport UsersExtension from './extensions';\n\n// ...\n_.extend(Users, UsersExtension);\n// ...\n```\n\n## Helpers\n\nWith the use of this package: https://github.com/dburles/meteor-collection-helpers you can make your documents smarter if they are fetched through your collections directly.\n```js\n// file: /imports/db/users/helpers.js\n\nexport default {\n    getEmail(userId) {\n        return this.emails[0].address;\n    }\n}\n```\n\n```js\n// file: /imports/db/users/collection.js\nimport UsersHelpers from './helpers';\n\n// ...\nUsers.helpers(UsersHelpers);\n// ...\n```\n\nThis will allow you to easily do:\n\n```js\nUsers.findOne(userId).getEmail()\n```\n\nIf you return them from a method call, you won't benefit from helpers. But what you can do is map it to the transform function on the client.\n```js\n// server\nMeteor.methods({\n    \"users.findAll\"() { \n        // returns an array of objects and strips out all the additional functionality\n        return Users.find().fetch(); \n    }\n})\n\n// client\nMeteor.call('users.findAll', function (err, res) {\n    const users = res.map(Users._transform);\n    // users[0].getEmail() will now work\n})\n```\n\n## Shortcuts\n \nCreate an index for your collections:\n\n```js\n// file: /imports/db/index.js\n\nimport Posts from './posts/collection';\nimport Comments from './comments/collection';\n\nexport {\n    Posts,\n    Comments\n}\n```\n\nThis will allow you to use it like this:\n\n```js\nimport {Posts, Comments} from '/imports/db';\n```\n\nYou can go ahead and even put enums inside index.js, but be very careful with their naming,\nas they need to be specific: `${collection}${enumName}Enum`, example:\n- TaskStatusEnum\n- PostTagsEnum \n- etc\n\n## Relations (Grapher)\n\nHow do we work with relations in a non-relational database? We use [Grapher](http://grapher.cultofcoders.com), ofcourse.\nAnd even if we don't have relations, we still should use [Grapher](http://grapher.cultofcoders.com) because of the way it works, as you will see below:\n\nHere's how simple it is:\n\n```bash\nmeteor add cultofcoders:grapher\n```\n\n```\n// file: /imports/db/posts/links.js\nimport {Posts, Users} from '/imports/db';\n\nPosts.addLinks({\n    author: {\n        type: 'one',\n        collection: Users,\n        field: 'authorId'\n    }\n})\n```\n\nWe need those links loaded, so aggregate all links importing into a single file. \nImport this file (`/imports/db/links`) in the `client` and `server` init scripts so they are loaded.\n\n```js\n// file: /imports/db/links.js\nimport './posts/links.js';\n```\n\nAnd when you want to get the post alongside with the user's profile for example:\n\n```js\nconst post = Posts.createQuery({\n    $filters: {\n        _id: postId,\n    },\n    title: 1,\n    author: {\n        profile: 1,\n    }\n}).fetchOne((err, post) => {\n    console.log(post.user.profile.firstName);\n});\n```\n\n[Grapher](http://grapher.cultofcoders.com) is a very complex tool and it can work with queries client-side as well. You can have reactive queries, there's simply a lot related to it,\nbut it's properly documented here: http://grapher.cultofcoders.com. \n\nBegin with the Guide, and patiently read through it. Once you read the guide you can understand the following patterns:\n\n### Creating a simple query\n\nThe recommended way of working with [Grapher](http://grapher.cultofcoders.com) is by working exclusively with NamedQueries.\nIf you would like to store and expose NamedQueries:\n\n```js\n// file: /imports/db/posts/queries/getPost.js\nimport Posts from '../collection';\n\nexport default Posts.createQuery('getPost', {\n    $filter({filters, params}) {\n        filters._id = params.postId;\n    },\n    title: 1,\n    user: {\n        profile: 1,\n    }\n});\n```\n\nDon't be afraid to create shortcuts for all your queries in one place:\n```js\n// file: /imports/db/queries.js\nimport getPost from './posts/queries/getPost',\n\nexport {\n    getPost\n}\n```\n\nNow that we created the query, we need to expose and secure it:\n\n```js\n// file: /imports/api/posts/queries/getPost.expose.js\n// if you don't expose it you can't work with it\nimport {getPost} from '/imports/db/queries'\n\ngetPost.expose({\n    firewall(userId, params) {\n        // you can manipulate params object here\n        if (isAllowed(userId)) {\n            // you can throw exceptions if he's not allowed access to this query\n        }\n        // the firewall can either: throw exception or modify params\n    }\n})\n```\n\nAggregate it in one file and import this file on server-side only.\n```js\n// file: /imports/api/exposures.js\nimport './posts/queries/getPost.expose.js';\n```\n\nNow from the client you can easily do something like:\n```js\n// barbaric (but it's also nice)\ncreateQuery({\n    getPost: {\n        postId: 'XXX'\n    }\n}).fetchOne((err, post) => {\n    console.log(post);\n    // you will also have access to post.users.name\n})\n\n// modular\nimport {getPost} from '/imports/db/queries'\n\ngetPost.clone({\n    postId: 'XXX'\n}).fetchOne((err, post) => { ... })\n```\n\nBy abstracting the data retrieval layer to [Grapher](http://grapher.cultofcoders.com) and allowing it to do the linking of collections for you, you will find yourself with so much less headache.\nBecause [Grapher](http://grapher.cultofcoders.com) forces you to specify only the fields you need, you will find your apps running fast and secure right from the start.\n\n### Separating concerns\n\nYou may feel that having your query in `/imports/db` and your exposure inside `/imports/api` to be a little odd. \nThis is why you can put your query inside `/imports/api` as well. But the reason for not putting exposure inside `/imports/db` is\nbecause it contains `App Logic`, and that layer it should be independent from the `Persistance Layer`\n\n\n\n\n\n","date":"2019-10-10T08:52:10.652Z","updated":"2019-10-10T08:52:10.652Z","path":"chapters/3/persistence-layer.html","_id":"cj8zpybmo000fqmu5aifbnwu2","comments":1,"layout":"page","content":"<h2 id=\"What-is-it\"><a href=\"#What-is-it\" class=\"headerlink\" title=\"What is it ?\"></a>What is it ?</h2><p>The Persistence Layer (PL) is that “thingie” in your app that communicates with another API to store the data we want.\nIn our case, we communicate with MongoDB for that. Therefore, an instance of <code>Mongo.Collection</code> is our API to communicate with the Persistence Layer, therefore in our app we can regard collections as the PL.</p>\n<p>What if at some point in the future, you decide that a certain\ncollection should not be kept in MongoDB but rather used via an external HTTP API? </p>\n<p>Your code architecture should try to be as independent as possible from the PL, because this opens the path for scaling and decoupling later on.</p>\n<p>Just try and think this way, and whenever you want to start a new project: disregard the way you are going to store the data, focus more on the app/business logic layer.</p>\n<p>Then build your database on top of it.</p>\n<h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><p>Since we want to explicitly separate it, I propose that instead of storing collections inside <code>/imports/api</code>, we give them their own folder <code>/imports/db</code></p>\n<p><code>/imports/api/posts/collection.js</code> -&gt; <code>/imports/db/posts/collection.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Mongo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</span><br></pre></td></tr></table></figure>\n<p>Now let’s assume you have a new collection for comments on posts, and it’s used only for posts. What do we do ?</p>\n<p>Should we store it in <code>/imports/db/posts/comments/collection.js</code> or in <code>/imports/db/postComments/collection.js</code> ?</p>\n<p>It’s a matter of preference here. I prefer the first approach, but the collection’s name I use is <code>PostComments</code> not <code>Comments</code>, so\nwe know it’s context. But this only applies if my collection is coupled in a way to posts, if not, then go with second approach.</p>\n<h2 id=\"Validating-Documents\"><a href=\"#Validating-Documents\" class=\"headerlink\" title=\"Validating Documents\"></a>Validating Documents</h2><p>We need to be able to validate easily the data we save in a collection to prevent bad things from happening.</p>\n<p>For this we are going to use <a href=\"https://github.com/aldeed/meteor-collection2-core\" target=\"_blank\" rel=\"noopener\"><code>aldeed:collection2-core</code></a> and <a href=\"https://www.npmjs.com/package/simpl-schema\" target=\"_blank\" rel=\"noopener\"><code>SimpleSchema</code></a></p>\n<p>Read more about it here: <a href=\"https://github.com/aldeed/meteor-collection2-core\" target=\"_blank\" rel=\"noopener\">https://github.com/aldeed/meteor-collection2-core</a> then come back!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add aldeed:collection2-core</span><br><span class=\"line\">meteor npm i -S simpl-schema</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a schema for our <code>Post</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tags: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'tags.$'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isApproved: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    userId: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Now let’s attach it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Mongo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostSchema <span class=\"keyword\">from</span> <span class=\"string\">'./schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Posts.attachSchema(PostSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</span><br></pre></td></tr></table></figure></p>\n<p>Nice! This structure works fine. This will never allow you to insert or update a document without validating it properly.</p>\n<p>Beautiful, but now we see those “tags” in there, and we know from our previous chapter, that we need a way to re-use them properly,\nthis is why we introduce here to concept of Enums.</p>\n<h2 id=\"Enums\"><a href=\"#Enums\" class=\"headerlink\" title=\"Enums\"></a>Enums</h2><p>An Enum is a set of constants, and they should be in their own module. Let’s try an example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/enums/tags.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> PostTagsEnum = &#123;</span><br><span class=\"line\">    PSYCHOLOGY: <span class=\"string\">'psychology'</span>, </span><br><span class=\"line\">    PHILOSOPHY: <span class=\"string\">'philosophy'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maybe you want to have them used as human readable </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PostTagsLabels = &#123;</span><br><span class=\"line\">    [PostTagsEnum.PSYCHOLOGY]: <span class=\"string\">'Psychology &amp; Education'</span>,</span><br><span class=\"line\">    [PostTagsEnum.PHILOSOPHY]: <span class=\"string\">'Philosophy &amp; Arts'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PostTagsEnum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    PostTagsEnum,</span><br><span class=\"line\">    PostTagsLabels,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The value of the enum, represents how you internally want to store it. Does not represent how you want to display it. Keep that in mind.</p>\n<p>And if we go back to our schema it can look something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'underscore'</span>; <span class=\"comment\">// don't forget to do meteor npm i -S underscore</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostTagsEnum <span class=\"keyword\">from</span> <span class=\"string\">'./enums/tags'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">'tags.$'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        allowedValues: _.values(PostTagsEnum) <span class=\"comment\">// this returns ['psychology', 'philosophy']</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Another quick example to ilustrate their purpose, imagine a status of a Task:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /imports/db/tasks/enums/status.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    ACTIVE: <span class=\"string\">'active'</span>,</span><br><span class=\"line\">    PENDING: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">    COMPLETED: <span class=\"string\">'completed'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The rule using enums is that when you are dealing with them, you must never use the string/value itself.</p>\n<p>In your code, client or server, when you have to see if a status is active:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// VERY BAD</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (object.status === <span class=\"string\">'active'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ObjectStatusEnum <span class=\"keyword\">from</span> <span class=\"string\">'...'</span>;</span><br><span class=\"line\"><span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (object.status === ObjectStatusEnum.ACTIVE) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Keep in mind that you can use Enums anywhere, not only for storing stuff in your db. Whenever you find there’s a list of constants needed,\nyou are looking at an enum. And ofcourse you can use them client-side or server-side.</p>\n<h2 id=\"Meteor-users\"><a href=\"#Meteor-users\" class=\"headerlink\" title=\"Meteor.users\"></a>Meteor.users</h2><p>This collection feels like it is from another world, it’s best that we standardize it as well, and also\ngive it a schema:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserSchema <span class=\"keyword\">from</span> <span class=\"string\">'./schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Users = Meteor.users;</span><br><span class=\"line\"></span><br><span class=\"line\">Users.attachSchema(UserSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Users;</span><br></pre></td></tr></table></figure>\n<p>A sample schema that works with Accounts configuration:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    _id: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">    username: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">optional</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    emails: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Array</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'emails.$'</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'emails.$.address'</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'emails.$.verified'</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Boolean</span>&#125;,</span><br><span class=\"line\">    createdAt: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Date</span>&#125;,</span><br><span class=\"line\">    services: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>, <span class=\"attr\">blackbox</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    roles: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"roles.$\"</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    profile: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'profile.firstName'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'profile.lastName'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>And don’t forget about this nice package: <a href=\"https://github.com/alanning/meteor-roles\" target=\"_blank\" rel=\"noopener\">https://github.com/alanning/meteor-roles</a>. Allows you to nicely manage roles in the system.</p>\n<h2 id=\"Hooks\"><a href=\"#Hooks\" class=\"headerlink\" title=\"Hooks\"></a>Hooks</h2><p>You may want to do something after an element is removed or updated or inserted from a certain collection.</p>\n<p>The almost official way to do this is by using this awesome package: <a href=\"https://atmospherejs.com/matb33/collection-hooks\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/matb33/collection-hooks</a></p>\n<p>Give it a read, you’ll love it.</p>\n<p>My recommendation here is to dispatch an event on a given hook (<a href=\"&quot;/chapters/3/events.html&quot;\">event handling will be described a bit later</a>), and store the hooks inside <code>/imports/db/{collection}/hooks.js</code>,\nand the logic for handling the hooks should be inside <code>/imports/api</code></p>\n<h2 id=\"Behaviours\"><a href=\"#Behaviours\" class=\"headerlink\" title=\"Behaviours\"></a>Behaviours</h2><p>Most likely, your collections will store the user who created something, or store things like when it was created, or when it was updated.</p>\n<p>So instead of creating hooks for every collection, it’s easier to define a behaviour and re-use it.</p>\n<p>Please read about it:\n<a href=\"https://github.com/zimme/meteor-collection-behaviours/\" target=\"_blank\" rel=\"noopener\">https://github.com/zimme/meteor-collection-behaviours/</a></p>\n<p>I think it’s fine to just attachBehaviours where you store the collection:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/collection.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Posts.attachBehaviour(<span class=\"string\">'timestampable'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Extensions\"><a href=\"#Extensions\" class=\"headerlink\" title=\"Extensions\"></a>Extensions</h2><p>Don’t be afraid to extend your collection, especially when you need something that is specific to the collection. For example, you have the <code>_id</code> of an user,\nand you want to quickly get the email:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/extensions.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    getEmailForUserId(userId) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.findOne(userId, &#123;</span><br><span class=\"line\">            fields: &#123;<span class=\"attr\">emails</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!user) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.emails[<span class=\"number\">0</span>].address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UsersExtension <span class=\"keyword\">from</span> <span class=\"string\">'./extensions'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">_.extend(Users, UsersExtension);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Helpers\"><a href=\"#Helpers\" class=\"headerlink\" title=\"Helpers\"></a>Helpers</h2><p>With the use of this package: <a href=\"https://github.com/dburles/meteor-collection-helpers\" target=\"_blank\" rel=\"noopener\">https://github.com/dburles/meteor-collection-helpers</a> you can make your documents smarter if they are fetched through your collections directly.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/helpers.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    getEmail(userId) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.emails[<span class=\"number\">0</span>].address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UsersHelpers <span class=\"keyword\">from</span> <span class=\"string\">'./helpers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Users.helpers(UsersHelpers);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>This will allow you to easily do:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Users.findOne(userId).getEmail()</span><br></pre></td></tr></table></figure>\n<p>If you return them from a method call, you won’t benefit from helpers. But what you can do is map it to the transform function on the client.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server</span></span><br><span class=\"line\">Meteor.methods(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"users.findAll\"</span>() &#123; </span><br><span class=\"line\">        <span class=\"comment\">// returns an array of objects and strips out all the additional functionality</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Users.find().fetch(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// client</span></span><br><span class=\"line\">Meteor.call(<span class=\"string\">'users.findAll'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> users = res.map(Users._transform);</span><br><span class=\"line\">    <span class=\"comment\">// users[0].getEmail() will now work</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Shortcuts\"><a href=\"#Shortcuts\" class=\"headerlink\" title=\"Shortcuts\"></a>Shortcuts</h2><p>Create an index for your collections:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'./posts/collection'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Comments <span class=\"keyword\">from</span> <span class=\"string\">'./comments/collection'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    Posts,</span><br><span class=\"line\">    Comments</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will allow you to use it like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Posts, Comments&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</span><br></pre></td></tr></table></figure>\n<p>You can go ahead and even put enums inside index.js, but be very careful with their naming,\nas they need to be specific: <code>${collection}${enumName}Enum</code>, example:</p>\n<ul>\n<li>TaskStatusEnum</li>\n<li>PostTagsEnum </li>\n<li>etc</li>\n</ul>\n<h2 id=\"Relations-Grapher\"><a href=\"#Relations-Grapher\" class=\"headerlink\" title=\"Relations (Grapher)\"></a>Relations (Grapher)</h2><p>How do we work with relations in a non-relational database? We use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a>, ofcourse.\nAnd even if we don’t have relations, we still should use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> because of the way it works, as you will see below:</p>\n<p>Here’s how simple it is:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add cultofcoders:grapher</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Posts, Users&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Posts.addLinks(&#123;</span><br><span class=\"line\">    author: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">type</span>: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">        collection: Users,</span><br><span class=\"line\">        field: <span class=\"string\">'authorId'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We need those links loaded, so aggregate all links importing into a single file. \nImport this file (<code>/imports/db/links</code>) in the <code>client</code> and <code>server</code> init scripts so they are loaded.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/links.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>And when you want to get the post alongside with the user’s profile for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> post = Posts.createQuery(&#123;</span><br><span class=\"line\">    $filters: &#123;</span><br><span class=\"line\">        _id: postId,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    title: <span class=\"number\">1</span>,</span><br><span class=\"line\">    author: &#123;</span><br><span class=\"line\">        profile: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).fetchOne(<span class=\"function\">(<span class=\"params\">err, post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(post.user.profile.firstName);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> is a very complex tool and it can work with queries client-side as well. You can have reactive queries, there’s simply a lot related to it,\nbut it’s properly documented here: <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">http://grapher.cultofcoders.com</a>. </p>\n<p>Begin with the Guide, and patiently read through it. Once you read the guide you can understand the following patterns:</p>\n<h3 id=\"Creating-a-simple-query\"><a href=\"#Creating-a-simple-query\" class=\"headerlink\" title=\"Creating a simple query\"></a>Creating a simple query</h3><p>The recommended way of working with <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> is by working exclusively with NamedQueries.\nIf you would like to store and expose NamedQueries:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/queries/getPost.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'../collection'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts.createQuery(<span class=\"string\">'getPost'</span>, &#123;</span><br><span class=\"line\">    $filter(&#123;filters, params&#125;) &#123;</span><br><span class=\"line\">        filters._id = params.postId;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    title: <span class=\"number\">1</span>,</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        profile: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Don’t be afraid to create shortcuts for all your queries in one place:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/queries.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> getPost <span class=\"keyword\">from</span> <span class=\"string\">'./posts/queries/getPost'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    getPost</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Now that we created the query, we need to expose and secure it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/api/posts/queries/getPost.expose.js</span></span><br><span class=\"line\"><span class=\"comment\">// if you don't expose it you can't work with it</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;getPost&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/queries'</span></span><br><span class=\"line\"></span><br><span class=\"line\">getPost.expose(&#123;</span><br><span class=\"line\">    firewall(userId, params) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// you can manipulate params object here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAllowed(userId)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// you can throw exceptions if he's not allowed access to this query</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// the firewall can either: throw exception or modify params</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Aggregate it in one file and import this file on server-side only.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/api/exposures.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/queries/getPost.expose.js'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>Now from the client you can easily do something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// barbaric (but it's also nice)</span></span><br><span class=\"line\">createQuery(&#123;</span><br><span class=\"line\">    getPost: &#123;</span><br><span class=\"line\">        postId: <span class=\"string\">'XXX'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).fetchOne(<span class=\"function\">(<span class=\"params\">err, post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(post);</span><br><span class=\"line\">    <span class=\"comment\">// you will also have access to post.users.name</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// modular</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;getPost&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/queries'</span></span><br><span class=\"line\"></span><br><span class=\"line\">getPost.clone(&#123;</span><br><span class=\"line\">    postId: <span class=\"string\">'XXX'</span></span><br><span class=\"line\">&#125;).fetchOne(<span class=\"function\">(<span class=\"params\">err, post</span>) =&gt;</span> &#123; ... &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>By abstracting the data retrieval layer to <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> and allowing it to do the linking of collections for you, you will find yourself with so much less headache.\nBecause <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> forces you to specify only the fields you need, you will find your apps running fast and secure right from the start.</p>\n<h3 id=\"Separating-concerns\"><a href=\"#Separating-concerns\" class=\"headerlink\" title=\"Separating concerns\"></a>Separating concerns</h3><p>You may feel that having your query in <code>/imports/db</code> and your exposure inside <code>/imports/api</code> to be a little odd. \nThis is why you can put your query inside <code>/imports/api</code> as well. But the reason for not putting exposure inside <code>/imports/db</code> is\nbecause it contains <code>App Logic</code>, and that layer it should be independent from the <code>Persistance Layer</code></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"What-is-it\"><a href=\"#What-is-it\" class=\"headerlink\" title=\"What is it ?\"></a>What is it ?</h2><p>The Persistence Layer (PL) is that “thingie” in your app that communicates with another API to store the data we want.\nIn our case, we communicate with MongoDB for that. Therefore, an instance of <code>Mongo.Collection</code> is our API to communicate with the Persistence Layer, therefore in our app we can regard collections as the PL.</p>\n<p>What if at some point in the future, you decide that a certain\ncollection should not be kept in MongoDB but rather used via an external HTTP API? </p>\n<p>Your code architecture should try to be as independent as possible from the PL, because this opens the path for scaling and decoupling later on.</p>\n<p>Just try and think this way, and whenever you want to start a new project: disregard the way you are going to store the data, focus more on the app/business logic layer.</p>\n<p>Then build your database on top of it.</p>\n<h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><p>Since we want to explicitly separate it, I propose that instead of storing collections inside <code>/imports/api</code>, we give them their own folder <code>/imports/db</code></p>\n<p><code>/imports/api/posts/collection.js</code> -&gt; <code>/imports/db/posts/collection.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Mongo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</span><br></pre></td></tr></table></figure>\n<p>Now let’s assume you have a new collection for comments on posts, and it’s used only for posts. What do we do ?</p>\n<p>Should we store it in <code>/imports/db/posts/comments/collection.js</code> or in <code>/imports/db/postComments/collection.js</code> ?</p>\n<p>It’s a matter of preference here. I prefer the first approach, but the collection’s name I use is <code>PostComments</code> not <code>Comments</code>, so\nwe know it’s context. But this only applies if my collection is coupled in a way to posts, if not, then go with second approach.</p>\n<h2 id=\"Validating-Documents\"><a href=\"#Validating-Documents\" class=\"headerlink\" title=\"Validating Documents\"></a>Validating Documents</h2><p>We need to be able to validate easily the data we save in a collection to prevent bad things from happening.</p>\n<p>For this we are going to use <a href=\"https://github.com/aldeed/meteor-collection2-core\" target=\"_blank\" rel=\"noopener\"><code>aldeed:collection2-core</code></a> and <a href=\"https://www.npmjs.com/package/simpl-schema\" target=\"_blank\" rel=\"noopener\"><code>SimpleSchema</code></a></p>\n<p>Read more about it here: <a href=\"https://github.com/aldeed/meteor-collection2-core\" target=\"_blank\" rel=\"noopener\">https://github.com/aldeed/meteor-collection2-core</a> then come back!</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add aldeed:collection2-core</span><br><span class=\"line\">meteor npm i -S simpl-schema</span><br></pre></td></tr></table></figure>\n<p>Now let’s create a schema for our <code>Post</code>:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    title: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    tags: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'tags.$'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    isApproved: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Boolean</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    userId: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Now let’s attach it:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Mongo&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/mongo'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostSchema <span class=\"keyword\">from</span> <span class=\"string\">'./schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Posts = <span class=\"keyword\">new</span> Mongo.Collection(<span class=\"string\">'posts'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">Posts.attachSchema(PostSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts;</span><br></pre></td></tr></table></figure></p>\n<p>Nice! This structure works fine. This will never allow you to insert or update a document without validating it properly.</p>\n<p>Beautiful, but now we see those “tags” in there, and we know from our previous chapter, that we need a way to re-use them properly,\nthis is why we introduce here to concept of Enums.</p>\n<h2 id=\"Enums\"><a href=\"#Enums\" class=\"headerlink\" title=\"Enums\"></a>Enums</h2><p>An Enum is a set of constants, and they should be in their own module. Let’s try an example</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/enums/tags.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> PostTagsEnum = &#123;</span><br><span class=\"line\">    PSYCHOLOGY: <span class=\"string\">'psychology'</span>, </span><br><span class=\"line\">    PHILOSOPHY: <span class=\"string\">'philosophy'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// maybe you want to have them used as human readable </span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PostTagsLabels = &#123;</span><br><span class=\"line\">    [PostTagsEnum.PSYCHOLOGY]: <span class=\"string\">'Psychology &amp; Education'</span>,</span><br><span class=\"line\">    [PostTagsEnum.PHILOSOPHY]: <span class=\"string\">'Philosophy &amp; Arts'</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> PostTagsEnum;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    PostTagsEnum,</span><br><span class=\"line\">    PostTagsLabels,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The value of the enum, represents how you internally want to store it. Does not represent how you want to display it. Keep that in mind.</p>\n<p>And if we go back to our schema it can look something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"keyword\">from</span> <span class=\"string\">'underscore'</span>; <span class=\"comment\">// don't forget to do meteor npm i -S underscore</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> PostTagsEnum <span class=\"keyword\">from</span> <span class=\"string\">'./enums/tags'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    <span class=\"string\">'tags.$'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        allowedValues: _.values(PostTagsEnum) <span class=\"comment\">// this returns ['psychology', 'philosophy']</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<p>Another quick example to ilustrate their purpose, imagine a status of a Task:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// /imports/db/tasks/enums/status.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    ACTIVE: <span class=\"string\">'active'</span>,</span><br><span class=\"line\">    PENDING: <span class=\"string\">'pending'</span>,</span><br><span class=\"line\">    COMPLETED: <span class=\"string\">'completed'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>The rule using enums is that when you are dealing with them, you must never use the string/value itself.</p>\n<p>In your code, client or server, when you have to see if a status is active:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// VERY BAD</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (object.status === <span class=\"string\">'active'</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> ObjectStatusEnum <span class=\"keyword\">from</span> <span class=\"string\">'...'</span>;</span><br><span class=\"line\"><span class=\"comment\">// OK</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (object.status === ObjectStatusEnum.ACTIVE) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Keep in mind that you can use Enums anywhere, not only for storing stuff in your db. Whenever you find there’s a list of constants needed,\nyou are looking at an enum. And ofcourse you can use them client-side or server-side.</p>\n<h2 id=\"Meteor-users\"><a href=\"#Meteor-users\" class=\"headerlink\" title=\"Meteor.users\"></a>Meteor.users</h2><p>This collection feels like it is from another world, it’s best that we standardize it as well, and also\ngive it a schema:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Meteor&#125; <span class=\"keyword\">from</span> <span class=\"string\">'meteor/meteor'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> UserSchema <span class=\"keyword\">from</span> <span class=\"string\">'./schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Users = Meteor.users;</span><br><span class=\"line\"></span><br><span class=\"line\">Users.attachSchema(UserSchema);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Users;</span><br></pre></td></tr></table></figure>\n<p>A sample schema that works with Accounts configuration:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/schema.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> SimpleSchema <span class=\"keyword\">from</span> <span class=\"string\">'simpl-schema'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"keyword\">new</span> SimpleSchema(&#123;</span><br><span class=\"line\">    _id: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">    username: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>, <span class=\"attr\">optional</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    emails: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Array</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'emails.$'</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'emails.$.address'</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">String</span>&#125;,</span><br><span class=\"line\">    <span class=\"string\">'emails.$.verified'</span>: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Boolean</span>&#125;,</span><br><span class=\"line\">    createdAt: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Date</span>&#125;,</span><br><span class=\"line\">    services: &#123;<span class=\"attr\">type</span>: <span class=\"built_in\">Object</span>, <span class=\"attr\">blackbox</span>: <span class=\"literal\">true</span>&#125;,</span><br><span class=\"line\">    roles: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Array</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">\"roles.$\"</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    profile: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">Object</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'profile.firstName'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"string\">'profile.lastName'</span>: &#123;</span><br><span class=\"line\">        type: <span class=\"built_in\">String</span>,</span><br><span class=\"line\">        optional: <span class=\"literal\">true</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n<p>And don’t forget about this nice package: <a href=\"https://github.com/alanning/meteor-roles\" target=\"_blank\" rel=\"noopener\">https://github.com/alanning/meteor-roles</a>. Allows you to nicely manage roles in the system.</p>\n<h2 id=\"Hooks\"><a href=\"#Hooks\" class=\"headerlink\" title=\"Hooks\"></a>Hooks</h2><p>You may want to do something after an element is removed or updated or inserted from a certain collection.</p>\n<p>The almost official way to do this is by using this awesome package: <a href=\"https://atmospherejs.com/matb33/collection-hooks\" target=\"_blank\" rel=\"noopener\">https://atmospherejs.com/matb33/collection-hooks</a></p>\n<p>Give it a read, you’ll love it.</p>\n<p>My recommendation here is to dispatch an event on a given hook (<a href=\"&quot;/chapters/3/events.html&quot;\">event handling will be described a bit later</a>), and store the hooks inside <code>/imports/db/{collection}/hooks.js</code>,\nand the logic for handling the hooks should be inside <code>/imports/api</code></p>\n<h2 id=\"Behaviours\"><a href=\"#Behaviours\" class=\"headerlink\" title=\"Behaviours\"></a>Behaviours</h2><p>Most likely, your collections will store the user who created something, or store things like when it was created, or when it was updated.</p>\n<p>So instead of creating hooks for every collection, it’s easier to define a behaviour and re-use it.</p>\n<p>Please read about it:\n<a href=\"https://github.com/zimme/meteor-collection-behaviours/\" target=\"_blank\" rel=\"noopener\">https://github.com/zimme/meteor-collection-behaviours/</a></p>\n<p>I think it’s fine to just attachBehaviours where you store the collection:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/collection.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Posts.attachBehaviour(<span class=\"string\">'timestampable'</span>);</span><br></pre></td></tr></table></figure>\n<h2 id=\"Extensions\"><a href=\"#Extensions\" class=\"headerlink\" title=\"Extensions\"></a>Extensions</h2><p>Don’t be afraid to extend your collection, especially when you need something that is specific to the collection. For example, you have the <code>_id</code> of an user,\nand you want to quickly get the email:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/extensions.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    getEmailForUserId(userId) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> user = <span class=\"keyword\">this</span>.findOne(userId, &#123;</span><br><span class=\"line\">            fields: &#123;<span class=\"attr\">emails</span>: <span class=\"number\">1</span>&#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!user) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Meteor.Error(<span class=\"string\">'not-found'</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">return</span> user.emails[<span class=\"number\">0</span>].address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UsersExtension <span class=\"keyword\">from</span> <span class=\"string\">'./extensions'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">_.extend(Users, UsersExtension);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"Helpers\"><a href=\"#Helpers\" class=\"headerlink\" title=\"Helpers\"></a>Helpers</h2><p>With the use of this package: <a href=\"https://github.com/dburles/meteor-collection-helpers\" target=\"_blank\" rel=\"noopener\">https://github.com/dburles/meteor-collection-helpers</a> you can make your documents smarter if they are fetched through your collections directly.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/helpers.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">    getEmail(userId) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.emails[<span class=\"number\">0</span>].address;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/users/collection.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> UsersHelpers <span class=\"keyword\">from</span> <span class=\"string\">'./helpers'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\">Users.helpers(UsersHelpers);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n<p>This will allow you to easily do:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Users.findOne(userId).getEmail()</span><br></pre></td></tr></table></figure>\n<p>If you return them from a method call, you won’t benefit from helpers. But what you can do is map it to the transform function on the client.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// server</span></span><br><span class=\"line\">Meteor.methods(&#123;</span><br><span class=\"line\">    <span class=\"string\">\"users.findAll\"</span>() &#123; </span><br><span class=\"line\">        <span class=\"comment\">// returns an array of objects and strips out all the additional functionality</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> Users.find().fetch(); </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// client</span></span><br><span class=\"line\">Meteor.call(<span class=\"string\">'users.findAll'</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> users = res.map(Users._transform);</span><br><span class=\"line\">    <span class=\"comment\">// users[0].getEmail() will now work</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"Shortcuts\"><a href=\"#Shortcuts\" class=\"headerlink\" title=\"Shortcuts\"></a>Shortcuts</h2><p>Create an index for your collections:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/index.js</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'./posts/collection'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Comments <span class=\"keyword\">from</span> <span class=\"string\">'./comments/collection'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    Posts,</span><br><span class=\"line\">    Comments</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This will allow you to use it like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;Posts, Comments&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</span><br></pre></td></tr></table></figure>\n<p>You can go ahead and even put enums inside index.js, but be very careful with their naming,\nas they need to be specific: <code>${collection}${enumName}Enum</code>, example:</p>\n<ul>\n<li>TaskStatusEnum</li>\n<li>PostTagsEnum </li>\n<li>etc</li>\n</ul>\n<h2 id=\"Relations-Grapher\"><a href=\"#Relations-Grapher\" class=\"headerlink\" title=\"Relations (Grapher)\"></a>Relations (Grapher)</h2><p>How do we work with relations in a non-relational database? We use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a>, ofcourse.\nAnd even if we don’t have relations, we still should use <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> because of the way it works, as you will see below:</p>\n<p>Here’s how simple it is:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor add cultofcoders:grapher</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;Posts, Users&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">Posts.addLinks(&#123;</span><br><span class=\"line\">    author: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">type</span>: <span class=\"string\">'one'</span>,</span><br><span class=\"line\">        collection: Users,</span><br><span class=\"line\">        field: <span class=\"string\">'authorId'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>We need those links loaded, so aggregate all links importing into a single file. \nImport this file (<code>/imports/db/links</code>) in the <code>client</code> and <code>server</code> init scripts so they are loaded.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/links.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/links.js'</span>;</span><br></pre></td></tr></table></figure>\n<p>And when you want to get the post alongside with the user’s profile for example:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> post = Posts.createQuery(&#123;</span><br><span class=\"line\">    $filters: &#123;</span><br><span class=\"line\">        _id: postId,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    title: <span class=\"number\">1</span>,</span><br><span class=\"line\">    author: &#123;</span><br><span class=\"line\">        profile: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).fetchOne(<span class=\"function\">(<span class=\"params\">err, post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(post.user.profile.firstName);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> is a very complex tool and it can work with queries client-side as well. You can have reactive queries, there’s simply a lot related to it,\nbut it’s properly documented here: <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">http://grapher.cultofcoders.com</a>. </p>\n<p>Begin with the Guide, and patiently read through it. Once you read the guide you can understand the following patterns:</p>\n<h3 id=\"Creating-a-simple-query\"><a href=\"#Creating-a-simple-query\" class=\"headerlink\" title=\"Creating a simple query\"></a>Creating a simple query</h3><p>The recommended way of working with <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> is by working exclusively with NamedQueries.\nIf you would like to store and expose NamedQueries:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/posts/queries/getPost.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Posts <span class=\"keyword\">from</span> <span class=\"string\">'../collection'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts.createQuery(<span class=\"string\">'getPost'</span>, &#123;</span><br><span class=\"line\">    $filter(&#123;filters, params&#125;) &#123;</span><br><span class=\"line\">        filters._id = params.postId;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    title: <span class=\"number\">1</span>,</span><br><span class=\"line\">    user: &#123;</span><br><span class=\"line\">        profile: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>Don’t be afraid to create shortcuts for all your queries in one place:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/db/queries.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> getPost <span class=\"keyword\">from</span> <span class=\"string\">'./posts/queries/getPost'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;</span><br><span class=\"line\">    getPost</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>Now that we created the query, we need to expose and secure it:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/api/posts/queries/getPost.expose.js</span></span><br><span class=\"line\"><span class=\"comment\">// if you don't expose it you can't work with it</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;getPost&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/queries'</span></span><br><span class=\"line\"></span><br><span class=\"line\">getPost.expose(&#123;</span><br><span class=\"line\">    firewall(userId, params) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// you can manipulate params object here</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isAllowed(userId)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// you can throw exceptions if he's not allowed access to this query</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// the firewall can either: throw exception or modify params</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>Aggregate it in one file and import this file on server-side only.\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// file: /imports/api/exposures.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">'./posts/queries/getPost.expose.js'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>Now from the client you can easily do something like:\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// barbaric (but it's also nice)</span></span><br><span class=\"line\">createQuery(&#123;</span><br><span class=\"line\">    getPost: &#123;</span><br><span class=\"line\">        postId: <span class=\"string\">'XXX'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;).fetchOne(<span class=\"function\">(<span class=\"params\">err, post</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(post);</span><br><span class=\"line\">    <span class=\"comment\">// you will also have access to post.users.name</span></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// modular</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;getPost&#125; <span class=\"keyword\">from</span> <span class=\"string\">'/imports/db/queries'</span></span><br><span class=\"line\"></span><br><span class=\"line\">getPost.clone(&#123;</span><br><span class=\"line\">    postId: <span class=\"string\">'XXX'</span></span><br><span class=\"line\">&#125;).fetchOne(<span class=\"function\">(<span class=\"params\">err, post</span>) =&gt;</span> &#123; ... &#125;)</span><br></pre></td></tr></table></figure></p>\n<p>By abstracting the data retrieval layer to <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> and allowing it to do the linking of collections for you, you will find yourself with so much less headache.\nBecause <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"noopener\">Grapher</a> forces you to specify only the fields you need, you will find your apps running fast and secure right from the start.</p>\n<h3 id=\"Separating-concerns\"><a href=\"#Separating-concerns\" class=\"headerlink\" title=\"Separating concerns\"></a>Separating concerns</h3><p>You may feel that having your query in <code>/imports/db</code> and your exposure inside <code>/imports/api</code> to be a little odd. \nThis is why you can put your query inside <code>/imports/api</code> as well. But the reason for not putting exposure inside <code>/imports/db</code> is\nbecause it contains <code>App Logic</code>, and that layer it should be independent from the <code>Persistance Layer</code></p>\n"},{"title":"Fixtures","description":"Generate dummy data.","disqusPage":"Chapter 3: Fixtures","_content":"\n## Why?\n\nThe reason for writing fixtures is that once you setup your project, you fill it with relevant data, like users of different types and roles, posts, items, comments, whatever.\n\nThis removes the reason of having a shared database, and it makes onboarding new developers so easy.\n\n## Structure\n\nWe will store our fixtures inside `/imports/fixtures` because this way you will not forget about them. They are an essential part of development.\n\n```js\n// file: /imports/fixtures/index.js\nimport createUsers from './createUsers';\nimport createPostsForUsers from './createPostsForUsers';\n\nconst runFixtures = function () {\n    const shouldRun = Meteor.users.find().count() == 0;\n    \n    if (shouldRun) {\n        createUsers();\n        createPostsForUsers();\n    }\n}\n\nif (!Meteor.isDevelopment) {\n    runFixtures();\n}\n```\n\nKeep a configuration so you can use it for load testing later on:\n\n```js\n// file: /imports/fixtures/config.js\nexport default {\n    USERS_COUNT: 10,\n    POSTS_PER_USER: 2,\n}\n```\n\nAnd make sure you use the config in every fixture module you've got!\n\nIf it helps you for generation you can also use: https://github.com/versolearning/meteor-factory/ \n\n## Caution\n\nIf you have hooks that send emails or do API calls make sure you disable them when running your fixtures.\n\nKeep your fixtures in sync with your schemas, so whenever you update it, make sure to update your fixtures as well.\n\nAlways work on adding fixtures as  you add different data.\n\nKeep fixtures small and be careful when nesting them, you don't want to insert 100,000 documents because of a big nested loop.","source":"chapters/3/fixtures.md","raw":"---\ntitle: 'Fixtures'\ndescription: Generate dummy data. \ndisqusPage: 'Chapter 3: Fixtures'\n---\n\n## Why?\n\nThe reason for writing fixtures is that once you setup your project, you fill it with relevant data, like users of different types and roles, posts, items, comments, whatever.\n\nThis removes the reason of having a shared database, and it makes onboarding new developers so easy.\n\n## Structure\n\nWe will store our fixtures inside `/imports/fixtures` because this way you will not forget about them. They are an essential part of development.\n\n```js\n// file: /imports/fixtures/index.js\nimport createUsers from './createUsers';\nimport createPostsForUsers from './createPostsForUsers';\n\nconst runFixtures = function () {\n    const shouldRun = Meteor.users.find().count() == 0;\n    \n    if (shouldRun) {\n        createUsers();\n        createPostsForUsers();\n    }\n}\n\nif (!Meteor.isDevelopment) {\n    runFixtures();\n}\n```\n\nKeep a configuration so you can use it for load testing later on:\n\n```js\n// file: /imports/fixtures/config.js\nexport default {\n    USERS_COUNT: 10,\n    POSTS_PER_USER: 2,\n}\n```\n\nAnd make sure you use the config in every fixture module you've got!\n\nIf it helps you for generation you can also use: https://github.com/versolearning/meteor-factory/ \n\n## Caution\n\nIf you have hooks that send emails or do API calls make sure you disable them when running your fixtures.\n\nKeep your fixtures in sync with your schemas, so whenever you update it, make sure to update your fixtures as well.\n\nAlways work on adding fixtures as  you add different data.\n\nKeep fixtures small and be careful when nesting them, you don't want to insert 100,000 documents because of a big nested loop.","date":"2017-10-25T10:17:05.390Z","updated":"2017-10-25T10:17:05.389Z","path":"chapters/3/fixtures.html","_id":"cj945yutf000iqmu5u1e4t72d","comments":1,"layout":"page","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>The reason for writing fixtures is that once you setup your project, you fill it with relevant data, like users of different types and roles, posts, items, comments, whatever.</p>\n<p>This removes the reason of having a shared database, and it makes onboarding new developers so easy.</p>\n<h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><p>We will store our fixtures inside <code>/imports/fixtures</code> because this way you will not forget about them. They are an essential part of development.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/fixtures/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> createUsers <span class=\"keyword\">from</span> <span class=\"string\">'./createUsers'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> createPostsForUsers <span class=\"keyword\">from</span> <span class=\"string\">'./createPostsForUsers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> runFixtures = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> shouldRun = Meteor.users.find().count() == <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (shouldRun) &#123;</div><div class=\"line\">        createUsers();</div><div class=\"line\">        createPostsForUsers();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!Meteor.isDevelopment) &#123;</div><div class=\"line\">    runFixtures();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keep a configuration so you can use it for load testing later on:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/fixtures/config.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    USERS_COUNT: <span class=\"number\">10</span>,</div><div class=\"line\">    POSTS_PER_USER: <span class=\"number\">2</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And make sure you use the config in every fixture module you’ve got!</p>\n<p>If it helps you for generation you can also use: <a href=\"https://github.com/versolearning/meteor-factory/\" target=\"_blank\" rel=\"external\">https://github.com/versolearning/meteor-factory/</a> </p>\n<h2 id=\"Caution\"><a href=\"#Caution\" class=\"headerlink\" title=\"Caution\"></a>Caution</h2><p>If you have hooks that send emails or do API calls make sure you disable them when running your fixtures.</p>\n<p>Keep your fixtures in sync with your schemas, so whenever you update it, make sure to update your fixtures as well.</p>\n<p>Always work on adding fixtures as  you add different data.</p>\n<p>Keep fixtures small and be careful when nesting them, you don’t want to insert 100,000 documents because of a big nested loop.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>The reason for writing fixtures is that once you setup your project, you fill it with relevant data, like users of different types and roles, posts, items, comments, whatever.</p>\n<p>This removes the reason of having a shared database, and it makes onboarding new developers so easy.</p>\n<h2 id=\"Structure\"><a href=\"#Structure\" class=\"headerlink\" title=\"Structure\"></a>Structure</h2><p>We will store our fixtures inside <code>/imports/fixtures</code> because this way you will not forget about them. They are an essential part of development.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/fixtures/index.js</span></div><div class=\"line\"><span class=\"keyword\">import</span> createUsers <span class=\"keyword\">from</span> <span class=\"string\">'./createUsers'</span>;</div><div class=\"line\"><span class=\"keyword\">import</span> createPostsForUsers <span class=\"keyword\">from</span> <span class=\"string\">'./createPostsForUsers'</span>;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">const</span> runFixtures = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> shouldRun = Meteor.users.find().count() == <span class=\"number\">0</span>;</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">if</span> (shouldRun) &#123;</div><div class=\"line\">        createUsers();</div><div class=\"line\">        createPostsForUsers();</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> (!Meteor.isDevelopment) &#123;</div><div class=\"line\">    runFixtures();</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>Keep a configuration so you can use it for load testing later on:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/fixtures/config.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</div><div class=\"line\">    USERS_COUNT: <span class=\"number\">10</span>,</div><div class=\"line\">    POSTS_PER_USER: <span class=\"number\">2</span>,</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>And make sure you use the config in every fixture module you’ve got!</p>\n<p>If it helps you for generation you can also use: <a href=\"https://github.com/versolearning/meteor-factory/\" target=\"_blank\" rel=\"external\">https://github.com/versolearning/meteor-factory/</a> </p>\n<h2 id=\"Caution\"><a href=\"#Caution\" class=\"headerlink\" title=\"Caution\"></a>Caution</h2><p>If you have hooks that send emails or do API calls make sure you disable them when running your fixtures.</p>\n<p>Keep your fixtures in sync with your schemas, so whenever you update it, make sure to update your fixtures as well.</p>\n<p>Always work on adding fixtures as  you add different data.</p>\n<p>Keep fixtures small and be careful when nesting them, you don’t want to insert 100,000 documents because of a big nested loop.</p>\n"},{"title":"Publications","description":"How to architect publications","disqusPage":"Chapter 3: Publications","_content":"\n## Stop using them\n\nYes you read that right, unless you want to create a custom functionality that uses the beautiful LiveData utilities\nfrom Meteor, stop using publications, instead leverage [Grapher](http://grapher.cultofcoders.com) for this.\n\n\nIf you would like to find one post and have it react to changes you will create a NamedQuery:\n\n```js\n// file: /imports/db/posts/queries/getPost.js\nexport default Posts.createQuery('getPost', {\n    $filter({filters, params}) {\n        filters._id = params.postId;\n    },\n    title: 1,\n    user: {\n        profile: 1,\n    }\n});\n```\n\n```js\n// file: /imports/api/posts/queries/getPost.expose.js\n// if you don't expose it you can't work with it\nimport getPost from './getPost';\n\ngetPost.expose({\n    firewall(userId, params) {\n        // some rules here to secure the query\n    }\n})\n```\n\nIn the client you will use it something like this:\n\n```js\nimport getPostQuery from /imports/db/posts/queries/getPost.js;\n\nexport default createContainer(({postId}) => {\n    const query = getPostQuery.clone({postId});\n    const handle = query.subscribe();\n    \n    return {\n        ready: handle.ready(),\n        post: query.fetchOne(),\n    };\n})\n```\n\nThe advantages are the following:\n- No need to do big changes if you decide to make a query non-reactive\n- Separates the concern of data fetching\n- Brings modularity and easy linking with other collections.\n\nYou have to use [Grapher](http://grapher.cultofcoders.com/index.html) in your Meteor app if you want to bring it to enterprise standards. Period. It's the best way we know.\n\n","source":"chapters/3/publications.md","raw":"---\ntitle: 'Publications'\ndescription: How to architect publications\ndisqusPage: 'Chapter 3: Publications'\n---\n\n## Stop using them\n\nYes you read that right, unless you want to create a custom functionality that uses the beautiful LiveData utilities\nfrom Meteor, stop using publications, instead leverage [Grapher](http://grapher.cultofcoders.com) for this.\n\n\nIf you would like to find one post and have it react to changes you will create a NamedQuery:\n\n```js\n// file: /imports/db/posts/queries/getPost.js\nexport default Posts.createQuery('getPost', {\n    $filter({filters, params}) {\n        filters._id = params.postId;\n    },\n    title: 1,\n    user: {\n        profile: 1,\n    }\n});\n```\n\n```js\n// file: /imports/api/posts/queries/getPost.expose.js\n// if you don't expose it you can't work with it\nimport getPost from './getPost';\n\ngetPost.expose({\n    firewall(userId, params) {\n        // some rules here to secure the query\n    }\n})\n```\n\nIn the client you will use it something like this:\n\n```js\nimport getPostQuery from /imports/db/posts/queries/getPost.js;\n\nexport default createContainer(({postId}) => {\n    const query = getPostQuery.clone({postId});\n    const handle = query.subscribe();\n    \n    return {\n        ready: handle.ready(),\n        post: query.fetchOne(),\n    };\n})\n```\n\nThe advantages are the following:\n- No need to do big changes if you decide to make a query non-reactive\n- Separates the concern of data fetching\n- Brings modularity and easy linking with other collections.\n\nYou have to use [Grapher](http://grapher.cultofcoders.com/index.html) in your Meteor app if you want to bring it to enterprise standards. Period. It's the best way we know.\n\n","date":"2017-10-25T09:49:12.957Z","updated":"2017-10-25T09:49:12.955Z","path":"chapters/3/publications.html","_id":"cj96o7opy0000zju5lyhla23b","comments":1,"layout":"page","content":"<h2 id=\"Stop-using-them\"><a href=\"#Stop-using-them\" class=\"headerlink\" title=\"Stop using them\"></a>Stop using them</h2><p>Yes you read that right, unless you want to create a custom functionality that uses the beautiful LiveData utilities\nfrom Meteor, stop using publications, instead leverage <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"external\">Grapher</a> for this.</p>\n<p>If you would like to find one post and have it react to changes you will create a NamedQuery:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/db/posts/queries/getPost.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts.createQuery(<span class=\"string\">'getPost'</span>, &#123;</div><div class=\"line\">    $filter(&#123;filters, params&#125;) &#123;</div><div class=\"line\">        filters._id = params.postId;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    title: <span class=\"number\">1</span>,</div><div class=\"line\">    user: &#123;</div><div class=\"line\">        profile: <span class=\"number\">1</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/queries/getPost.expose.js</span></div><div class=\"line\"><span class=\"comment\">// if you don't expose it you can't work with it</span></div><div class=\"line\"><span class=\"keyword\">import</span> getPost <span class=\"keyword\">from</span> <span class=\"string\">'./getPost'</span>;</div><div class=\"line\"></div><div class=\"line\">getPost.expose(&#123;</div><div class=\"line\">    firewall(userId, params) &#123;</div><div class=\"line\">        <span class=\"comment\">// some rules here to secure the query</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In the client you will use it something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> getPostQuery <span class=\"keyword\">from</span> /imports/db/posts/queries/getPost.js;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createContainer(<span class=\"function\">(<span class=\"params\">&#123;postId&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> query = getPostQuery.clone(&#123;postId&#125;);</div><div class=\"line\">    <span class=\"keyword\">const</span> handle = query.subscribe();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ready: handle.ready(),</div><div class=\"line\">        post: query.fetchOne(),</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The advantages are the following:</p>\n<ul>\n<li>No need to do big changes if you decide to make a query non-reactive</li>\n<li>Separates the concern of data fetching</li>\n<li>Brings modularity and easy linking with other collections.</li>\n</ul>\n<p>You have to use <a href=\"http://grapher.cultofcoders.com/index.html\" target=\"_blank\" rel=\"external\">Grapher</a> in your Meteor app if you want to bring it to enterprise standards. Period. It’s the best way we know.</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Stop-using-them\"><a href=\"#Stop-using-them\" class=\"headerlink\" title=\"Stop using them\"></a>Stop using them</h2><p>Yes you read that right, unless you want to create a custom functionality that uses the beautiful LiveData utilities\nfrom Meteor, stop using publications, instead leverage <a href=\"http://grapher.cultofcoders.com\" target=\"_blank\" rel=\"external\">Grapher</a> for this.</p>\n<p>If you would like to find one post and have it react to changes you will create a NamedQuery:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/db/posts/queries/getPost.js</span></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> Posts.createQuery(<span class=\"string\">'getPost'</span>, &#123;</div><div class=\"line\">    $filter(&#123;filters, params&#125;) &#123;</div><div class=\"line\">        filters._id = params.postId;</div><div class=\"line\">    &#125;,</div><div class=\"line\">    title: <span class=\"number\">1</span>,</div><div class=\"line\">    user: &#123;</div><div class=\"line\">        profile: <span class=\"number\">1</span>,</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;);</div></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">// file: /imports/api/posts/queries/getPost.expose.js</span></div><div class=\"line\"><span class=\"comment\">// if you don't expose it you can't work with it</span></div><div class=\"line\"><span class=\"keyword\">import</span> getPost <span class=\"keyword\">from</span> <span class=\"string\">'./getPost'</span>;</div><div class=\"line\"></div><div class=\"line\">getPost.expose(&#123;</div><div class=\"line\">    firewall(userId, params) &#123;</div><div class=\"line\">        <span class=\"comment\">// some rules here to secure the query</span></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>In the client you will use it something like this:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">import</span> getPostQuery <span class=\"keyword\">from</span> /imports/db/posts/queries/getPost.js;</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> createContainer(<span class=\"function\">(<span class=\"params\">&#123;postId&#125;</span>) =&gt;</span> &#123;</div><div class=\"line\">    <span class=\"keyword\">const</span> query = getPostQuery.clone(&#123;postId&#125;);</div><div class=\"line\">    <span class=\"keyword\">const</span> handle = query.subscribe();</div><div class=\"line\">    </div><div class=\"line\">    <span class=\"keyword\">return</span> &#123;</div><div class=\"line\">        ready: handle.ready(),</div><div class=\"line\">        post: query.fetchOne(),</div><div class=\"line\">    &#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<p>The advantages are the following:</p>\n<ul>\n<li>No need to do big changes if you decide to make a query non-reactive</li>\n<li>Separates the concern of data fetching</li>\n<li>Brings modularity and easy linking with other collections.</li>\n</ul>\n<p>You have to use <a href=\"http://grapher.cultofcoders.com/index.html\" target=\"_blank\" rel=\"external\">Grapher</a> in your Meteor app if you want to bring it to enterprise standards. Period. It’s the best way we know.</p>\n"},{"title":"Chapter 3 - Conclusion","description":"On your way to properly scale","disqusPage":"Chapter 3: Conclusion","_content":"\n## Thank you!\n\nWe really hope that this chapter has shared some insights into how to architect your Meteor app, and what are some\nof the best practices we identified.\n\nYou should be on your way now to write beautiful, decoupled code that is easy to understand.\n\nNow, I have a task for you, remember that first task the user received in his intro ?\n\nLet's try and apply the principles we discussed and go ahead and create a public GitHub repository and write a project\nthat will do the following:\n\n## Beat the Boss\n\n- Use React as the view layer\n- Create fixtures for users and admin\n- Microservicify admin and app\n- Ability to register/login/forgot-password\n- Ability to create a post (Ask for title and description)\n- Make sure the post has createdAt, updatedAt, createdBy, updatedBy\n- Ability to list all approved posts on the route (\"/posts\")\n- Ability to view a single Post\n- As an Admin I need the ability to approve a post\n- When a new post is created the admins should get notified by email\n- Write tests\n\nFocus on backend, not frontend. The purpose here is to architect the backend right.\n\nWould you pass the *Bigshot Code Reviewer*'s review?\n\nLeave your link to the repository down below, and let other users review it! See if it's truly Enterprise level.\n\n\n## Tell us what you think\n\nYour feedback is very important. Feel free to ask questions, if they are specific to a certain part of this chapter,\ngo to that page and leave a comment there. Thank you!","source":"chapters/3/conclusion.md","raw":"---\ntitle: 'Chapter 3 - Conclusion'\ndescription: On your way to properly scale\ndisqusPage: 'Chapter 3: Conclusion'\n---\n\n## Thank you!\n\nWe really hope that this chapter has shared some insights into how to architect your Meteor app, and what are some\nof the best practices we identified.\n\nYou should be on your way now to write beautiful, decoupled code that is easy to understand.\n\nNow, I have a task for you, remember that first task the user received in his intro ?\n\nLet's try and apply the principles we discussed and go ahead and create a public GitHub repository and write a project\nthat will do the following:\n\n## Beat the Boss\n\n- Use React as the view layer\n- Create fixtures for users and admin\n- Microservicify admin and app\n- Ability to register/login/forgot-password\n- Ability to create a post (Ask for title and description)\n- Make sure the post has createdAt, updatedAt, createdBy, updatedBy\n- Ability to list all approved posts on the route (\"/posts\")\n- Ability to view a single Post\n- As an Admin I need the ability to approve a post\n- When a new post is created the admins should get notified by email\n- Write tests\n\nFocus on backend, not frontend. The purpose here is to architect the backend right.\n\nWould you pass the *Bigshot Code Reviewer*'s review?\n\nLeave your link to the repository down below, and let other users review it! See if it's truly Enterprise level.\n\n\n## Tell us what you think\n\nYour feedback is very important. Feel free to ask questions, if they are specific to a certain part of this chapter,\ngo to that page and leave a comment there. Thank you!","date":"2017-10-25T13:35:54.171Z","updated":"2017-10-25T13:35:54.170Z","path":"chapters/3/conclusion.html","_id":"cj96t7sji0000gju52rgekv1o","comments":1,"layout":"page","content":"<h2 id=\"Thank-you\"><a href=\"#Thank-you\" class=\"headerlink\" title=\"Thank you!\"></a>Thank you!</h2><p>We really hope that this chapter has shared some insights into how to architect your Meteor app, and what are some\nof the best practices we identified.</p>\n<p>You should be on your way now to write beautiful, decoupled code that is easy to understand.</p>\n<p>Now, I have a task for you, remember that first task the user received in his intro ?</p>\n<p>Let’s try and apply the principles we discussed and go ahead and create a public GitHub repository and write a project\nthat will do the following:</p>\n<h2 id=\"Beat-the-Boss\"><a href=\"#Beat-the-Boss\" class=\"headerlink\" title=\"Beat the Boss\"></a>Beat the Boss</h2><ul>\n<li>Use React as the view layer</li>\n<li>Create fixtures for users and admin</li>\n<li>Microservicify admin and app</li>\n<li>Ability to register/login/forgot-password</li>\n<li>Ability to create a post (Ask for title and description)</li>\n<li>Make sure the post has createdAt, updatedAt, createdBy, updatedBy</li>\n<li>Ability to list all approved posts on the route (“/posts”)</li>\n<li>Ability to view a single Post</li>\n<li>As an Admin I need the ability to approve a post</li>\n<li>When a new post is created the admins should get notified by email</li>\n<li>Write tests</li>\n</ul>\n<p>Focus on backend, not frontend. The purpose here is to architect the backend right.</p>\n<p>Would you pass the <em>Bigshot Code Reviewer</em>‘s review?</p>\n<p>Leave your link to the repository down below, and let other users review it! See if it’s truly Enterprise level.</p>\n<h2 id=\"Tell-us-what-you-think\"><a href=\"#Tell-us-what-you-think\" class=\"headerlink\" title=\"Tell us what you think\"></a>Tell us what you think</h2><p>Your feedback is very important. Feel free to ask questions, if they are specific to a certain part of this chapter,\ngo to that page and leave a comment there. Thank you!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Thank-you\"><a href=\"#Thank-you\" class=\"headerlink\" title=\"Thank you!\"></a>Thank you!</h2><p>We really hope that this chapter has shared some insights into how to architect your Meteor app, and what are some\nof the best practices we identified.</p>\n<p>You should be on your way now to write beautiful, decoupled code that is easy to understand.</p>\n<p>Now, I have a task for you, remember that first task the user received in his intro ?</p>\n<p>Let’s try and apply the principles we discussed and go ahead and create a public GitHub repository and write a project\nthat will do the following:</p>\n<h2 id=\"Beat-the-Boss\"><a href=\"#Beat-the-Boss\" class=\"headerlink\" title=\"Beat the Boss\"></a>Beat the Boss</h2><ul>\n<li>Use React as the view layer</li>\n<li>Create fixtures for users and admin</li>\n<li>Microservicify admin and app</li>\n<li>Ability to register/login/forgot-password</li>\n<li>Ability to create a post (Ask for title and description)</li>\n<li>Make sure the post has createdAt, updatedAt, createdBy, updatedBy</li>\n<li>Ability to list all approved posts on the route (“/posts”)</li>\n<li>Ability to view a single Post</li>\n<li>As an Admin I need the ability to approve a post</li>\n<li>When a new post is created the admins should get notified by email</li>\n<li>Write tests</li>\n</ul>\n<p>Focus on backend, not frontend. The purpose here is to architect the backend right.</p>\n<p>Would you pass the <em>Bigshot Code Reviewer</em>‘s review?</p>\n<p>Leave your link to the repository down below, and let other users review it! See if it’s truly Enterprise level.</p>\n<h2 id=\"Tell-us-what-you-think\"><a href=\"#Tell-us-what-you-think\" class=\"headerlink\" title=\"Tell us what you think\"></a>Tell us what you think</h2><p>Your feedback is very important. Feel free to ask questions, if they are specific to a certain part of this chapter,\ngo to that page and leave a comment there. Thank you!</p>\n"},{"title":"Cascade Style Sheet (CSS)","description":"Styling your Meteor application","disqusPage":"Chapter 2: CSS","_content":"\n## Introduction\n\n\nThe style is an important aspect of an application. Anyone can write css, but there are some subtle things that makes the difference between a good written css and a bad one.\n\nWe choose not to use a framework, but we are going to guide you throughout the process of building the base css you'll need in most of your projects.\n\nFor this tutorial, we are going to use [SASS (SCSS)](http://sass-lang.com/), because it's an amazing tool that offers some features that plain css misses that could improve your productivity right away and help you modularize your code. For example: variables, mixins, import, functions and many other cool features.\n\n\n## Setting Up\n\n```bash\nmeteor add fourseven:scss\nmeteor remove standard-minifier-css // meteor installs this by default to optimize the css\nmeteor add juliancwirko:postcss // for a better optimization of css\nmeteor npm install --save-dev autoprefixer css-mqpacker postcss-csso\n```\n\nWe are using [PostCSS](http://postcss.org/) because it makes our life easier by using some of it's plugins:\n- [Autoprefixer](https://github.com/postcss/autoprefixer) taking out our responsability to prefix our css rules for each browser.\n- [CSS MQPacker](https://github.com/hail2u/node-css-mqpacker) pack some CSS media query rules into one using PostCSS into one and adding them at the end of css file\n- [CSSO](https://github.com/css/csso) is a CSS minifier that compresses and cleans our code\n\nTo configure your newly installed plugins, you need to add this in package json:\n\n``` json\n\"postcss\": {\n    \"plugins\": {\n      \"autoprefixer\": {\n        \"browsers\": [\n          \"last 2 versions\",\n          \"> 2%\"\n        ]\n      },\n      \"css-mqpacker\": {},\n      \"postcss-csso\": {}\n    }\n  }\n\n```\n\n## Styles Folder Structure\nThis is the basic folder structure we are using and recommend\n\n<pre>\n├── client \n│   ├── styles\n│   │   ├── cc-app.scss // Main file where we import all the other scss files\n│   │   └── _helpers // in this folder we add all files for variables, functions, mixins \n|   │   │    └── _functions.scss // functions that we use in mixins \n|   │   │    └── _helpers.scss // general rules all over the website\n|   │   │    └── _mixins.scss // a group of declarations that you want to re-use\n|   │   │    └── _variables.scss\n│   │   └── base \n|   │   │    └── _normalize.scss // css reset for the browser \n|   │   │    └── _font.scss // rules for importing external fonts \n|   │   │    └── _general.scss // general rules for elements (html, body, links, a, etc)\n│   │   └── elements\n|   │   │    └── grid.scss\n│   │   └── form  \n|   │   │    └── _button.scss\n|   │   │    └── _checkbox.scss \n|   │   │    └── _radio.scss\n|   │   │    └── _text.scss\n|   │   │    └── _textarea.scss\n|   │   │    └── _select.scss\n|   │   │    └── _form-helpers.scss\n│   │   └── layout \n|   │   │    └── header\n|   │   │    └── footer\n|   │   │    └── main\n│   │   └── pages // a folder in which we add the css files for each page of application\n│   │   └── plugins // // in this folder we add the files from our external components that we use in the app\n│   ├── ...\n├── imports\n│   ├── ...\n└── server \n    └── ...\n</pre>\n\nYou can find a pre-installed meteor project with this folder structure, [here](https://github.com/cult-of-coders/meteor-tuts-boilerplate)\n\n\n## Use of Flexbox\nTo structure our layout model, we are using CSS3 Flexbile Box because it solves some problems that the layout float model have:\n- vertical and horizontal centering\n- same height columns\n\nYou can learn more about it, [here](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\n## Use of Rem for font size\nWe are using rem size for our fonts because it offers responsiveness, scalability, improved reading experience, and greater flexibility in defining components. To read more about it, click [here](https://www.sitepoint.com/understanding-and-using-rem-units-in-css/) \n\n## Writing clean css\nIt is extremely important to write clean css code so that we have some recommendations for you:\n- When you create an application, prefix your classes with something specific and short. For example, we chose for our company \"cc\" (Cult of Coders). The reason behind it is that if we get an external library, we won't any have any conflicts\n- Use 3 or less levels of css nesting. Most of the time you don't need more than one level because if you want to override those styles only on a specific elements, you don't have to recreate the whole nesting levels\n- Using !important in your CSS usually means you're narcissistic & selfish or lazy. Respect the devs to come and don't use it!\n- For each component (or page / section) create a separate file in which you'll store only the specific styles for that section. This will make the code much cleaner, offering better readability and very easy to modify later \n- Naming standard convention. Our current recommendation is [BEM](http://getbem.com/naming/)\n- Be specific in naming your classes. The class names should represent your elements\n\n```scss\n/* BAD */\n.box {\n  background-color: green !important;\n  .box2 {\n    .cc-box3 {\n      font-size: 5px;\n      .cc-button-x {\n        color: red; \n      }\n    }\n  }\n} \n.cc-div {}\n```\n\n```scss\n/* GOOD */\n.cc-donut {\n  &--bg-main{\n    background-color: $color-main;\n    color: $color-white;\n  }\n}\n.cc-donuts-list {\n  height: 100%;\n  display: flex;\n  \n  &__title {\n    @include font-size(16px);\n  }\n}\n```\n\n## Use of Variables\nVariables are simply amazing because you can store some general rules that you want to apply in your stylesheet.\n\n```scss\n$font-roboto: 'Roboto', sans-serif;\n$base-font-size: 62.5%;\n$color-success: #4CAF50;\n$shadow-dp0: 0px 0px 0px 0px rgba(black, 0.2), 0px 0px 0px 0px rgba(black, 0.14), 0px 0px 0px 0px rgba(black, 0.12);\n\n/* How to use them? */\n.cc-donuts-list {\n  font-family: $font-roboto;\n  color: $color-success;\n  box-shadow: $shadow-dp0;\n}\n```\n\n## Use of mixins\nA mixin lets you make groups of CSS declarations that you want to reuse throughout your site\n```scss\n@mixin breakpoint ($value, $min-value: false) {\n  @if $value == 'phone-small' {\n    @media only screen and (max-width : 330px) { @content; }\n  }\n\n  @if $value == 'phone' {\n    @media only screen and (max-width : 750px) { @content; }\n  }\n\n  @else if $value == 'tablet' {\n    @media only screen and (min-width: 751px) and (max-width: 1199px) { @content }\n  }\n\n  @else if $value == 'desktop' {\n    @media only screen and (min-width: 1601px) { @content }\n  }\n\n  @else {\n    @media only screen and (max-width: $value) { @content; }\n  }\n}\n\n/* How to use it? */\n.cc-notification {\n  @include breakpoint(\"tablet\") {\n    font-size: 50px;\n  }\n}\n\n```\n## Homework\n\n#### 1. Donut colors\nStyle the section where we display the donuts. Add to each element from the section, a specific class. Each type of donut, will have a different color.\n\n#### 2. Responsive donuts\nThe creation of a donut needs to be responsive so we can add it from each device we would like \n","source":"chapters/2/css.md","raw":"---\ntitle: 'Cascade Style Sheet (CSS)'\ndescription: Styling your Meteor application\ndisqusPage: 'Chapter 2: CSS'\n---\n\n## Introduction\n\n\nThe style is an important aspect of an application. Anyone can write css, but there are some subtle things that makes the difference between a good written css and a bad one.\n\nWe choose not to use a framework, but we are going to guide you throughout the process of building the base css you'll need in most of your projects.\n\nFor this tutorial, we are going to use [SASS (SCSS)](http://sass-lang.com/), because it's an amazing tool that offers some features that plain css misses that could improve your productivity right away and help you modularize your code. For example: variables, mixins, import, functions and many other cool features.\n\n\n## Setting Up\n\n```bash\nmeteor add fourseven:scss\nmeteor remove standard-minifier-css // meteor installs this by default to optimize the css\nmeteor add juliancwirko:postcss // for a better optimization of css\nmeteor npm install --save-dev autoprefixer css-mqpacker postcss-csso\n```\n\nWe are using [PostCSS](http://postcss.org/) because it makes our life easier by using some of it's plugins:\n- [Autoprefixer](https://github.com/postcss/autoprefixer) taking out our responsability to prefix our css rules for each browser.\n- [CSS MQPacker](https://github.com/hail2u/node-css-mqpacker) pack some CSS media query rules into one using PostCSS into one and adding them at the end of css file\n- [CSSO](https://github.com/css/csso) is a CSS minifier that compresses and cleans our code\n\nTo configure your newly installed plugins, you need to add this in package json:\n\n``` json\n\"postcss\": {\n    \"plugins\": {\n      \"autoprefixer\": {\n        \"browsers\": [\n          \"last 2 versions\",\n          \"> 2%\"\n        ]\n      },\n      \"css-mqpacker\": {},\n      \"postcss-csso\": {}\n    }\n  }\n\n```\n\n## Styles Folder Structure\nThis is the basic folder structure we are using and recommend\n\n<pre>\n├── client \n│   ├── styles\n│   │   ├── cc-app.scss // Main file where we import all the other scss files\n│   │   └── _helpers // in this folder we add all files for variables, functions, mixins \n|   │   │    └── _functions.scss // functions that we use in mixins \n|   │   │    └── _helpers.scss // general rules all over the website\n|   │   │    └── _mixins.scss // a group of declarations that you want to re-use\n|   │   │    └── _variables.scss\n│   │   └── base \n|   │   │    └── _normalize.scss // css reset for the browser \n|   │   │    └── _font.scss // rules for importing external fonts \n|   │   │    └── _general.scss // general rules for elements (html, body, links, a, etc)\n│   │   └── elements\n|   │   │    └── grid.scss\n│   │   └── form  \n|   │   │    └── _button.scss\n|   │   │    └── _checkbox.scss \n|   │   │    └── _radio.scss\n|   │   │    └── _text.scss\n|   │   │    └── _textarea.scss\n|   │   │    └── _select.scss\n|   │   │    └── _form-helpers.scss\n│   │   └── layout \n|   │   │    └── header\n|   │   │    └── footer\n|   │   │    └── main\n│   │   └── pages // a folder in which we add the css files for each page of application\n│   │   └── plugins // // in this folder we add the files from our external components that we use in the app\n│   ├── ...\n├── imports\n│   ├── ...\n└── server \n    └── ...\n</pre>\n\nYou can find a pre-installed meteor project with this folder structure, [here](https://github.com/cult-of-coders/meteor-tuts-boilerplate)\n\n\n## Use of Flexbox\nTo structure our layout model, we are using CSS3 Flexbile Box because it solves some problems that the layout float model have:\n- vertical and horizontal centering\n- same height columns\n\nYou can learn more about it, [here](https://css-tricks.com/snippets/css/a-guide-to-flexbox/)\n\n## Use of Rem for font size\nWe are using rem size for our fonts because it offers responsiveness, scalability, improved reading experience, and greater flexibility in defining components. To read more about it, click [here](https://www.sitepoint.com/understanding-and-using-rem-units-in-css/) \n\n## Writing clean css\nIt is extremely important to write clean css code so that we have some recommendations for you:\n- When you create an application, prefix your classes with something specific and short. For example, we chose for our company \"cc\" (Cult of Coders). The reason behind it is that if we get an external library, we won't any have any conflicts\n- Use 3 or less levels of css nesting. Most of the time you don't need more than one level because if you want to override those styles only on a specific elements, you don't have to recreate the whole nesting levels\n- Using !important in your CSS usually means you're narcissistic & selfish or lazy. Respect the devs to come and don't use it!\n- For each component (or page / section) create a separate file in which you'll store only the specific styles for that section. This will make the code much cleaner, offering better readability and very easy to modify later \n- Naming standard convention. Our current recommendation is [BEM](http://getbem.com/naming/)\n- Be specific in naming your classes. The class names should represent your elements\n\n```scss\n/* BAD */\n.box {\n  background-color: green !important;\n  .box2 {\n    .cc-box3 {\n      font-size: 5px;\n      .cc-button-x {\n        color: red; \n      }\n    }\n  }\n} \n.cc-div {}\n```\n\n```scss\n/* GOOD */\n.cc-donut {\n  &--bg-main{\n    background-color: $color-main;\n    color: $color-white;\n  }\n}\n.cc-donuts-list {\n  height: 100%;\n  display: flex;\n  \n  &__title {\n    @include font-size(16px);\n  }\n}\n```\n\n## Use of Variables\nVariables are simply amazing because you can store some general rules that you want to apply in your stylesheet.\n\n```scss\n$font-roboto: 'Roboto', sans-serif;\n$base-font-size: 62.5%;\n$color-success: #4CAF50;\n$shadow-dp0: 0px 0px 0px 0px rgba(black, 0.2), 0px 0px 0px 0px rgba(black, 0.14), 0px 0px 0px 0px rgba(black, 0.12);\n\n/* How to use them? */\n.cc-donuts-list {\n  font-family: $font-roboto;\n  color: $color-success;\n  box-shadow: $shadow-dp0;\n}\n```\n\n## Use of mixins\nA mixin lets you make groups of CSS declarations that you want to reuse throughout your site\n```scss\n@mixin breakpoint ($value, $min-value: false) {\n  @if $value == 'phone-small' {\n    @media only screen and (max-width : 330px) { @content; }\n  }\n\n  @if $value == 'phone' {\n    @media only screen and (max-width : 750px) { @content; }\n  }\n\n  @else if $value == 'tablet' {\n    @media only screen and (min-width: 751px) and (max-width: 1199px) { @content }\n  }\n\n  @else if $value == 'desktop' {\n    @media only screen and (min-width: 1601px) { @content }\n  }\n\n  @else {\n    @media only screen and (max-width: $value) { @content; }\n  }\n}\n\n/* How to use it? */\n.cc-notification {\n  @include breakpoint(\"tablet\") {\n    font-size: 50px;\n  }\n}\n\n```\n## Homework\n\n#### 1. Donut colors\nStyle the section where we display the donuts. Add to each element from the section, a specific class. Each type of donut, will have a different color.\n\n#### 2. Responsive donuts\nThe creation of a donut needs to be responsive so we can add it from each device we would like \n","date":"2019-10-04T12:00:07.761Z","updated":"2019-10-04T12:00:07.761Z","path":"chapters/2/css.html","comments":1,"layout":"page","_id":"ck1c3sbaa00007ta41ogd8kzv","content":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>The style is an important aspect of an application. Anyone can write css, but there are some subtle things that makes the difference between a good written css and a bad one.</p>\n<p>We choose not to use a framework, but we are going to guide you throughout the process of building the base css you’ll need in most of your projects.</p>\n<p>For this tutorial, we are going to use <a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">SASS (SCSS)</a>, because it’s an amazing tool that offers some features that plain css misses that could improve your productivity right away and help you modularize your code. For example: variables, mixins, import, functions and many other cool features.</p>\n<h2 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add fourseven:scss</div><div class=\"line\">meteor remove standard-minifier-css // meteor installs this by default to optimize the css</div><div class=\"line\">meteor add juliancwirko:postcss // <span class=\"keyword\">for</span> a better optimization of css</div><div class=\"line\">meteor npm install --save-dev autoprefixer css-mqpacker postcss-csso</div></pre></td></tr></table></figure>\n<p>We are using <a href=\"http://postcss.org/\" target=\"_blank\" rel=\"noopener\">PostCSS</a> because it makes our life easier by using some of it’s plugins:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"noopener\">Autoprefixer</a> taking out our responsability to prefix our css rules for each browser.</li>\n<li><a href=\"https://github.com/hail2u/node-css-mqpacker\" target=\"_blank\" rel=\"noopener\">CSS MQPacker</a> pack some CSS media query rules into one using PostCSS into one and adding them at the end of css file</li>\n<li><a href=\"https://github.com/css/csso\" target=\"_blank\" rel=\"noopener\">CSSO</a> is a CSS minifier that compresses and cleans our code</li>\n</ul>\n<p>To configure your newly installed plugins, you need to add this in package json:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"postcss\": &#123;</div><div class=\"line\">    \"plugins\": &#123;</div><div class=\"line\">      \"autoprefixer\": &#123;</div><div class=\"line\">        \"browsers\": [</div><div class=\"line\">          \"last 2 versions\",</div><div class=\"line\">          <span class=\"string\">\"&gt; 2%\"</span></div><div class=\"line\">        ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"css-mqpacker\": &#123;&#125;,</div><div class=\"line\">      \"postcss-csso\": &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Styles-Folder-Structure\"><a href=\"#Styles-Folder-Structure\" class=\"headerlink\" title=\"Styles Folder Structure\"></a>Styles Folder Structure</h2><p>This is the basic folder structure we are using and recommend</p>\n<pre>\n├── client \n│   ├── styles\n│   │   ├── cc-app.scss // Main file where we import all the other scss files\n│   │   └── _helpers // in this folder we add all files for variables, functions, mixins \n|   │   │    └── _functions.scss // functions that we use in mixins \n|   │   │    └── _helpers.scss // general rules all over the website\n|   │   │    └── _mixins.scss // a group of declarations that you want to re-use\n|   │   │    └── _variables.scss\n│   │   └── base \n|   │   │    └── _normalize.scss // css reset for the browser \n|   │   │    └── _font.scss // rules for importing external fonts \n|   │   │    └── _general.scss // general rules for elements (html, body, links, a, etc)\n│   │   └── elements\n|   │   │    └── grid.scss\n│   │   └── form  \n|   │   │    └── _button.scss\n|   │   │    └── _checkbox.scss \n|   │   │    └── _radio.scss\n|   │   │    └── _text.scss\n|   │   │    └── _textarea.scss\n|   │   │    └── _select.scss\n|   │   │    └── _form-helpers.scss\n│   │   └── layout \n|   │   │    └── header\n|   │   │    └── footer\n|   │   │    └── main\n│   │   └── pages // a folder in which we add the css files for each page of application\n│   │   └── plugins // // in this folder we add the files from our external components that we use in the app\n│   ├── ...\n├── imports\n│   ├── ...\n└── server \n    └── ...\n</pre>\n\n<p>You can find a pre-installed meteor project with this folder structure, <a href=\"https://github.com/cult-of-coders/meteor-tuts-boilerplate\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Use-of-Flexbox\"><a href=\"#Use-of-Flexbox\" class=\"headerlink\" title=\"Use of Flexbox\"></a>Use of Flexbox</h2><p>To structure our layout model, we are using CSS3 Flexbile Box because it solves some problems that the layout float model have:</p>\n<ul>\n<li>vertical and horizontal centering</li>\n<li>same height columns</li>\n</ul>\n<p>You can learn more about it, <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Use-of-Rem-for-font-size\"><a href=\"#Use-of-Rem-for-font-size\" class=\"headerlink\" title=\"Use of Rem for font size\"></a>Use of Rem for font size</h2><p>We are using rem size for our fonts because it offers responsiveness, scalability, improved reading experience, and greater flexibility in defining components. To read more about it, click <a href=\"https://www.sitepoint.com/understanding-and-using-rem-units-in-css/\" target=\"_blank\" rel=\"noopener\">here</a> </p>\n<h2 id=\"Writing-clean-css\"><a href=\"#Writing-clean-css\" class=\"headerlink\" title=\"Writing clean css\"></a>Writing clean css</h2><p>It is extremely important to write clean css code so that we have some recommendations for you:</p>\n<ul>\n<li>When you create an application, prefix your classes with something specific and short. For example, we chose for our company “cc” (Cult of Coders). The reason behind it is that if we get an external library, we won’t any have any conflicts</li>\n<li>Use 3 or less levels of css nesting. Most of the time you don’t need more than one level because if you want to override those styles only on a specific elements, you don’t have to recreate the whole nesting levels</li>\n<li>Using !important in your CSS usually means you’re narcissistic &amp; selfish or lazy. Respect the devs to come and don’t use it!</li>\n<li>For each component (or page / section) create a separate file in which you’ll store only the specific styles for that section. This will make the code much cleaner, offering better readability and very easy to modify later </li>\n<li>Naming standard convention. Our current recommendation is <a href=\"http://getbem.com/naming/\" target=\"_blank\" rel=\"noopener\">BEM</a></li>\n<li>Be specific in naming your classes. The class names should represent your elements</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* BAD */</span></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: green <span class=\"meta\">!important</span>;</div><div class=\"line\">  <span class=\"selector-class\">.box2</span> &#123;</div><div class=\"line\">    <span class=\"selector-class\">.cc-box3</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">      <span class=\"selector-class\">.cc-button-x</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: red; </div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"selector-class\">.cc-div</span> &#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* GOOD */</span></div><div class=\"line\"><span class=\"selector-class\">.cc-donut</span> &#123;</div><div class=\"line\">  &amp;--bg-main&#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$color-main</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color-white</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.cc-donuts-list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">  </div><div class=\"line\">  &amp;__title &#123;</div><div class=\"line\">    @<span class=\"keyword\">include</span> font-size(<span class=\"number\">16px</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Use-of-Variables\"><a href=\"#Use-of-Variables\" class=\"headerlink\" title=\"Use of Variables\"></a>Use of Variables</h2><p>Variables are simply amazing because you can store some general rules that you want to apply in your stylesheet.</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$font-roboto</span>: <span class=\"string\">'Roboto'</span>, sans-serif;</div><div class=\"line\"><span class=\"variable\">$base-font-size</span>: <span class=\"number\">62.5%</span>;</div><div class=\"line\"><span class=\"variable\">$color-success</span>: <span class=\"number\">#4CAF50</span>;</div><div class=\"line\"><span class=\"variable\">$shadow-dp0</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> rgba(black, <span class=\"number\">0.2</span>), <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> rgba(black, <span class=\"number\">0.14</span>), <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> rgba(black, <span class=\"number\">0.12</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* How to use them? */</span></div><div class=\"line\"><span class=\"selector-class\">.cc-donuts-list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$font-roboto</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$color-success</span>;</div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadow-dp0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Use-of-mixins\"><a href=\"#Use-of-mixins\" class=\"headerlink\" title=\"Use of mixins\"></a>Use of mixins</h2><p>A mixin lets you make groups of CSS declarations that you want to reuse throughout your site\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> breakpoint (<span class=\"variable\">$value</span>, <span class=\"variable\">$min-value</span>: false) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$value</span> == <span class=\"string\">'phone-small'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (max-width : 330px) &#123; @<span class=\"keyword\">content</span>; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$value</span> == <span class=\"string\">'phone'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (max-width : 750px) &#123; @<span class=\"keyword\">content</span>; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> if <span class=\"variable\">$value</span> == <span class=\"string\">'tablet'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (min-width: 751px) and (max-width: 1199px) &#123; @<span class=\"keyword\">content</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> if <span class=\"variable\">$value</span> == <span class=\"string\">'desktop'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (min-width: 1601px) &#123; @<span class=\"keyword\">content</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (max-width: <span class=\"variable\">$value</span>) &#123; @<span class=\"keyword\">content</span>; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* How to use it? */</span></div><div class=\"line\"><span class=\"selector-class\">.cc-notification</span> &#123;</div><div class=\"line\">  @<span class=\"keyword\">include</span> breakpoint(<span class=\"string\">\"tablet\"</span>) &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Donut-colors\"><a href=\"#1-Donut-colors\" class=\"headerlink\" title=\"1. Donut colors\"></a>1. Donut colors</h4><p>Style the section where we display the donuts. Add to each element from the section, a specific class. Each type of donut, will have a different color.</p>\n<h4 id=\"2-Responsive-donuts\"><a href=\"#2-Responsive-donuts\" class=\"headerlink\" title=\"2. Responsive donuts\"></a>2. Responsive donuts</h4><p>The creation of a donut needs to be responsive so we can add it from each device we would like </p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h2><p>The style is an important aspect of an application. Anyone can write css, but there are some subtle things that makes the difference between a good written css and a bad one.</p>\n<p>We choose not to use a framework, but we are going to guide you throughout the process of building the base css you’ll need in most of your projects.</p>\n<p>For this tutorial, we are going to use <a href=\"http://sass-lang.com/\" target=\"_blank\" rel=\"noopener\">SASS (SCSS)</a>, because it’s an amazing tool that offers some features that plain css misses that could improve your productivity right away and help you modularize your code. For example: variables, mixins, import, functions and many other cool features.</p>\n<h2 id=\"Setting-Up\"><a href=\"#Setting-Up\" class=\"headerlink\" title=\"Setting Up\"></a>Setting Up</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">meteor add fourseven:scss</div><div class=\"line\">meteor remove standard-minifier-css // meteor installs this by default to optimize the css</div><div class=\"line\">meteor add juliancwirko:postcss // <span class=\"keyword\">for</span> a better optimization of css</div><div class=\"line\">meteor npm install --save-dev autoprefixer css-mqpacker postcss-csso</div></pre></td></tr></table></figure>\n<p>We are using <a href=\"http://postcss.org/\" target=\"_blank\" rel=\"noopener\">PostCSS</a> because it makes our life easier by using some of it’s plugins:</p>\n<ul>\n<li><a href=\"https://github.com/postcss/autoprefixer\" target=\"_blank\" rel=\"noopener\">Autoprefixer</a> taking out our responsability to prefix our css rules for each browser.</li>\n<li><a href=\"https://github.com/hail2u/node-css-mqpacker\" target=\"_blank\" rel=\"noopener\">CSS MQPacker</a> pack some CSS media query rules into one using PostCSS into one and adding them at the end of css file</li>\n<li><a href=\"https://github.com/css/csso\" target=\"_blank\" rel=\"noopener\">CSSO</a> is a CSS minifier that compresses and cleans our code</li>\n</ul>\n<p>To configure your newly installed plugins, you need to add this in package json:</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">\"postcss\": &#123;</div><div class=\"line\">    \"plugins\": &#123;</div><div class=\"line\">      \"autoprefixer\": &#123;</div><div class=\"line\">        \"browsers\": [</div><div class=\"line\">          \"last 2 versions\",</div><div class=\"line\">          <span class=\"string\">\"&gt; 2%\"</span></div><div class=\"line\">        ]</div><div class=\"line\">      &#125;,</div><div class=\"line\">      \"css-mqpacker\": &#123;&#125;,</div><div class=\"line\">      \"postcss-csso\": &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Styles-Folder-Structure\"><a href=\"#Styles-Folder-Structure\" class=\"headerlink\" title=\"Styles Folder Structure\"></a>Styles Folder Structure</h2><p>This is the basic folder structure we are using and recommend</p>\n<pre>\n├── client \n│   ├── styles\n│   │   ├── cc-app.scss // Main file where we import all the other scss files\n│   │   └── _helpers // in this folder we add all files for variables, functions, mixins \n|   │   │    └── _functions.scss // functions that we use in mixins \n|   │   │    └── _helpers.scss // general rules all over the website\n|   │   │    └── _mixins.scss // a group of declarations that you want to re-use\n|   │   │    └── _variables.scss\n│   │   └── base \n|   │   │    └── _normalize.scss // css reset for the browser \n|   │   │    └── _font.scss // rules for importing external fonts \n|   │   │    └── _general.scss // general rules for elements (html, body, links, a, etc)\n│   │   └── elements\n|   │   │    └── grid.scss\n│   │   └── form  \n|   │   │    └── _button.scss\n|   │   │    └── _checkbox.scss \n|   │   │    └── _radio.scss\n|   │   │    └── _text.scss\n|   │   │    └── _textarea.scss\n|   │   │    └── _select.scss\n|   │   │    └── _form-helpers.scss\n│   │   └── layout \n|   │   │    └── header\n|   │   │    └── footer\n|   │   │    └── main\n│   │   └── pages // a folder in which we add the css files for each page of application\n│   │   └── plugins // // in this folder we add the files from our external components that we use in the app\n│   ├── ...\n├── imports\n│   ├── ...\n└── server \n    └── ...\n</pre>\n\n<p>You can find a pre-installed meteor project with this folder structure, <a href=\"https://github.com/cult-of-coders/meteor-tuts-boilerplate\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Use-of-Flexbox\"><a href=\"#Use-of-Flexbox\" class=\"headerlink\" title=\"Use of Flexbox\"></a>Use of Flexbox</h2><p>To structure our layout model, we are using CSS3 Flexbile Box because it solves some problems that the layout float model have:</p>\n<ul>\n<li>vertical and horizontal centering</li>\n<li>same height columns</li>\n</ul>\n<p>You can learn more about it, <a href=\"https://css-tricks.com/snippets/css/a-guide-to-flexbox/\" target=\"_blank\" rel=\"noopener\">here</a></p>\n<h2 id=\"Use-of-Rem-for-font-size\"><a href=\"#Use-of-Rem-for-font-size\" class=\"headerlink\" title=\"Use of Rem for font size\"></a>Use of Rem for font size</h2><p>We are using rem size for our fonts because it offers responsiveness, scalability, improved reading experience, and greater flexibility in defining components. To read more about it, click <a href=\"https://www.sitepoint.com/understanding-and-using-rem-units-in-css/\" target=\"_blank\" rel=\"noopener\">here</a> </p>\n<h2 id=\"Writing-clean-css\"><a href=\"#Writing-clean-css\" class=\"headerlink\" title=\"Writing clean css\"></a>Writing clean css</h2><p>It is extremely important to write clean css code so that we have some recommendations for you:</p>\n<ul>\n<li>When you create an application, prefix your classes with something specific and short. For example, we chose for our company “cc” (Cult of Coders). The reason behind it is that if we get an external library, we won’t any have any conflicts</li>\n<li>Use 3 or less levels of css nesting. Most of the time you don’t need more than one level because if you want to override those styles only on a specific elements, you don’t have to recreate the whole nesting levels</li>\n<li>Using !important in your CSS usually means you’re narcissistic &amp; selfish or lazy. Respect the devs to come and don’t use it!</li>\n<li>For each component (or page / section) create a separate file in which you’ll store only the specific styles for that section. This will make the code much cleaner, offering better readability and very easy to modify later </li>\n<li>Naming standard convention. Our current recommendation is <a href=\"http://getbem.com/naming/\" target=\"_blank\" rel=\"noopener\">BEM</a></li>\n<li>Be specific in naming your classes. The class names should represent your elements</li>\n</ul>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* BAD */</span></div><div class=\"line\"><span class=\"selector-class\">.box</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">background-color</span>: green <span class=\"meta\">!important</span>;</div><div class=\"line\">  <span class=\"selector-class\">.box2</span> &#123;</div><div class=\"line\">    <span class=\"selector-class\">.cc-box3</span> &#123;</div><div class=\"line\">      <span class=\"attribute\">font-size</span>: <span class=\"number\">5px</span>;</div><div class=\"line\">      <span class=\"selector-class\">.cc-button-x</span> &#123;</div><div class=\"line\">        <span class=\"attribute\">color</span>: red; </div><div class=\"line\">      &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125; </div><div class=\"line\"><span class=\"selector-class\">.cc-div</span> &#123;&#125;</div></pre></td></tr></table></figure>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/* GOOD */</span></div><div class=\"line\"><span class=\"selector-class\">.cc-donut</span> &#123;</div><div class=\"line\">  &amp;--bg-main&#123;</div><div class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"variable\">$color-main</span>;</div><div class=\"line\">    <span class=\"attribute\">color</span>: <span class=\"variable\">$color-white</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"><span class=\"selector-class\">.cc-donuts-list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</div><div class=\"line\">  <span class=\"attribute\">display</span>: flex;</div><div class=\"line\">  </div><div class=\"line\">  &amp;__title &#123;</div><div class=\"line\">    @<span class=\"keyword\">include</span> font-size(<span class=\"number\">16px</span>);</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Use-of-Variables\"><a href=\"#Use-of-Variables\" class=\"headerlink\" title=\"Use of Variables\"></a>Use of Variables</h2><p>Variables are simply amazing because you can store some general rules that you want to apply in your stylesheet.</p>\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"variable\">$font-roboto</span>: <span class=\"string\">'Roboto'</span>, sans-serif;</div><div class=\"line\"><span class=\"variable\">$base-font-size</span>: <span class=\"number\">62.5%</span>;</div><div class=\"line\"><span class=\"variable\">$color-success</span>: <span class=\"number\">#4CAF50</span>;</div><div class=\"line\"><span class=\"variable\">$shadow-dp0</span>: <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> rgba(black, <span class=\"number\">0.2</span>), <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> rgba(black, <span class=\"number\">0.14</span>), <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> <span class=\"number\">0px</span> rgba(black, <span class=\"number\">0.12</span>);</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* How to use them? */</span></div><div class=\"line\"><span class=\"selector-class\">.cc-donuts-list</span> &#123;</div><div class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"variable\">$font-roboto</span>;</div><div class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"variable\">$color-success</span>;</div><div class=\"line\">  <span class=\"attribute\">box-shadow</span>: <span class=\"variable\">$shadow-dp0</span>;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"Use-of-mixins\"><a href=\"#Use-of-mixins\" class=\"headerlink\" title=\"Use of mixins\"></a>Use of mixins</h2><p>A mixin lets you make groups of CSS declarations that you want to reuse throughout your site\n<figure class=\"highlight scss\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div></pre></td><td class=\"code\"><pre><div class=\"line\">@<span class=\"keyword\">mixin</span> breakpoint (<span class=\"variable\">$value</span>, <span class=\"variable\">$min-value</span>: false) &#123;</div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$value</span> == <span class=\"string\">'phone-small'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (max-width : 330px) &#123; @<span class=\"keyword\">content</span>; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">if</span> <span class=\"variable\">$value</span> == <span class=\"string\">'phone'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (max-width : 750px) &#123; @<span class=\"keyword\">content</span>; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> if <span class=\"variable\">$value</span> == <span class=\"string\">'tablet'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (min-width: 751px) and (max-width: 1199px) &#123; @<span class=\"keyword\">content</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> if <span class=\"variable\">$value</span> == <span class=\"string\">'desktop'</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (min-width: 1601px) &#123; @<span class=\"keyword\">content</span> &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\"></div><div class=\"line\">  @<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">    @<span class=\"keyword\">media</span> only screen and (max-width: <span class=\"variable\">$value</span>) &#123; @<span class=\"keyword\">content</span>; &#125;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/* How to use it? */</span></div><div class=\"line\"><span class=\"selector-class\">.cc-notification</span> &#123;</div><div class=\"line\">  @<span class=\"keyword\">include</span> breakpoint(<span class=\"string\">\"tablet\"</span>) &#123;</div><div class=\"line\">    <span class=\"attribute\">font-size</span>: <span class=\"number\">50px</span>;</div><div class=\"line\">  &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h2 id=\"Homework\"><a href=\"#Homework\" class=\"headerlink\" title=\"Homework\"></a>Homework</h2><h4 id=\"1-Donut-colors\"><a href=\"#1-Donut-colors\" class=\"headerlink\" title=\"1. Donut colors\"></a>1. Donut colors</h4><p>Style the section where we display the donuts. Add to each element from the section, a specific class. Each type of donut, will have a different color.</p>\n<h4 id=\"2-Responsive-donuts\"><a href=\"#2-Responsive-donuts\" class=\"headerlink\" title=\"2. Responsive donuts\"></a>2. Responsive donuts</h4><p>The creation of a donut needs to be responsive so we can add it from each device we would like </p>\n"},{"title":"Static Type Checking","description":"Maintaining large projects","disqusPage":"Chapter 3: Static Type Checking","_content":"\n## Why?\n\nProbably you have noticed it's a lot easier to develop new projects than support old ones. That's because of complexity that tends to grow fast as we add new features to the program. \n\nSo, you might start breaking up your code into smaller modules, then add [testing](/chapters/3/testing.html)and maybe add some [linting](/chapters/3/linting.html). But what about the way those modules interact with each other? Wouldn't be great if we can define a contract that sets clear boundaries of what to except and enforce it? And that's where static type checking comes in. \n\nAlso, Meteor has [some plans](https://github.com/meteor/meteor/pull/10522#issuecomment-511506265) to move on with TypeScript and is encouraging developers to help out with the [conversion to TypeScript](https://github.com/meteor/meteor/pulls?utf8=%E2%9C%93&q=is%3Apr+label%3AProject%3ATypeScript-conversion). But we'll be using [FlowType](https://flow.org/) which is supported by the [ecmascript package](https://atmospherejs.com/meteor/ecmascript). Flow is much easier to pick up and can be incrementally adopted. Don't worry if you can use one you won't face much trouble using the other. \n\n## Install\n\n```js\nmeteor npm i --save-dev flow-bin eslint-plugin-flowtype\n```\n\n## Config\n\nThis is an opionated configuration.\n\nCreate `.flowconfig` file inside your project root:\n\n```\n[options]\n# Absolute path support:\n# e.g. \"/collections/todos\"\nmodule.name_mapper='^\\/\\(.*\\)$' -> '<PROJECT_ROOT>/\\1'\n\n# Meteor none core package support\n# e.g. \"meteor/kadira:flow-router\"\nmodule.name_mapper='^meteor\\/\\(.*\\):\\(.*\\)$' -> '<PROJECT_ROOT>/.meteor/local/build/programs/server/packages/\\1_\\2'\n\n# Meteor core package support\n# e.g. \"meteor/meteor\"\nmodule.name_mapper='^meteor\\/\\(.*\\)$' -> '<PROJECT_ROOT>/.meteor/local/build/programs/server/packages/\\1'\n\n# Fallback for Meteor core client package\n# e.g. \"meteor/meteor\"\nmodule.name_mapper='^meteor\\/\\(.*\\)$' -> '<PROJECT_ROOT>/.meteor/local/build/programs/web.browser/packages/\\1'\n\n# Structural mapping\nmodule.name_mapper='^modules\\/\\(.*\\)$' -> '<PROJECT_ROOT>/src/modules/\\1'\nmodule.name_mapper='^core\\/\\(.*\\)$' -> '<PROJECT_ROOT>/src/modules/core/\\1'\nmodule.name_mapper='^ui\\/\\(.*\\)$' -> '<PROJECT_ROOT>/src/client/\\1'\n\n[ignore]\n# Ignore the `.meteor/local` packages that aren't important\n.*/.meteor/local/build/programs/server/app/.*\n.*/.meteor/local/build/programs/server/assets/.*\n.*/.meteor/local/build/programs/server/npm/.*\n.*/.meteor/local/build/programs/server/node_modules/.*\n.*/.meteor/local/build/programs/web.browser/app/.*\n.*/.meteor/local/build/main.js\n.*/.meteor/packages/.*\n```\n\nIf you're using vscode there're few [adjustments](https://github.com/flowtype/flow-for-vscode) to be made. And that's it, enjoy!","source":"chapters/3/typing.md","raw":"---\ntitle: 'Static Type Checking'\ndescription: Maintaining large projects\ndisqusPage: 'Chapter 3: Static Type Checking'\n---\n\n## Why?\n\nProbably you have noticed it's a lot easier to develop new projects than support old ones. That's because of complexity that tends to grow fast as we add new features to the program. \n\nSo, you might start breaking up your code into smaller modules, then add [testing](/chapters/3/testing.html)and maybe add some [linting](/chapters/3/linting.html). But what about the way those modules interact with each other? Wouldn't be great if we can define a contract that sets clear boundaries of what to except and enforce it? And that's where static type checking comes in. \n\nAlso, Meteor has [some plans](https://github.com/meteor/meteor/pull/10522#issuecomment-511506265) to move on with TypeScript and is encouraging developers to help out with the [conversion to TypeScript](https://github.com/meteor/meteor/pulls?utf8=%E2%9C%93&q=is%3Apr+label%3AProject%3ATypeScript-conversion). But we'll be using [FlowType](https://flow.org/) which is supported by the [ecmascript package](https://atmospherejs.com/meteor/ecmascript). Flow is much easier to pick up and can be incrementally adopted. Don't worry if you can use one you won't face much trouble using the other. \n\n## Install\n\n```js\nmeteor npm i --save-dev flow-bin eslint-plugin-flowtype\n```\n\n## Config\n\nThis is an opionated configuration.\n\nCreate `.flowconfig` file inside your project root:\n\n```\n[options]\n# Absolute path support:\n# e.g. \"/collections/todos\"\nmodule.name_mapper='^\\/\\(.*\\)$' -> '<PROJECT_ROOT>/\\1'\n\n# Meteor none core package support\n# e.g. \"meteor/kadira:flow-router\"\nmodule.name_mapper='^meteor\\/\\(.*\\):\\(.*\\)$' -> '<PROJECT_ROOT>/.meteor/local/build/programs/server/packages/\\1_\\2'\n\n# Meteor core package support\n# e.g. \"meteor/meteor\"\nmodule.name_mapper='^meteor\\/\\(.*\\)$' -> '<PROJECT_ROOT>/.meteor/local/build/programs/server/packages/\\1'\n\n# Fallback for Meteor core client package\n# e.g. \"meteor/meteor\"\nmodule.name_mapper='^meteor\\/\\(.*\\)$' -> '<PROJECT_ROOT>/.meteor/local/build/programs/web.browser/packages/\\1'\n\n# Structural mapping\nmodule.name_mapper='^modules\\/\\(.*\\)$' -> '<PROJECT_ROOT>/src/modules/\\1'\nmodule.name_mapper='^core\\/\\(.*\\)$' -> '<PROJECT_ROOT>/src/modules/core/\\1'\nmodule.name_mapper='^ui\\/\\(.*\\)$' -> '<PROJECT_ROOT>/src/client/\\1'\n\n[ignore]\n# Ignore the `.meteor/local` packages that aren't important\n.*/.meteor/local/build/programs/server/app/.*\n.*/.meteor/local/build/programs/server/assets/.*\n.*/.meteor/local/build/programs/server/npm/.*\n.*/.meteor/local/build/programs/server/node_modules/.*\n.*/.meteor/local/build/programs/web.browser/app/.*\n.*/.meteor/local/build/main.js\n.*/.meteor/packages/.*\n```\n\nIf you're using vscode there're few [adjustments](https://github.com/flowtype/flow-for-vscode) to be made. And that's it, enjoy!","date":"2019-10-10T09:03:35.310Z","updated":"2019-10-10T09:03:35.310Z","path":"chapters/3/typing.html","_id":"ck1c3sbag00017ta4ej0suq62","comments":1,"layout":"page","content":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Probably you have noticed it’s a lot easier to develop new projects than support old ones. That’s because of complexity that tends to grow fast as we add new features to the program. </p>\n<p>So, you might start breaking up your code into smaller modules, then add <a href=\"/chapters/3/testing.html\">testing</a>and maybe add some <a href=\"/chapters/3/linting.html\">linting</a>. But what about the way those modules interact with each other? Wouldn’t be great if we can define a contract that sets clear boundaries of what to except and enforce it? And that’s where static type checking comes in. </p>\n<p>Also, Meteor has <a href=\"https://github.com/meteor/meteor/pull/10522#issuecomment-511506265\" target=\"_blank\" rel=\"noopener\">some plans</a> to move on with TypeScript and is encouraging developers to help out with the <a href=\"https://github.com/meteor/meteor/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+label%3AProject%3ATypeScript-conversion\" target=\"_blank\" rel=\"noopener\">conversion to TypeScript</a>. But we’ll be using <a href=\"https://flow.org/\" target=\"_blank\" rel=\"noopener\">FlowType</a> which is supported by the <a href=\"https://atmospherejs.com/meteor/ecmascript\" target=\"_blank\" rel=\"noopener\">ecmascript package</a>. Flow is much easier to pick up and can be incrementally adopted. Don’t worry if you can use one you won’t face much trouble using the other. </p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i --save-dev flow-bin eslint-plugin-flowtype</span><br></pre></td></tr></table></figure>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>This is an opionated configuration.</p>\n<p>Create <code>.flowconfig</code> file inside your project root:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[options]</span><br><span class=\"line\"><span class=\"comment\"># Absolute path support:</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"/collections/todos\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Meteor none core package support</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"meteor/kadira:flow-router\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^meteor\\/\\(.*\\):\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/.meteor/local/build/programs/server/packages/\\1_\\2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Meteor core package support</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"meteor/meteor\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^meteor\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/.meteor/local/build/programs/server/packages/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Fallback for Meteor core client package</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"meteor/meteor\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^meteor\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/.meteor/local/build/programs/web.browser/packages/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Structural mapping</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^modules\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/src/modules/\\1'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^core\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/src/modules/core/\\1'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^ui\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/src/client/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ignore]</span><br><span class=\"line\"><span class=\"comment\"># Ignore the `.meteor/local` packages that aren't important</span></span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/app/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/assets/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/npm/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/node_modules/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/web.browser/app/</span>.*</span><br><span class=\"line\">.*/.meteor/local/build/main.js</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/packages/</span>.*</span><br></pre></td></tr></table></figure>\n<p>If you’re using vscode there’re few <a href=\"https://github.com/flowtype/flow-for-vscode\" target=\"_blank\" rel=\"noopener\">adjustments</a> to be made. And that’s it, enjoy!</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Why\"><a href=\"#Why\" class=\"headerlink\" title=\"Why?\"></a>Why?</h2><p>Probably you have noticed it’s a lot easier to develop new projects than support old ones. That’s because of complexity that tends to grow fast as we add new features to the program. </p>\n<p>So, you might start breaking up your code into smaller modules, then add <a href=\"/chapters/3/testing.html\">testing</a>and maybe add some <a href=\"/chapters/3/linting.html\">linting</a>. But what about the way those modules interact with each other? Wouldn’t be great if we can define a contract that sets clear boundaries of what to except and enforce it? And that’s where static type checking comes in. </p>\n<p>Also, Meteor has <a href=\"https://github.com/meteor/meteor/pull/10522#issuecomment-511506265\" target=\"_blank\" rel=\"noopener\">some plans</a> to move on with TypeScript and is encouraging developers to help out with the <a href=\"https://github.com/meteor/meteor/pulls?utf8=%E2%9C%93&amp;q=is%3Apr+label%3AProject%3ATypeScript-conversion\" target=\"_blank\" rel=\"noopener\">conversion to TypeScript</a>. But we’ll be using <a href=\"https://flow.org/\" target=\"_blank\" rel=\"noopener\">FlowType</a> which is supported by the <a href=\"https://atmospherejs.com/meteor/ecmascript\" target=\"_blank\" rel=\"noopener\">ecmascript package</a>. Flow is much easier to pick up and can be incrementally adopted. Don’t worry if you can use one you won’t face much trouble using the other. </p>\n<h2 id=\"Install\"><a href=\"#Install\" class=\"headerlink\" title=\"Install\"></a>Install</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">meteor npm i --save-dev flow-bin eslint-plugin-flowtype</span><br></pre></td></tr></table></figure>\n<h2 id=\"Config\"><a href=\"#Config\" class=\"headerlink\" title=\"Config\"></a>Config</h2><p>This is an opionated configuration.</p>\n<p>Create <code>.flowconfig</code> file inside your project root:</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[options]</span><br><span class=\"line\"><span class=\"comment\"># Absolute path support:</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"/collections/todos\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Meteor none core package support</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"meteor/kadira:flow-router\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^meteor\\/\\(.*\\):\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/.meteor/local/build/programs/server/packages/\\1_\\2'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Meteor core package support</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"meteor/meteor\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^meteor\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/.meteor/local/build/programs/server/packages/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Fallback for Meteor core client package</span></span><br><span class=\"line\"><span class=\"comment\"># e.g. \"meteor/meteor\"</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^meteor\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/.meteor/local/build/programs/web.browser/packages/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Structural mapping</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^modules\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/src/modules/\\1'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^core\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/src/modules/core/\\1'</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.name_mapper=<span class=\"string\">'^ui\\/\\(.*\\)$'</span><span class=\"function\"> -&gt;</span> <span class=\"string\">'&lt;PROJECT_ROOT&gt;/src/client/\\1'</span></span><br><span class=\"line\"></span><br><span class=\"line\">[ignore]</span><br><span class=\"line\"><span class=\"comment\"># Ignore the `.meteor/local` packages that aren't important</span></span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/app/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/assets/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/npm/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/server/node_modules/</span>.*</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/local/build/programs/web.browser/app/</span>.*</span><br><span class=\"line\">.*/.meteor/local/build/main.js</span><br><span class=\"line\">.*<span class=\"regexp\">/.meteor/packages/</span>.*</span><br></pre></td></tr></table></figure>\n<p>If you’re using vscode there’re few <a href=\"https://github.com/flowtype/flow-for-vscode\" target=\"_blank\" rel=\"noopener\">adjustments</a> to be made. And that’s it, enjoy!</p>\n"}],"Post":[],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}